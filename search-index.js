var N=null,E="",T="t",U="u",searchIndex={};
var R=["byteorder","result","Reads an unsigned n-bytes integer from the underlying…","Reads a signed n-bytes integer from the underlying reader.","usize","DEPRECATED.","Writes an unsigned n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","read_u16","read_u24","read_u32","read_u48","read_u64","read_u128","read_uint","read_uint128","Reads an unsigned n-bytes integer from `buf`.","write_u16","write_u24","write_u32","write_u48","write_u64","write_u128","write_uint","write_uint128","Writes an unsigned integer `n` to `buf` using only `nbytes`.","read_i16","read_i24","read_i32","read_i48","read_i64","read_i128","read_int","read_int128","Reads a signed n-bytes integer from `buf`.","read_f32","Reads a IEEE754 single-precision (4 bytes) floating point…","read_f64","Reads a IEEE754 double-precision (8 bytes) floating point…","write_i16","write_i24","write_i32","write_i48","write_i64","write_i128","write_int","write_int128","Writes a signed integer `n` to `buf` using only `nbytes`.","write_f32","Writes a IEEE754 single-precision (4 bytes) floating point…","write_f64","Writes a IEEE754 double-precision (8 bytes) floating point…","read_u16_into","read_u32_into","read_u64_into","read_u128_into","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","Reads IEEE754 single-precision (4 bytes) floating point…","read_f64_into_unchecked","to_owned","clone_into","try_from","borrow_mut","try_into","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","bigendian","littleendian","ordering","partial_cmp","formatter","Reads an unsigned 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads an unsigned 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads an unsigned 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads an unsigned 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads an unsigned 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads an unsigned 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads an unsigned 128 bit integer from the underlying…","Reads a signed 128 bit integer from the underlying reader.","Reads a sequence of unsigned 16 bit integers from the…","Reads a sequence of unsigned 32 bit integers from the…","Reads a sequence of unsigned 64 bit integers from the…","Reads a sequence of unsigned 128 bit integers from the…","read_i8_into","Reads a sequence of signed 8 bit integers from the…","Reads a sequence of signed 16 bit integers from the…","Reads a sequence of signed 32 bit integers from the…","Reads a sequence of signed 64 bit integers from the…","Reads a sequence of signed 128 bit integers from the…","Reads a sequence of IEEE754 single-precision (4 bytes)…","Reads a sequence of IEEE754 double-precision (8 bytes)…","Writes an unsigned 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes an unsigned 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","ReadBytesExt","WriteBytesExt","ByteOrder","BigEndian","LittleEndian","num_traits","partialord","min_value","max_value","neg_infinity","Returns `-0.0`.","Returns the smallest finite value that this type can…","min_positive_value","Returns the smallest positive, normalized value that this…","Returns epsilon, a small positive value.","Returns the largest finite value that this type can…","is_infinite","is_finite","is_normal","Returns `true` if the number is neither zero, infinite,…","Returns the floating point category of the number. If only…","fpcategory","Returns the largest integer less than or equal to a number.","Returns the smallest integer greater than or equal to a…","Returns the nearest integer to a number. Round half-way…","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of `self`. Returns…","Returns a number that represents the sign of `self`.","is_sign_positive","is_sign_negative","Raise a number to an integer power.","to_degrees","to_radians","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","integer_decode","Returns the mantissa, base 2 exponent, and sign as…","Shifts the bits to the left by a specified amount amount,…","Shifts the bits to the right by a specified amount amount,…","num_traits::ops","Fused multiply-add. Computes `(self * a) + b` with only…","Performs the fused multiply-add operation.","checkedmul","The result after applying the operator.","Returns `true` if `self` is positive, including `+0.0`,…","Returns `true` if `self` is negative, including `-0.0`,…","Take the reciprocal (inverse) of a number, `1/x`.","Take the square root of a number.","Returns `e^(self)`, (the exponential function).","Returns `2^(self)`.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an…","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle…","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in…","Computes the arccosine of a number. Return value is in…","Computes the arctangent of a number. Return value is in…","Computes the four quadrant arctangent of `self` (`y`) and…","Simultaneously computes the sine and cosine of the number,…","Returns `e^(self) - 1` in a way that is accurate even if…","Returns `ln(1+n)` (natural logarithm) more accurately than…","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Computes the absolute value.","Returns the sign of the number.","ParseFloatError","FloatErrorKind","ToPrimitive","FromPrimitive","AsPrimitive","FloatCore","FloatConst","CheckedAdd","CheckedSub","CheckedMul","CheckedDiv","CheckedRem","CheckedNeg","CheckedShl","CheckedShr","MulAddAssign","Saturating","WrappingAdd","WrappingSub","WrappingMul","WrappingShl","WrappingShr","num_integer","integer","Returns the truncated principal `n`th root of an integer…","Returns the truncated principal square root of an integer…","Returns the truncated principal cube root of an integer --…","div_floor","mod_floor","div_mod_floor","extendedgcd","ExtendedGcd","IterBinomial","type_id","num_complex","to_string","complex","parsecomplexerror","add_assign","sub_assign","mul_assign","div_assign","rem_assign","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…","mul_add_assign","ParseComplexError","from_isize","from_i128","from_usize","from_u128","toprimitive","from_str_radix","Defines an additive identity element for `Self`.","Returns the additive identity element of `Self`, `0`. #…","Sets `self` to the additive identity element of `Self`, `0`.","Returns `true` if `self` is equal to the additive identity.","Defines a multiplicative identity element for `Self`.","Returns the multiplicative identity element of `Self`, `1`.","Sets `self` to the multiplicative identity element of…","Returns `true` if `self` is equal to the multiplicative…","Returns the additive identity, `0`.","Returns the multiplicative identity, `1`.","Useful functions for signed numbers (i.e. numbers that can…","is_positive","Returns true if the number is positive and false if the…","is_negative","Returns true if the number is negative and false if the…","A trait for values which cannot be negative","Saturating math operations","saturating_add","Saturating addition operator. Returns a+b, saturating at…","saturating_sub","Saturating subtraction operator. Returns a-b, saturating…","Performs addition that returns `None` instead of wrapping…","checked_add","Adds two numbers, checking for overflow. If overflow…","Performs subtraction that returns `None` instead of…","checked_sub","Subtracts two numbers, checking for underflow. If…","Performs multiplication that returns `None` instead of…","checked_mul","Multiplies two numbers, checking for underflow or…","Performs division that returns `None` instead of panicking…","checked_div","Divides two numbers, checking for underflow, overflow and…","Performs a left shift that returns `None` on shifts larger…","checked_shl","Checked shift left. Computes `self << rhs`, returning…","Performs a right shift that returns `None` on shifts…","checked_shr","Checked shift right. Computes `self >> rhs`, returning…","Performs addition that wraps around on overflow.","wrapping_add","Wrapping (modular) addition. Computes `self + other`,…","Performs multiplication that wraps around on overflow.","wrapping_mul","Wrapping (modular) multiplication. Computes `self *…","Performs subtraction that wraps around on overflow.","wrapping_sub","Wrapping (modular) subtraction. Computes `self - other`,…","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","Generic trait for floating point numbers","Returns the `NaN` value.","Returns the infinite value.","Returns the negative infinite value.","Returns `true` if this value is `NaN` and false otherwise.","Returns `true` if this value is positive infinity or…","Returns `true` if this number is neither infinite nor `NaN`.","Raise a number to a floating point power.","abs_sub","Return Euler’s number.","FRAC_1_PI","Return `1.0 / π`.","FRAC_1_SQRT_2","Return `1.0 / sqrt(2.0)`.","FRAC_2_PI","Return `2.0 / π`.","FRAC_2_SQRT_PI","Return `2.0 / sqrt(π)`.","FRAC_PI_2","Return `π / 2.0`.","FRAC_PI_3","Return `π / 3.0`.","FRAC_PI_4","Return `π / 4.0`.","FRAC_PI_6","Return `π / 6.0`.","FRAC_PI_8","Return `π / 8.0`.","Return `ln(10.0)`.","Return `ln(2.0)`.","Return `log10(e)`.","Return `log2(e)`.","Return Archimedes’ constant.","Return `sqrt(2.0)`.","A generic interface for casting between machine scalars…","Convert a value to another, using the `as` operator.","A generic trait for converting a number to a value.","Convert an `isize` to return an optional value of this…","Convert an `i8` to return an optional value of this type.…","Convert an `i16` to return an optional value of this type.…","Convert an `i32` to return an optional value of this type.…","Convert an `i64` to return an optional value of this type.…","Convert an `i128` to return an optional value of this…","Convert a `usize` to return an optional value of this…","Convert an `u8` to return an optional value of this type.…","Convert an `u16` to return an optional value of this type.…","Convert an `u32` to return an optional value of this type.…","Convert an `u64` to return an optional value of this type.…","Convert an `u128` to return an optional value of this…","Convert a `f32` to return an optional value of this type.…","Convert a `f64` to return an optional value of this type.…","A generic trait for converting a value to a number.","Converts the value of `self` to an `isize`.","Converts the value of `self` to an `i8`.","Converts the value of `self` to an `i16`.","Converts the value of `self` to an `i32`.","Converts the value of `self` to an `i64`.","Converts the value of `self` to an `i128`.","Converts the value of `self` to a `usize`.","Converts the value of `self` to an `u8`.","Converts the value of `self` to an `u16`.","Converts the value of `self` to an `u32`.","Converts the value of `self` to an `u64`.","Converts the value of `self` to an `u128`.","Converts the value of `self` to an `f32`.","Converts the value of `self` to an `f64`.","An interface for casting between machine scalars.","Creates a number from another value that can be converted…","Cast from one machine scalar to another.","Generic trait for primitive integers.","count_ones","Returns the number of ones in the binary representation of…","count_zeros","Returns the number of zeros in the binary representation…","leading_zeros","Returns the number of leading zeros in the binary…","trailing_zeros","Returns the number of trailing zeros in the binary…","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","Reverses the byte order of the integer.","Convert an integer from big endian to the target's…","Convert an integer from little endian to the target's…","Convert `self` to big endian from the target's endianness.","Convert `self` to little endian from the target's…","Raises self to the power of `exp`, using exponentiation by…","Raises a value to the power of exp, using exponentiation…","checked_pow","Raises a value to the power of exp, returning `None` if an…","Numeric traits for generic mathematics","A value bounded by a minimum and a maximum","num_traits::bounds","num_traits::cast","to_isize","to_usize","from_i16","from_i32","from_i64","from_u16","from_u32","from_u64","from_f32","from_f64","num_traits::float","infinity","neg_zero","classify","identities","num_traits::identities","set_zero","num_traits::int","num_traits::ops::checked","mul_add","saturating","num_traits::ops::saturating","num_traits::ops::wrapping","num_traits::pow","num_traits::real","A trait for real number types that do not necessarily have…","epsilon","Raise a number to a real number power.","num_traits::sign","Unsigned","The base trait for numeric types, covering `0` and `1`…","FromStrRadixErr","Convert from a string and radix <= 36.","The trait for types implementing basic numeric operations","The trait for `Num` types which also implement numeric…","The trait for references which implement numeric…","NumAssignOps","The trait for types implementing numeric assignment…","NumAssign","The trait for `Num` types which also implement assignment…","NumAssignRef","The trait for `NumAssign` types which also implement…","into_iter","size_hint","next_back","rangeinclusive","rangestep","rangestepinclusive","RangeInclusive","RangeStep","RangeStepInclusive","num_bigint","Creates and initializes a `BigInt`.","Creates and initializes a `BigInt` from an array of bytes…","Creates and initializes a `BigInt`. Each u8 of the input…","Returns the sign and the byte representation of the…","Returns the two's complement byte representation of the…","from_slice","Creates and initializes a `BigUint`.","assign_from_slice","from_bytes_be","biguint","from_bytes_le","parse_bytes","from_radix_be","from_radix_le","Creates and initializes a `BigUint`. Each u8 of the input…","to_bytes_be","to_bytes_le","Returns the byte representation of the `BigUint` in…","to_str_radix","Returns the integer formatted as a string in the given…","to_radix_be","Returns the integer in the requested base in big-endian…","to_radix_le","Returns the integer in the requested base in little-endian…","Determines the fewest bits necessary to express the…","Returns the truncated principal square root of `self` --…","Returns the truncated principal cube root of `self` -- see…","Returns the truncated principal `n`th root of `self` --…","to_biguint","to_bigint","parsebiginterror","bitand_assign","bitor_assign","bitxor_assign","shl_assign","shr_assign","nth_root","Calculates the Greatest Common Divisor (GCD) of the number…","Calculates the Lowest Common Multiple (LCM) of the number…","Deprecated, use `is_multiple_of` instead.","is_multiple_of","Returns `true` if the number is a multiple of `other`.","Returns `true` if the number is divisible by `2`.","Returns `true` if the number is not divisible by `2`.","Creates and initializes a BigInt.","ToBigUint","ParseBigIntError","from_str","description","to_u128","to_i128","is_zero","enum_primitive","Helper macro for internal use by `enum_from_primitive!`.","noneerror","Applies a function to the contained value (if any), or…","Transforms the `Option<T>` into a [`Result<T, E>`],…","Returns [`None`] if the option is [`None`], otherwise…","default","num_rational","bigrational","floatcore","parseratioerror","ParseRatioError","product","A big unsigned integer type.","A big signed integer type.","A complex number in Cartesian form.","Real portion of the complex number","Imaginary portion of the complex number","Floored integer division.","Floored integer modulo, satisfying:","Ceiled integer division.","Greatest Common Divisor (GCD).","Lowest Common Multiple (LCM).","Greatest Common Divisor (GCD) and Lowest Common Multiple…","extended_gcd","Greatest common divisor and Bézout coefficients.","extended_gcd_lcm","Greatest common divisor, least common multiple, and Bézout…","Returns `true` if `self` is a multiple of `other`.","Returns `true` if the number is even.","Returns `true` if the number is odd.","Simultaneous truncated integer division and modulus.…","Simultaneous floored integer division and modulus. Returns…","next_multiple_of","Rounds up to nearest multiple of argument.","prev_multiple_of","Rounds down to nearest multiple of argument.","div_ceil","Returns an iterator over the given range [start, stop)…","range_inclusive","Return an iterator over the range [start, stop]","range_step","Return an iterator over the range [start, stop) by `step`.…","range_step_inclusive","Return an iterator over the range [start, stop] by `step`.…","num::traits","num::traits::ops","Binary operator for raising a value to a power.","Returns `self` to the power `rhs`.","Alias for a `Ratio` of machine-sized integers.","BigRational","Alias for arbitrary precision rationals.","num::bigint","num::complex","num::integer","num::iter","num::rational","An iterator over the range [start, stop)","An iterator over the range [start, stop]","An iterator over the range [start, stop) by `step`. It…","An iterator over the range [start, stop] by `step`. It…","Generic trait for floating point numbers that works with…","Returns positive infinity.","Returns negative infinity.","Returns NaN.","Returns `true` if the number is NaN.","Returns `true` if the number is infinite.","Returns `true` if the number is neither infinite or NaN.","Returns `true` if `self` is positive, including `+0.0` and…","Returns `true` if `self` is negative, including `-0.0` and…","Returns the reciprocal (multiplicative inverse) of the…","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Performs an integral remainder that returns `None` instead…","checked_rem","Finds the remainder of dividing two numbers, checking for…","Performs negation that returns `None` if the result can't…","checked_neg","Negates a number, returning `None` for results that can't…","Unary operator for retrieving the multiplicative inverse,…","Returns the multiplicative inverse of `self`.","The resulting type after applying the fused multiply-add.","The fused multiply-add assignment operation.","Performs a left shift that does not panic.","wrapping_shl","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…","Performs a right shift that does not panic.","wrapping_shr","Panic-free bitwise shift-right; yields `self >>…","NumCast","Bounded","sin_cos","set_one","from_i8","from_u8","PrimInt","wrapping","Greatest common divisor and Bézout coefficients","An iterator over binomial coefficients.","div_rem","Simultaneous integer division and modulus","Floored integer division","Floored integer modulus","Simultaneous floored integer division and modulus","Ceiled integer division","Calculates the Greatest Common Divisor (GCD) and Lowest…","Calculate the binomial coefficient.","multinomial","Calculate the multinomial coefficient.","Provides methods to compute an integer's square root, cube…","For a given n, iterate over all binomial coefficients…","iterbinomial","Complex32","Complex64","Create a new Complex","Returns imaginary unit","Returns the square of the norm (since `T` doesn't…","Multiplies `self` by the scalar `t`.","Divides `self` by the scalar `t`.","Raises `self` to an unsigned integer power.","Returns the complex conjugate. i.e. `re - i im`","Returns `1/self`","Raises `self` to a signed integer power.","Returns the L1 norm `|re| + |im|` -- the [Manhattan…","Calculate |self|","Calculate the principal Arg of self.","Convert to polar form (r, theta), such that `self = r *…","from_polar","Convert a polar representation into a complex number.","Computes `e^(self)`, where `e` is the base of the natural…","Computes the principal value of natural logarithm of `self`.","Computes the principal value of the square root of `self`.","Computes the principal value of the cube root of `self`.","Raises `self` to a floating point power.","Returns the logarithm of `self` with respect to an…","Raises `self` to a complex power.","Raises a floating point number to the complex power `self`.","Computes the sine of `self`.","Computes the cosine of `self`.","Computes the tangent of `self`.","Computes the principal value of the inverse sine of `self`.","Computes the principal value of the inverse cosine of…","Computes the principal value of the inverse tangent of…","Computes the hyperbolic sine of `self`.","Computes the hyperbolic cosine of `self`.","Computes the hyperbolic tangent of `self`.","Computes the principal value of inverse hyperbolic sine of…","Computes the principal value of inverse hyperbolic cosine…","Computes the principal value of inverse hyperbolic tangent…","Returns `1/self` using floating-point operations.","Returns `self/other` using floating-point operations.","Checks if the given complex number is NaN","Checks if the given complex number is infinite","Checks if the given complex number is finite","Checks if the given complex number is normal","A Sign is a `BigInt`'s composing element.","from_biguint","Reinitializes a `BigInt`.","from_signed_bytes_be","from_signed_bytes_le","to_signed_bytes_be","to_signed_bytes_le","Returns the sign of the `BigInt` as a `Sign`.","Converts this `BigInt` into a `BigUint`, if it's not…","Returns `(self ^ exponent) mod modulus`","Assign a value to a `BigUint`.","Creates and initializes a `BigUint`. The input slice must…","Returns `(self ^ exponent) % modulus`.","A generic trait for converting a value to a `BigUint`.","Converts the value of `self` to a `BigUint`.","ToBigInt","A generic trait for converting a value to a `BigInt`.","Converts the value of `self` to a `BigInt`.","Negate Sign value.","divides","is_even","Represents the ratio between two numbers.","Rational","Rational32","Alias for a `Ratio` of 32-bit-sized integers.","Rational64","Alias for a `Ratio` of 64-bit-sized integers.","Creates a new `Ratio`. Fails if `denom` is zero.","from_integer","Creates a `Ratio` representing the integer `t`.","Creates a `Ratio` without checking for `denom == 0` or…","to_integer","Converts to an integer, rounding towards zero.","Gets an immutable reference to the numerator.","Gets an immutable reference to the denominator.","is_integer","Returns true if the rational number is an integer…","Returns a reduced copy of self.","Returns the reciprocal.","Rounds towards minus infinity.","Rounds towards plus infinity.","Rounds to the nearest integer. Rounds half-way cases away…","Rounds towards zero.","Returns the fractional part of a number, with division…","Raises the `Ratio` to the power of an exponent.","from_float","Converts a float into a rational number.","approximate_float","Renders as `numer/denom`. If denom=1, renders as numer.","Parses `numer/denom` or just `numer`.","Parses `numer/denom` where the numbers are in base `radix`.","scopedcoil","transport","scopedregister","mut_transport","modbus::scoped","modbus::tcp","read_coils","read_discrete_inputs","read_holding_registers","read_input_registers","write_single_coil","write_single_register","write_multiple_coils","write_multiple_registers","exceptioncode","ExceptionCode","CoilDropFunction","RegisterDropFunction","ScopedCoil","ScopedRegister","Transport"];
searchIndex["modbus"]={"doc":"Modbus implementation in pure Rust.","i":[[4,R[729],"modbus","Modbus exception codes returned from the server.",N,N],[13,"IllegalFunction",E,E,0,N],[13,"IllegalDataAddress",E,E,0,N],[13,"IllegalDataValue",E,E,0,N],[13,"SlaveOrServerFailure",E,E,0,N],[13,"Acknowledge",E,E,0,N],[13,"SlaveOrServerBusy",E,E,0,N],[13,"NegativeAcknowledge",E,E,0,N],[13,"MemoryParity",E,E,0,N],[13,"NotDefined",E,E,0,N],[13,"GatewayPath",E,E,0,N],[13,"GatewayTarget",E,E,0,N],[4,"Reason",E,"`InvalidData` reasons",N,N],[13,"UnexpectedReplySize",E,E,1,N],[13,"BytecountNotEven",E,E,1,N],[13,"SendBufferEmpty",E,E,1,N],[13,"RecvBufferEmpty",E,E,1,N],[13,"SendBufferTooBig",E,E,1,N],[13,"DecodingError",E,E,1,N],[13,"EncodingError",E,E,1,N],[13,"InvalidByteorder",E,E,1,N],[13,"Custom",E,E,1,N],[4,"Error",E,"Combination of Modbus, IO and data corruption errors",N,N],[13,"Exception",E,E,2,N],[13,"Io",E,E,2,N],[13,"InvalidResponse",E,E,2,N],[13,"InvalidData",E,E,2,N],[13,"InvalidFunction",E,E,2,N],[13,"ParseCoilError",E,E,2,N],[4,"Coil",E,"Single bit status values, used in read or write coil…",N,N],[13,"On",E,E,3,N],[13,"Off",E,E,3,N],[0,"binary",E,E,N,N],[5,"unpack_bits","modbus::binary",E,N,[[["u16"]],[["vec",["coil"]],["coil"]]]],[5,"pack_bits",E,E,N,[[],[["u8"],["vec",["u8"]]]]],[5,"unpack_bytes",E,E,N,[[],[["u8"],["vec",["u8"]]]]],[5,"pack_bytes",E,E,N,[[],[["vec",["u16"]],[R[1],["vec"]]]]],[0,"scoped","modbus","A set of objects which automatically change their register…",N,N],[3,R[732],R[718],"Auto object which modifies it's coil value depending on a…",N,N],[3,R[733],E,"Auto object which modifies it's register value depending…",N,N],[4,R[730],E,"Action to perform when the `ScopedCoil` is dropped.",N,N],[13,"On",E,"Set the coil to `Coil::On`",4,N],[13,"Off",E,"Set the coil to `Coil::Off`",4,N],[13,"Toggle",E,"Toggle the current value.",4,N],[4,R[731],E,"Action to perform when the `ScopedRegister` is dropped.",N,N],[13,"Zero",E,"Set the register to zero value",5,N],[13,"Increment",E,"Increment the current register value by 1",5,N],[13,"Decrement",E,"Decrement the current register value by 1",5,N],[13,"Value",E,"Set the register value to the given value.",5,N],[13,"Fun",E,"Execute the given function on the current value, setting…",5,N],[11,"new",E,"Create a new `ScopedCoil` object with `address` and drop…",6,[[["u16"],[R[715]],["coildropfunction"]],[[R[714]],[R[1],[R[714]]]]]],[11,R[717],E,E,6,[[["self"]],[R[715]]]],[11,"new",E,"Create a new `ScopedRegister` object with `address` and…",7,[[["u16"],["registerdropfunction"],[R[715]]],[[R[716]],[R[1],[R[716]]]]]],[11,R[717],E,E,7,[[["self"]],[R[715]]]],[0,"tcp","modbus","The Modbus TCP backend implements a Modbus variant used…",N,N],[3,"Config",R[719],"Config structure for more control over the tcp socket…",N,N],[12,"tcp_port",E,"The TCP port to use for communication (Default: `502`)",8,N],[12,"tcp_connect_timeout",E,"Connection timeout for TCP socket (Default: `OS Default`)",8,N],[12,"tcp_read_timeout",E,"Timeout when reading from the TCP socket (Default:…",8,N],[12,"tcp_write_timeout",E,"Timeout when writing to the TCP socket (Default: `infinite`)",8,N],[12,"modbus_uid",E,"The modbus Unit Identifier used in the modbus layer…",8,N],[3,R[734],E,"Context object which holds state for all modbus operations.",N,N],[11,"new",E,"Create a new context context object and connect it to…",9,[[["str"]],[[R[715]],[R[1],[R[715]]]]]],[11,"new_with_cfg",E,"Create a new context object and connect it to `addr` on…",9,[[["str"],["config"]],[[R[715]],[R[1],[R[715]]]]]],[11,"close",E,E,9,[[["self"]],[R[1]]]],[6,"Result","modbus","Result type used to nofify success or failure in…",N,N],[8,"Client",E,E,N,N],[10,R[721],E,E,10,[[["self"],["u16"]],[["vec",["coil"]],[R[1],["vec"]]]]],[10,R[720],E,E,10,[[["self"],["u16"]],[["vec",["coil"]],[R[1],["vec"]]]]],[10,R[724],E,E,10,[[["self"],["u16"],["coil"]],[R[1]]]],[10,R[726],E,E,10,[[["self"],["u16"]],[R[1]]]],[10,R[723],E,E,10,[[["self"],["u16"]],[["vec",["u16"]],[R[1],["vec"]]]]],[10,R[722],E,E,10,[[["self"],["u16"]],[["vec",["u16"]],[R[1],["vec"]]]]],[10,R[725],E,E,10,[[["self"],["u16"]],[R[1]]]],[10,R[727],E,E,10,[[["self"],["u16"]],[R[1]]]],[10,"set_uid",E,E,10,[[["self"],["u8"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[67],E,E,1,[[[U]],[R[1]]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[236],E,E,1,[[["self"]],["typeid"]]],[11,R[68],E,E,1,[[["self"]],[T]]],[11,R[69],E,E,1,[[],[R[1]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[238],E,E,2,[[["self"]],["string"]]],[11,R[67],E,E,2,[[[U]],[R[1]]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[236],E,E,2,[[["self"]],["typeid"]]],[11,R[68],E,E,2,[[["self"]],[T]]],[11,R[69],E,E,2,[[],[R[1]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[65],E,E,3,[[["self"]],[T]]],[11,R[66],E,E,3,[[[T],["self"]]]],[11,R[67],E,E,3,[[[U]],[R[1]]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[236],E,E,3,[[["self"]],["typeid"]]],[11,R[68],E,E,3,[[["self"]],[T]]],[11,R[69],E,E,3,[[],[R[1]]]],[11,"from",R[718],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[67],E,E,6,[[[U]],[R[1]]]],[11,"borrow",E,E,6,[[["self"]],[T]]],[11,R[236],E,E,6,[[["self"]],["typeid"]]],[11,R[68],E,E,6,[[["self"]],[T]]],[11,R[69],E,E,6,[[],[R[1]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[67],E,E,7,[[[U]],[R[1]]]],[11,"borrow",E,E,7,[[["self"]],[T]]],[11,R[236],E,E,7,[[["self"]],["typeid"]]],[11,R[68],E,E,7,[[["self"]],[T]]],[11,R[69],E,E,7,[[],[R[1]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[67],E,E,4,[[[U]],[R[1]]]],[11,"borrow",E,E,4,[[["self"]],[T]]],[11,R[236],E,E,4,[[["self"]],["typeid"]]],[11,R[68],E,E,4,[[["self"]],[T]]],[11,R[69],E,E,4,[[],[R[1]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[67],E,E,5,[[[U]],[R[1]]]],[11,"borrow",E,E,5,[[["self"]],[T]]],[11,R[236],E,E,5,[[["self"]],["typeid"]]],[11,R[68],E,E,5,[[["self"]],[T]]],[11,R[69],E,E,5,[[],[R[1]]]],[11,"from",R[719],E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[65],E,E,8,[[["self"]],[T]]],[11,R[66],E,E,8,[[[T],["self"]]]],[11,R[67],E,E,8,[[[U]],[R[1]]]],[11,"borrow",E,E,8,[[["self"]],[T]]],[11,R[236],E,E,8,[[["self"]],["typeid"]]],[11,R[68],E,E,8,[[["self"]],[T]]],[11,R[69],E,E,8,[[],[R[1]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[67],E,E,9,[[[U]],[R[1]]]],[11,"borrow",E,E,9,[[["self"]],[T]]],[11,R[236],E,E,9,[[["self"]],["typeid"]]],[11,R[68],E,E,9,[[["self"]],[T]]],[11,R[69],E,E,9,[[],[R[1]]]],[11,R[720],E,"Read `count` bits starting at address `addr`.",9,[[["self"],["u16"]],[["vec",["coil"]],[R[1],["vec"]]]]],[11,R[721],E,"Read `count` input bits starting at address `addr`.",9,[[["self"],["u16"]],[["vec",["coil"]],[R[1],["vec"]]]]],[11,R[722],E,"Read `count` 16bit registers starting at address `addr`.",9,[[["self"],["u16"]],[["vec",["u16"]],[R[1],["vec"]]]]],[11,R[723],E,"Read `count` 16bit input registers starting at address…",9,[[["self"],["u16"]],[["vec",["u16"]],[R[1],["vec"]]]]],[11,R[724],E,"Write a single coil (bit) to address `addr`.",9,[[["self"],["u16"],["coil"]],[R[1]]]],[11,R[725],E,"Write a single 16bit register to address `addr`.",9,[[["self"],["u16"]],[R[1]]]],[11,R[726],E,"Write a multiple coils (bits) starting at address `addr`.",9,[[["self"],["u16"]],[R[1]]]],[11,R[727],E,"Write a multiple 16bit registers starting at address `addr`.",9,[[["self"],["u16"]],[R[1]]]],[11,"set_uid",E,"Set the unit identifier.",9,[[["self"],["u8"]]]],[11,"eq","modbus",E,0,[[[R[728]],["self"]],["bool"]]],[11,"eq",E,E,3,[[["coil"],["self"]],["bool"]]],[11,"clone",R[719],E,8,[[["self"]],["config"]]],[11,"clone","modbus",E,3,[[["self"]],["coil"]]],[11,"from",E,E,2,[[[R[728]]],["error"]]],[11,"from",E,E,2,[[["error"]],["error"]]],[11,"drop",R[718],E,6,[[["self"]]]],[11,"drop",E,E,7,[[["self"]]]],[11,R[514],R[719],E,8,[[],["config"]]],[11,"fmt","modbus",E,0,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,1,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,2,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,3,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,2,[[[R[84]],["self"]],[R[1]]]],[11,R[503],E,E,3,[[["str"]],[["coil"],[R[1],["coil"]]]]],[11,R[504],E,E,2,[[["self"]],["str"]]],[11,"cause",E,E,2,[[["self"]],[["option",["error"]],["error"]]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]]],"p":[[4,R[729]],[4,"Reason"],[4,"Error"],[4,"Coil"],[4,R[730]],[4,R[731]],[3,R[732]],[3,R[733]],[3,"Config"],[3,R[734]],[8,"Client"]]};
searchIndex["num"]={"doc":"A collection of numeric types and traits for Rust.","i":[[3,"BigInt","num",R[522],N,N],[3,"BigUint",E,R[521],N,N],[3,"Complex",E,R[523],N,N],[12,"re",E,R[524],0,N],[12,"im",E,R[525],0,N],[6,R[685],E,R[557],N,N],[6,R[558],E,R[559],N,N],[8,"Integer",E,E,N,N],[10,R[230],E,R[526],1,[[["self"]],["self"]]],[10,R[231],E,R[527],1,[[["self"]],["self"]]],[11,R[545],E,R[528],1,[[["self"]],["self"]]],[10,"gcd",E,R[529],1,[[["self"]],["self"]]],[10,"lcm",E,R[530],1,[[["self"]],["self"]]],[11,"gcd_lcm",E,R[531],1,[[["self"]]]],[11,R[532],E,R[533],1,[[["self"]],[R[233]]]],[11,R[534],E,R[535],1,[[["self"]]]],[10,R[682],E,R[495],1,[[["self"]],["bool"]]],[10,R[496],E,R[536],1,[[["self"]],["bool"]]],[10,R[683],E,R[537],1,[[["self"]],["bool"]]],[10,"is_odd",E,R[538],1,[[["self"]],["bool"]]],[10,R[607],E,R[539],1,[[["self"]]]],[11,R[232],E,R[540],1,[[["self"]]]],[11,R[541],E,R[542],1,[[["self"]],["self"]]],[11,R[543],E,R[544],1,[[["self"]],["self"]]],[5,"range",E,R[546],N,[[["a"]],["range"]]],[5,R[547],E,R[548],N,[[["a"]],[R[449]]]],[5,R[549],E,R[550],N,[[["a"]],[R[450]]]],[5,R[551],E,R[552],N,[[["a"]],[R[451]]]],[8,"Num",E,R[434],N,N],[16,R[435],E,E,2,N],[10,R[254],E,R[436],2,[[["u32"],["str"]],[R[1]]]],[8,"Zero",E,R[255],N,N],[10,"zero",E,R[256],3,[[],["self"]]],[11,R[420],E,R[257],3,[[["self"]]]],[10,R[507],E,R[258],3,[[["self"]],["bool"]]],[8,"One",E,R[259],N,N],[10,"one",E,R[260],4,[[],["self"]]],[11,R[600],E,R[261],4,[[["self"]]]],[11,"is_one",E,R[262],4,[[["self"]],["bool"]]],[8,"Signed",E,R[265],N,N],[10,"abs",E,R[201],5,[[["self"]],["self"]]],[10,R[314],E,R[182],5,[[["self"]],["self"]]],[10,"signum",E,R[202],5,[[["self"]],["self"]]],[10,R[266],E,R[267],5,[[["self"]],["bool"]]],[10,R[268],E,R[269],5,[[["self"]],["bool"]]],[8,R[433],E,R[270],N,N],[8,R[598],E,R[303],N,N],[10,R[132],E,R[304],6,[[],["self"]]],[10,R[133],E,R[305],6,[[],["self"]]],[5,"one",E,R[264],N,[[],[T]]],[5,"zero",E,R[263],N,[[],[T]]],[5,"abs",E,R[201],N,[[[T]],[T]]],[5,R[314],E,R[182],N,[[[T]],[T]]],[5,"signum",E,R[202],N,[[[T]],[T]]],[8,R[219],E,R[271],N,N],[10,R[272],E,R[273],7,[[],["self"]]],[10,R[274],E,R[275],7,[[],["self"]]],[8,R[210],E,R[276],N,N],[10,R[277],E,R[278],8,[[["self"]],["option"]]],[8,R[211],E,R[279],N,N],[10,R[280],E,R[281],9,[[["self"]],["option"]]],[8,R[212],E,R[282],N,N],[10,R[283],E,R[284],10,[[["self"]],["option"]]],[8,R[213],E,R[285],N,N],[10,R[286],E,R[287],11,[[["self"]],["option"]]],[8,R[603],E,R[375],N,N],[10,R[376],E,R[377],12,[[],["u32"]]],[10,R[378],E,R[379],12,[[],["u32"]]],[10,R[380],E,R[381],12,[[],["u32"]]],[10,R[382],E,R[383],12,[[],["u32"]]],[10,R[384],E,R[163],12,[[["u32"]],["self"]]],[10,R[385],E,R[164],12,[[["u32"]],["self"]]],[10,R[386],E,R[163],12,[[["u32"]],["self"]]],[10,R[387],E,R[164],12,[[["u32"]],["self"]]],[10,R[388],E,R[163],12,[[["u32"]],["self"]]],[10,R[389],E,R[164],12,[[["u32"]],["self"]]],[10,R[390],E,R[391],12,[[],["self"]]],[10,"from_be",E,R[392],12,[[],["self"]]],[10,"from_le",E,R[393],12,[[],["self"]]],[10,"to_be",E,R[394],12,[[],["self"]]],[10,"to_le",E,R[395],12,[[],["self"]]],[10,"pow",E,R[396],12,[[["u32"]],["self"]]],[8,R[205],E,R[357],N,N],[11,R[404],E,R[358],13,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8",E,R[359],13,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16",E,R[360],13,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32",E,R[361],13,[[["self"]],[["i32"],["option",["i32"]]]]],[10,"to_i64",E,R[362],13,[[["self"]],[["i64"],["option",["i64"]]]]],[11,R[506],E,R[363],13,[[["self"]],[["i128"],["option",["i128"]]]]],[11,R[405],E,R[364],13,[[["self"]],[["option",[R[4]]],[R[4]]]]],[11,"to_u8",E,R[365],13,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16",E,R[366],13,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"to_u32",E,R[367],13,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64",E,R[368],13,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,R[369],13,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32",E,R[370],13,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64",E,R[371],13,[[["self"]],[["f64"],["option",["f64"]]]]],[8,R[206],E,R[342],N,N],[11,R[249],E,R[343],14,[[["isize"]],["option"]]],[11,R[601],E,R[344],14,[[["i8"]],["option"]]],[11,R[406],E,R[345],14,[[["i16"]],["option"]]],[11,R[407],E,R[346],14,[[["i32"]],["option"]]],[10,R[408],E,R[347],14,[[["i64"]],["option"]]],[11,R[250],E,R[348],14,[[["i128"]],["option"]]],[11,R[251],E,R[349],14,[[[R[4]]],["option"]]],[11,R[602],E,R[350],14,[[["u8"]],["option"]]],[11,R[409],E,R[351],14,[[["u16"]],["option"]]],[11,R[410],E,R[352],14,[[["u32"]],["option"]]],[10,R[411],E,R[353],14,[[["u64"]],["option"]]],[11,R[252],E,R[354],14,[[["u128"]],["option"]]],[11,R[412],E,R[355],14,[[["f32"]],["option"]]],[11,R[413],E,R[356],14,[[["f64"]],["option"]]],[8,R[597],E,R[372],N,N],[10,"from",E,R[373],15,[[[T]],["option"]]],[0,"cast",E,E,N,N],[8,R[205],"num::cast",R[357],N,N],[11,R[404],E,R[358],13,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8",E,R[359],13,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16",E,R[360],13,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32",E,R[361],13,[[["self"]],[["i32"],["option",["i32"]]]]],[10,"to_i64",E,R[362],13,[[["self"]],[["i64"],["option",["i64"]]]]],[11,R[506],E,R[363],13,[[["self"]],[["i128"],["option",["i128"]]]]],[11,R[405],E,R[364],13,[[["self"]],[["option",[R[4]]],[R[4]]]]],[11,"to_u8",E,R[365],13,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16",E,R[366],13,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"to_u32",E,R[367],13,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64",E,R[368],13,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,R[369],13,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32",E,R[370],13,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64",E,R[371],13,[[["self"]],[["f64"],["option",["f64"]]]]],[8,R[206],E,R[342],N,N],[11,R[249],E,R[343],14,[[["isize"]],["option"]]],[11,R[601],E,R[344],14,[[["i8"]],["option"]]],[11,R[406],E,R[345],14,[[["i16"]],["option"]]],[11,R[407],E,R[346],14,[[["i32"]],["option"]]],[10,R[408],E,R[347],14,[[["i64"]],["option"]]],[11,R[250],E,R[348],14,[[["i128"]],["option"]]],[11,R[251],E,R[349],14,[[[R[4]]],["option"]]],[11,R[602],E,R[350],14,[[["u8"]],["option"]]],[11,R[409],E,R[351],14,[[["u16"]],["option"]]],[11,R[410],E,R[352],14,[[["u32"]],["option"]]],[10,R[411],E,R[353],14,[[["u64"]],["option"]]],[11,R[252],E,R[354],14,[[["u128"]],["option"]]],[11,R[412],E,R[355],14,[[["f32"]],["option"]]],[11,R[413],E,R[356],14,[[["f64"]],["option"]]],[5,"cast",E,R[374],N,[[[T]],["option"]]],[8,R[597],E,R[372],N,N],[10,"from",E,R[373],15,[[[T]],["option"]]],[8,R[207],E,R[340],N,N],[10,"as_",E,R[341],16,[[],[T]]],[5,"cast","num",R[374],N,[[[T]],["option"]]],[0,"pow",E,E,N,N],[8,"Pow","num::pow",R[555],N,N],[16,"Output",E,R[169],17,N],[10,"pow",E,R[556],17,[[["rhs"]]]],[5,"pow",E,R[397],N,[[[R[4]],[T]],[T]]],[5,R[398],E,R[399],N,[[[R[4]],[T]],["option"]]],[5,"pow","num",R[397],N,[[[R[4]],[T]],[T]]],[5,R[398],E,R[399],N,[[[R[4]],[T]],["option"]]],[5,"clamp",E,R[401],N,[[[T]],[T]]],[8,"Float",E,R[306],N,N],[10,"nan",E,R[307],18,[[],["self"]]],[10,R[415],E,R[308],18,[[],["self"]]],[10,R[134],E,R[309],18,[[],["self"]]],[10,R[416],E,R[135],18,[[],["self"]]],[10,R[132],E,R[136],18,[[],["self"]]],[10,R[137],E,R[138],18,[[],["self"]]],[11,R[430],E,R[139],18,[[],["self"]]],[10,R[133],E,R[140],18,[[],["self"]]],[10,"is_nan",E,R[310],18,[[],["bool"]]],[10,R[141],E,R[311],18,[[],["bool"]]],[10,R[142],E,R[312],18,[[],["bool"]]],[10,R[143],E,R[144],18,[[],["bool"]]],[10,R[417],E,R[145],18,[[],[R[146]]]],[10,"floor",E,R[147],18,[[],["self"]]],[10,"ceil",E,R[148],18,[[],["self"]]],[10,"round",E,R[149],18,[[],["self"]]],[10,"trunc",E,R[150],18,[[],["self"]]],[10,"fract",E,R[151],18,[[],["self"]]],[10,"abs",E,R[152],18,[[],["self"]]],[10,"signum",E,R[153],18,[[],["self"]]],[10,R[154],E,R[170],18,[[],["bool"]]],[10,R[155],E,R[171],18,[[],["bool"]]],[10,R[423],E,R[166],18,[[],["self"]]],[10,"recip",E,R[172],18,[[],["self"]]],[10,"powi",E,R[156],18,[[["i32"]],["self"]]],[10,"powf",E,R[313],18,[[],["self"]]],[10,"sqrt",E,R[173],18,[[],["self"]]],[10,"exp",E,R[174],18,[[],["self"]]],[10,"exp2",E,R[175],18,[[],["self"]]],[10,"ln",E,R[176],18,[[],["self"]]],[10,"log",E,R[177],18,[[],["self"]]],[10,"log2",E,R[178],18,[[],["self"]]],[10,"log10",E,R[179],18,[[],["self"]]],[11,R[157],E,R[180],18,[[],["self"]]],[11,R[158],E,R[181],18,[[],["self"]]],[10,"max",E,R[159],18,[[],["self"]]],[10,"min",E,R[160],18,[[],["self"]]],[10,R[314],E,R[182],18,[[],["self"]]],[10,"cbrt",E,R[183],18,[[],["self"]]],[10,"hypot",E,R[184],18,[[],["self"]]],[10,"sin",E,R[185],18,[[],["self"]]],[10,"cos",E,R[186],18,[[],["self"]]],[10,"tan",E,R[187],18,[[],["self"]]],[10,"asin",E,R[188],18,[[],["self"]]],[10,"acos",E,R[189],18,[[],["self"]]],[10,"atan",E,R[190],18,[[],["self"]]],[10,"atan2",E,R[191],18,[[],["self"]]],[10,R[599],E,R[192],18,[[]]],[10,"exp_m1",E,R[193],18,[[],["self"]]],[10,"ln_1p",E,R[194],18,[[],["self"]]],[10,"sinh",E,R[195],18,[[],["self"]]],[10,"cosh",E,R[196],18,[[],["self"]]],[10,"tanh",E,R[197],18,[[],["self"]]],[10,"asinh",E,R[198],18,[[],["self"]]],[10,"acosh",E,R[199],18,[[],["self"]]],[10,"atanh",E,R[200],18,[[],["self"]]],[10,R[161],E,R[162],18,[[]]],[0,"bigint",E,E,N,N],[3,R[502],R[560],E,N,N],[8,R[678],E,R[679],N,N],[10,R[485],E,R[680],19,[[["self"]],[["option",["bigint"]],["bigint"]]]],[8,R[501],E,R[676],N,N],[10,R[484],E,R[677],20,[[["self"]],[["option",[R[465]]],[R[465]]]]],[4,"Sign",E,R[663],N,N],[13,"Minus",E,E,21,N],[13,"NoSign",E,E,21,N],[13,"Plus",E,E,21,N],[3,"BigUint",E,R[521],N,N],[3,"BigInt",E,R[522],N,N],[0,R[239],"num",E,N,N],[3,"Complex",R[561],R[523],N,N],[12,"re",E,R[524],0,N],[12,"im",E,R[525],0,N],[6,R[620],E,E,N,N],[6,R[621],E,E,N,N],[3,R[248],E,E,N,N],[0,R[226],"num",E,N,N],[8,"Integer",R[562],E,N,N],[10,R[230],E,R[526],1,[[["self"]],["self"]]],[10,R[231],E,R[527],1,[[["self"]],["self"]]],[11,R[545],E,R[528],1,[[["self"]],["self"]]],[10,"gcd",E,R[529],1,[[["self"]],["self"]]],[10,"lcm",E,R[530],1,[[["self"]],["self"]]],[11,"gcd_lcm",E,R[531],1,[[["self"]]]],[11,R[532],E,R[533],1,[[["self"]],[R[233]]]],[11,R[534],E,R[535],1,[[["self"]]]],[10,R[682],E,R[495],1,[[["self"]],["bool"]]],[10,R[496],E,R[536],1,[[["self"]],["bool"]]],[10,R[683],E,R[537],1,[[["self"]],["bool"]]],[10,"is_odd",E,R[538],1,[[["self"]],["bool"]]],[10,R[607],E,R[539],1,[[["self"]]]],[11,R[232],E,R[540],1,[[["self"]]]],[11,R[541],E,R[542],1,[[["self"]],["self"]]],[11,R[543],E,R[544],1,[[["self"]],["self"]]],[3,R[234],E,R[605],N,N],[12,"gcd",E,E,22,N],[12,"x",E,E,22,N],[12,"y",E,E,22,N],[5,R[607],E,R[608],N,[[[T]]]],[5,R[230],E,R[609],N,[[[T]],[T]]],[5,R[231],E,R[610],N,[[[T]],[T]]],[5,R[232],E,R[611],N,[[[T]]]],[5,R[545],E,R[612],N,[[[T]],[T]]],[5,"gcd",E,R[493],N,[[[T]],[T]]],[5,"lcm",E,R[494],N,[[[T]],[T]]],[5,"gcd_lcm",E,R[613],N,[[[T]]]],[3,R[235],E,R[606],N,N],[5,"binomial",E,R[614],N,[[[T]],[T]]],[5,R[615],E,R[616],N,[[],[T]]],[5,"sqrt",E,R[228],N,[[[T]],[T]]],[5,R[492],E,R[227],N,[[["u32"],[T]],[T]]],[8,"Roots",E,R[617],N,N],[10,R[492],E,R[227],23,[[["u32"],["self"]],["self"]]],[11,"sqrt",E,R[228],23,[[["self"]],["self"]]],[11,"cbrt",E,R[229],23,[[["self"]],["self"]]],[5,"cbrt",E,R[229],N,[[[T]],[T]]],[0,"iter","num",E,N,N],[3,"Range",R[563],R[565],N,N],[5,"range",E,R[546],N,[[["a"]],["range"]]],[3,R[452],E,R[566],N,N],[5,R[547],E,R[548],N,[[["a"]],[R[449]]]],[3,R[453],E,R[567],N,N],[5,R[549],E,R[550],N,[[["a"]],[R[450]]]],[3,R[454],E,R[568],N,N],[5,R[551],E,R[552],N,[[["a"]],[R[451]]]],[0,"traits","num",E,N,N],[0,"bounds",R[553],E,N,N],[8,R[598],"num::traits::bounds",R[303],N,N],[10,R[132],E,R[304],6,[[],["self"]]],[10,R[133],E,R[305],6,[[],["self"]]],[0,"cast",R[553],E,N,N],[8,R[205],"num::traits::cast",R[357],N,N],[11,R[404],E,R[358],13,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8",E,R[359],13,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16",E,R[360],13,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32",E,R[361],13,[[["self"]],[["i32"],["option",["i32"]]]]],[10,"to_i64",E,R[362],13,[[["self"]],[["i64"],["option",["i64"]]]]],[11,R[506],E,R[363],13,[[["self"]],[["i128"],["option",["i128"]]]]],[11,R[405],E,R[364],13,[[["self"]],[["option",[R[4]]],[R[4]]]]],[11,"to_u8",E,R[365],13,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16",E,R[366],13,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"to_u32",E,R[367],13,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64",E,R[368],13,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,R[369],13,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32",E,R[370],13,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64",E,R[371],13,[[["self"]],[["f64"],["option",["f64"]]]]],[8,R[206],E,R[342],N,N],[11,R[249],E,R[343],14,[[["isize"]],["option"]]],[11,R[601],E,R[344],14,[[["i8"]],["option"]]],[11,R[406],E,R[345],14,[[["i16"]],["option"]]],[11,R[407],E,R[346],14,[[["i32"]],["option"]]],[10,R[408],E,R[347],14,[[["i64"]],["option"]]],[11,R[250],E,R[348],14,[[["i128"]],["option"]]],[11,R[251],E,R[349],14,[[[R[4]]],["option"]]],[11,R[602],E,R[350],14,[[["u8"]],["option"]]],[11,R[409],E,R[351],14,[[["u16"]],["option"]]],[11,R[410],E,R[352],14,[[["u32"]],["option"]]],[10,R[411],E,R[353],14,[[["u64"]],["option"]]],[11,R[252],E,R[354],14,[[["u128"]],["option"]]],[11,R[412],E,R[355],14,[[["f32"]],["option"]]],[11,R[413],E,R[356],14,[[["f64"]],["option"]]],[5,"cast",E,R[374],N,[[[T]],["option"]]],[8,R[597],E,R[372],N,N],[10,"from",E,R[373],15,[[[T]],["option"]]],[8,R[207],E,R[340],N,N],[10,"as_",E,R[341],16,[[],[T]]],[0,"float",R[553],E,N,N],[8,R[208],"num::traits::float",R[569],N,N],[10,R[415],E,R[570],24,[[],["self"]]],[10,R[134],E,R[571],24,[[],["self"]]],[10,"nan",E,R[572],24,[[],["self"]]],[10,R[416],E,R[135],24,[[],["self"]]],[10,R[132],E,R[136],24,[[],["self"]]],[10,R[137],E,R[138],24,[[],["self"]]],[10,R[430],E,R[139],24,[[],["self"]]],[10,R[133],E,R[140],24,[[],["self"]]],[11,"is_nan",E,R[573],24,[[],["bool"]]],[11,R[141],E,R[574],24,[[],["bool"]]],[11,R[142],E,R[575],24,[[],["bool"]]],[11,R[143],E,R[144],24,[[],["bool"]]],[10,R[417],E,R[145],24,[[],[R[146]]]],[11,"floor",E,R[147],24,[[],["self"]]],[11,"ceil",E,R[148],24,[[],["self"]]],[11,"round",E,R[149],24,[[],["self"]]],[11,"trunc",E,R[150],24,[[],["self"]]],[11,"fract",E,R[151],24,[[],["self"]]],[11,"abs",E,R[152],24,[[],["self"]]],[11,"signum",E,R[153],24,[[],["self"]]],[11,R[154],E,R[576],24,[[],["bool"]]],[11,R[155],E,R[577],24,[[],["bool"]]],[11,"min",E,R[160],24,[[],["self"]]],[11,"max",E,R[159],24,[[],["self"]]],[11,"recip",E,R[578],24,[[],["self"]]],[11,"powi",E,R[156],24,[[["i32"]],["self"]]],[10,R[157],E,R[579],24,[[],["self"]]],[10,R[158],E,R[580],24,[[],["self"]]],[10,R[161],E,R[162],24,[[]]],[8,"Float",E,R[306],N,N],[10,"nan",E,R[307],18,[[],["self"]]],[10,R[415],E,R[308],18,[[],["self"]]],[10,R[134],E,R[309],18,[[],["self"]]],[10,R[416],E,R[135],18,[[],["self"]]],[10,R[132],E,R[136],18,[[],["self"]]],[10,R[137],E,R[138],18,[[],["self"]]],[11,R[430],E,R[139],18,[[],["self"]]],[10,R[133],E,R[140],18,[[],["self"]]],[10,"is_nan",E,R[310],18,[[],["bool"]]],[10,R[141],E,R[311],18,[[],["bool"]]],[10,R[142],E,R[312],18,[[],["bool"]]],[10,R[143],E,R[144],18,[[],["bool"]]],[10,R[417],E,R[145],18,[[],[R[146]]]],[10,"floor",E,R[147],18,[[],["self"]]],[10,"ceil",E,R[148],18,[[],["self"]]],[10,"round",E,R[149],18,[[],["self"]]],[10,"trunc",E,R[150],18,[[],["self"]]],[10,"fract",E,R[151],18,[[],["self"]]],[10,"abs",E,R[152],18,[[],["self"]]],[10,"signum",E,R[153],18,[[],["self"]]],[10,R[154],E,R[170],18,[[],["bool"]]],[10,R[155],E,R[171],18,[[],["bool"]]],[10,R[423],E,R[166],18,[[],["self"]]],[10,"recip",E,R[172],18,[[],["self"]]],[10,"powi",E,R[156],18,[[["i32"]],["self"]]],[10,"powf",E,R[313],18,[[],["self"]]],[10,"sqrt",E,R[173],18,[[],["self"]]],[10,"exp",E,R[174],18,[[],["self"]]],[10,"exp2",E,R[175],18,[[],["self"]]],[10,"ln",E,R[176],18,[[],["self"]]],[10,"log",E,R[177],18,[[],["self"]]],[10,"log2",E,R[178],18,[[],["self"]]],[10,"log10",E,R[179],18,[[],["self"]]],[11,R[157],E,R[180],18,[[],["self"]]],[11,R[158],E,R[181],18,[[],["self"]]],[10,"max",E,R[159],18,[[],["self"]]],[10,"min",E,R[160],18,[[],["self"]]],[10,R[314],E,R[182],18,[[],["self"]]],[10,"cbrt",E,R[183],18,[[],["self"]]],[10,"hypot",E,R[184],18,[[],["self"]]],[10,"sin",E,R[185],18,[[],["self"]]],[10,"cos",E,R[186],18,[[],["self"]]],[10,"tan",E,R[187],18,[[],["self"]]],[10,"asin",E,R[188],18,[[],["self"]]],[10,"acos",E,R[189],18,[[],["self"]]],[10,"atan",E,R[190],18,[[],["self"]]],[10,"atan2",E,R[191],18,[[],["self"]]],[10,R[599],E,R[192],18,[[]]],[10,"exp_m1",E,R[193],18,[[],["self"]]],[10,"ln_1p",E,R[194],18,[[],["self"]]],[10,"sinh",E,R[195],18,[[],["self"]]],[10,"cosh",E,R[196],18,[[],["self"]]],[10,"tanh",E,R[197],18,[[],["self"]]],[10,"asinh",E,R[198],18,[[],["self"]]],[10,"acosh",E,R[199],18,[[],["self"]]],[10,"atanh",E,R[200],18,[[],["self"]]],[10,R[161],E,R[162],18,[[]]],[8,R[209],E,E,N,N],[10,"E",E,R[315],25,[[],["self"]]],[10,R[316],E,R[317],25,[[],["self"]]],[10,R[318],E,R[319],25,[[],["self"]]],[10,R[320],E,R[321],25,[[],["self"]]],[10,R[322],E,R[323],25,[[],["self"]]],[10,R[324],E,R[325],25,[[],["self"]]],[10,R[326],E,R[327],25,[[],["self"]]],[10,R[328],E,R[329],25,[[],["self"]]],[10,R[330],E,R[331],25,[[],["self"]]],[10,R[332],E,R[333],25,[[],["self"]]],[10,"LN_10",E,R[334],25,[[],["self"]]],[10,"LN_2",E,R[335],25,[[],["self"]]],[10,"LOG10_E",E,R[336],25,[[],["self"]]],[10,"LOG2_E",E,R[337],25,[[],["self"]]],[10,"PI",E,R[338],25,[[],["self"]]],[10,"SQRT_2",E,R[339],25,[[],["self"]]],[0,R[418],R[553],E,N,N],[8,"Zero","num::traits::identities",R[255],N,N],[10,"zero",E,R[256],3,[[],["self"]]],[11,R[420],E,R[257],3,[[["self"]]]],[10,R[507],E,R[258],3,[[["self"]],["bool"]]],[8,"One",E,R[259],N,N],[10,"one",E,R[260],4,[[],["self"]]],[11,R[600],E,R[261],4,[[["self"]]]],[11,"is_one",E,R[262],4,[[["self"]],["bool"]]],[5,"zero",E,R[263],N,[[],[T]]],[5,"one",E,R[264],N,[[],[T]]],[0,"int",R[553],E,N,N],[8,R[603],"num::traits::int",R[375],N,N],[10,R[376],E,R[377],12,[[],["u32"]]],[10,R[378],E,R[379],12,[[],["u32"]]],[10,R[380],E,R[381],12,[[],["u32"]]],[10,R[382],E,R[383],12,[[],["u32"]]],[10,R[384],E,R[163],12,[[["u32"]],["self"]]],[10,R[385],E,R[164],12,[[["u32"]],["self"]]],[10,R[386],E,R[163],12,[[["u32"]],["self"]]],[10,R[387],E,R[164],12,[[["u32"]],["self"]]],[10,R[388],E,R[163],12,[[["u32"]],["self"]]],[10,R[389],E,R[164],12,[[["u32"]],["self"]]],[10,R[390],E,R[391],12,[[],["self"]]],[10,"from_be",E,R[392],12,[[],["self"]]],[10,"from_le",E,R[393],12,[[],["self"]]],[10,"to_be",E,R[394],12,[[],["self"]]],[10,"to_le",E,R[395],12,[[],["self"]]],[10,"pow",E,R[396],12,[[["u32"]],["self"]]],[0,"ops",R[553],E,N,N],[0,"checked",R[554],E,N,N],[8,R[210],"num::traits::ops::checked",R[276],N,N],[10,R[277],E,R[278],8,[[["self"]],["option"]]],[8,R[211],E,R[279],N,N],[10,R[280],E,R[281],9,[[["self"]],["option"]]],[8,R[212],E,R[282],N,N],[10,R[283],E,R[284],10,[[["self"]],["option"]]],[8,R[213],E,R[285],N,N],[10,R[286],E,R[287],11,[[["self"]],["option"]]],[8,R[214],E,R[581],N,N],[10,R[582],E,R[583],26,[[["self"]],["option"]]],[8,R[215],E,R[584],N,N],[10,R[585],E,R[586],27,[[["self"]],["option"]]],[8,R[216],E,R[288],N,N],[10,R[289],E,R[290],28,[[["u32"],["self"]],["option"]]],[8,R[217],E,R[291],N,N],[10,R[292],E,R[293],29,[[["u32"],["self"]],["option"]]],[0,"inv",R[554],E,N,N],[8,"Inv","num::traits::ops::inv",R[587],N,N],[16,"Output",E,R[169],30,N],[10,"inv",E,R[588],30,[[]]],[0,R[423],R[554],E,N,N],[8,"MulAdd","num::traits::ops::mul_add",R[166],N,N],[16,"Output",E,R[589],31,N],[10,R[423],E,R[167],31,[[["a"],["b"]]]],[8,R[218],E,R[590],N,N],[10,R[247],E,R[167],32,[[["self"],["a"],["b"]]]],[0,R[424],R[554],E,N,N],[8,R[219],"num::traits::ops::saturating",R[271],N,N],[10,R[272],E,R[273],7,[[],["self"]]],[10,R[274],E,R[275],7,[[],["self"]]],[0,R[604],R[554],E,N,N],[8,R[220],"num::traits::ops::wrapping",R[294],N,N],[10,R[295],E,R[296],33,[[["self"]],["self"]]],[8,R[221],E,R[300],N,N],[10,R[301],E,R[302],34,[[["self"]],["self"]]],[8,R[222],E,R[297],N,N],[10,R[298],E,R[299],35,[[["self"]],["self"]]],[8,R[223],E,R[591],N,N],[10,R[592],E,R[593],36,[[["u32"],["self"]],["self"]]],[8,R[224],E,R[594],N,N],[10,R[595],E,R[596],37,[[["u32"],["self"]],["self"]]],[0,"pow",R[553],E,N,N],[8,"Pow","num::traits::pow",R[555],N,N],[16,"Output",E,R[169],17,N],[10,"pow",E,R[556],17,[[["rhs"]]]],[5,"pow",E,R[397],N,[[[R[4]],[T]],[T]]],[5,R[398],E,R[399],N,[[[R[4]],[T]],["option"]]],[0,"real",R[553],E,N,N],[8,"Real","num::traits::real",R[429],N,N],[10,R[132],E,R[136],38,[[],["self"]]],[10,R[137],E,R[138],38,[[],["self"]]],[10,R[430],E,R[139],38,[[],["self"]]],[10,R[133],E,R[140],38,[[],["self"]]],[10,"floor",E,R[147],38,[[],["self"]]],[10,"ceil",E,R[148],38,[[],["self"]]],[10,"round",E,R[149],38,[[],["self"]]],[10,"trunc",E,R[150],38,[[],["self"]]],[10,"fract",E,R[151],38,[[],["self"]]],[10,"abs",E,R[152],38,[[],["self"]]],[10,"signum",E,R[153],38,[[],["self"]]],[10,R[154],E,R[170],38,[[],["bool"]]],[10,R[155],E,R[171],38,[[],["bool"]]],[10,R[423],E,R[166],38,[[],["self"]]],[10,"recip",E,R[172],38,[[],["self"]]],[10,"powi",E,R[156],38,[[["i32"]],["self"]]],[10,"powf",E,R[431],38,[[],["self"]]],[10,"sqrt",E,R[173],38,[[],["self"]]],[10,"exp",E,R[174],38,[[],["self"]]],[10,"exp2",E,R[175],38,[[],["self"]]],[10,"ln",E,R[176],38,[[],["self"]]],[10,"log",E,R[177],38,[[],["self"]]],[10,"log2",E,R[178],38,[[],["self"]]],[10,"log10",E,R[179],38,[[],["self"]]],[10,R[157],E,R[180],38,[[],["self"]]],[10,R[158],E,R[181],38,[[],["self"]]],[10,"max",E,R[159],38,[[],["self"]]],[10,"min",E,R[160],38,[[],["self"]]],[10,R[314],E,R[182],38,[[],["self"]]],[10,"cbrt",E,R[183],38,[[],["self"]]],[10,"hypot",E,R[184],38,[[],["self"]]],[10,"sin",E,R[185],38,[[],["self"]]],[10,"cos",E,R[186],38,[[],["self"]]],[10,"tan",E,R[187],38,[[],["self"]]],[10,"asin",E,R[188],38,[[],["self"]]],[10,"acos",E,R[189],38,[[],["self"]]],[10,"atan",E,R[190],38,[[],["self"]]],[10,"atan2",E,R[191],38,[[],["self"]]],[10,R[599],E,R[192],38,[[]]],[10,"exp_m1",E,R[193],38,[[],["self"]]],[10,"ln_1p",E,R[194],38,[[],["self"]]],[10,"sinh",E,R[195],38,[[],["self"]]],[10,"cosh",E,R[196],38,[[],["self"]]],[10,"tanh",E,R[197],38,[[],["self"]]],[10,"asinh",E,R[198],38,[[],["self"]]],[10,"acosh",E,R[199],38,[[],["self"]]],[10,"atanh",E,R[200],38,[[],["self"]]],[0,"sign",R[553],E,N,N],[8,"Signed","num::traits::sign",R[265],N,N],[10,"abs",E,R[201],5,[[["self"]],["self"]]],[10,R[314],E,R[182],5,[[["self"]],["self"]]],[10,"signum",E,R[202],5,[[["self"]],["self"]]],[10,R[266],E,R[267],5,[[["self"]],["bool"]]],[10,R[268],E,R[269],5,[[["self"]],["bool"]]],[5,"abs",E,R[201],N,[[[T]],[T]]],[5,R[314],E,R[182],N,[[[T]],[T]]],[5,"signum",E,R[202],N,[[[T]],[T]]],[8,R[433],E,R[270],N,N],[8,"Num",R[553],R[434],N,N],[16,R[435],E,E,2,N],[10,R[254],E,R[436],2,[[["u32"],["str"]],[R[1]]]],[8,"NumOps",E,R[437],N,N],[8,"NumRef",E,R[438],N,N],[8,"RefNum",E,R[439],N,N],[8,R[440],E,R[441],N,N],[8,R[442],E,R[443],N,N],[8,R[444],E,R[445],N,N],[4,R[204],E,E,N,N],[13,"Empty",E,E,39,N],[13,"Invalid",E,E,39,N],[3,R[203],E,E,N,N],[12,"kind",E,E,40,N],[5,"clamp",E,R[401],N,[[[T]],[T]]],[0,"rational","num",E,N,N],[3,"Ratio",R[564],R[684],N,N],[6,R[685],E,R[557],N,N],[6,R[686],E,R[687],N,N],[6,R[688],E,R[689],N,N],[6,R[558],E,R[559],N,N],[3,R[519],E,E,N,N],[11,"from",R[560],E,41,[[[T]],[T]]],[11,R[67],E,E,41,[[[U]],[R[1]]]],[11,R[69],E,E,41,[[],[R[1]]]],[11,"into",E,E,41,[[],[U]]],[11,"borrow",E,E,41,[[["self"]],[T]]],[11,R[68],E,E,41,[[["self"]],[T]]],[11,R[236],E,E,41,[[["self"]],["typeid"]]],[11,R[238],E,E,41,[[["self"]],["string"]]],[11,R[65],E,E,41,[[["self"]],[T]]],[11,R[66],E,E,41,[[[T],["self"]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[67],E,E,42,[[[U]],[R[1]]]],[11,R[69],E,E,42,[[],[R[1]]]],[11,"into",E,E,42,[[],[U]]],[11,"borrow",E,E,42,[[["self"]],[T]]],[11,R[68],E,E,42,[[["self"]],[T]]],[11,R[236],E,E,42,[[["self"]],["typeid"]]],[11,R[238],E,E,42,[[["self"]],["string"]]],[11,R[65],E,E,42,[[["self"]],[T]]],[11,R[66],E,E,42,[[[T],["self"]]]],[11,"from",R[561],E,0,[[[T]],[T]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,"into",E,E,0,[[],[U]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[238],E,E,0,[[["self"]],["string"]]],[11,R[65],E,E,0,[[["self"]],[T]]],[11,R[66],E,E,0,[[[T],["self"]]]],[11,"from",R[560],E,43,[[[T]],[T]]],[11,R[67],E,E,43,[[[U]],[R[1]]]],[11,R[69],E,E,43,[[],[R[1]]]],[11,"into",E,E,43,[[],[U]]],[11,"borrow",E,E,43,[[["self"]],[T]]],[11,R[68],E,E,43,[[["self"]],[T]]],[11,R[236],E,E,43,[[["self"]],["typeid"]]],[11,R[238],E,E,43,[[["self"]],["string"]]],[11,R[65],E,E,43,[[["self"]],[T]]],[11,R[66],E,E,43,[[[T],["self"]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[67],E,E,21,[[[U]],[R[1]]]],[11,R[69],E,E,21,[[],[R[1]]]],[11,"into",E,E,21,[[],[U]]],[11,"borrow",E,E,21,[[["self"]],[T]]],[11,R[68],E,E,21,[[["self"]],[T]]],[11,R[236],E,E,21,[[["self"]],["typeid"]]],[11,R[65],E,E,21,[[["self"]],[T]]],[11,R[66],E,E,21,[[[T],["self"]]]],[11,"from",R[561],E,44,[[[T]],[T]]],[11,R[67],E,E,44,[[[U]],[R[1]]]],[11,R[69],E,E,44,[[],[R[1]]]],[11,"into",E,E,44,[[],[U]]],[11,"borrow",E,E,44,[[["self"]],[T]]],[11,R[68],E,E,44,[[["self"]],[T]]],[11,R[236],E,E,44,[[["self"]],["typeid"]]],[11,R[238],E,E,44,[[["self"]],["string"]]],[11,"from",R[562],E,22,[[[T]],[T]]],[11,R[67],E,E,22,[[[U]],[R[1]]]],[11,R[69],E,E,22,[[],[R[1]]]],[11,"into",E,E,22,[[],[U]]],[11,"borrow",E,E,22,[[["self"]],[T]]],[11,R[68],E,E,22,[[["self"]],[T]]],[11,R[236],E,E,22,[[["self"]],["typeid"]]],[11,R[65],E,E,22,[[["self"]],[T]]],[11,R[66],E,E,22,[[[T],["self"]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[446],E,E,45,[[],["i"]]],[11,R[67],E,E,45,[[[U]],[R[1]]]],[11,R[69],E,E,45,[[],[R[1]]]],[11,"into",E,E,45,[[],[U]]],[11,"borrow",E,E,45,[[["self"]],[T]]],[11,R[68],E,E,45,[[["self"]],[T]]],[11,R[236],E,E,45,[[["self"]],["typeid"]]],[11,"from",R[563],E,46,[[[T]],[T]]],[11,R[446],E,E,46,[[],["i"]]],[11,R[67],E,E,46,[[[U]],[R[1]]]],[11,R[69],E,E,46,[[],[R[1]]]],[11,"into",E,E,46,[[],[U]]],[11,"borrow",E,E,46,[[["self"]],[T]]],[11,R[68],E,E,46,[[["self"]],[T]]],[11,R[236],E,E,46,[[["self"]],["typeid"]]],[11,R[65],E,E,46,[[["self"]],[T]]],[11,R[66],E,E,46,[[[T],["self"]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[446],E,E,47,[[],["i"]]],[11,R[67],E,E,47,[[[U]],[R[1]]]],[11,R[69],E,E,47,[[],[R[1]]]],[11,"into",E,E,47,[[],[U]]],[11,"borrow",E,E,47,[[["self"]],[T]]],[11,R[68],E,E,47,[[["self"]],[T]]],[11,R[236],E,E,47,[[["self"]],["typeid"]]],[11,R[65],E,E,47,[[["self"]],[T]]],[11,R[66],E,E,47,[[[T],["self"]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[446],E,E,48,[[],["i"]]],[11,R[67],E,E,48,[[[U]],[R[1]]]],[11,R[69],E,E,48,[[],[R[1]]]],[11,"into",E,E,48,[[],[U]]],[11,"borrow",E,E,48,[[["self"]],[T]]],[11,R[68],E,E,48,[[["self"]],[T]]],[11,R[236],E,E,48,[[["self"]],["typeid"]]],[11,R[65],E,E,48,[[["self"]],[T]]],[11,R[66],E,E,48,[[[T],["self"]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[446],E,E,49,[[],["i"]]],[11,R[67],E,E,49,[[[U]],[R[1]]]],[11,R[69],E,E,49,[[],[R[1]]]],[11,"into",E,E,49,[[],[U]]],[11,"borrow",E,E,49,[[["self"]],[T]]],[11,R[68],E,E,49,[[["self"]],[T]]],[11,R[236],E,E,49,[[["self"]],["typeid"]]],[11,R[65],E,E,49,[[["self"]],[T]]],[11,R[66],E,E,49,[[[T],["self"]]]],[11,"from",R[553],E,39,[[[T]],[T]]],[11,R[67],E,E,39,[[[U]],[R[1]]]],[11,R[69],E,E,39,[[],[R[1]]]],[11,"into",E,E,39,[[],[U]]],[11,"borrow",E,E,39,[[["self"]],[T]]],[11,R[68],E,E,39,[[["self"]],[T]]],[11,R[236],E,E,39,[[["self"]],["typeid"]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[67],E,E,40,[[[U]],[R[1]]]],[11,R[69],E,E,40,[[],[R[1]]]],[11,"into",E,E,40,[[],[U]]],[11,"borrow",E,E,40,[[["self"]],[T]]],[11,R[68],E,E,40,[[["self"]],[T]]],[11,R[236],E,E,40,[[["self"]],["typeid"]]],[11,R[238],E,E,40,[[["self"]],["string"]]],[11,"from",R[564],E,50,[[[T]],[T]]],[11,R[67],E,E,50,[[[U]],[R[1]]]],[11,R[69],E,E,50,[[],[R[1]]]],[11,"into",E,E,50,[[],[U]]],[11,"borrow",E,E,50,[[["self"]],[T]]],[11,R[68],E,E,50,[[["self"]],[T]]],[11,R[236],E,E,50,[[["self"]],["typeid"]]],[11,R[238],E,E,50,[[["self"]],["string"]]],[11,R[65],E,E,50,[[["self"]],[T]]],[11,R[66],E,E,50,[[[T],["self"]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[67],E,E,51,[[[U]],[R[1]]]],[11,R[69],E,E,51,[[],[R[1]]]],[11,"into",E,E,51,[[],[U]]],[11,"borrow",E,E,51,[[["self"]],[T]]],[11,R[68],E,E,51,[[["self"]],[T]]],[11,R[236],E,E,51,[[["self"]],["typeid"]]],[11,R[238],E,E,51,[[["self"]],["string"]]],[11,R[65],E,E,51,[[["self"]],[T]]],[11,R[66],E,E,51,[[[T],["self"]]]],[11,R[490],R[560],E,41,[[["self"],[R[4]]]]],[11,R[490],E,E,42,[[["self"],[R[4]]]]],[11,"fmt",E,E,41,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,21,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,43,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,42,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"hash",E,E,41,[[["self"],["__h"]]]],[11,"hash",E,E,21,[[["self"],["__h"]]]],[11,"hash",E,E,42,[[["self"],["__h"]]]],[11,R[241],E,E,41,[[["self"],["bigint"]]]],[11,R[241],E,E,41,[[["self"],["i8"]]]],[11,R[241],E,E,41,[[["bigint"],["self"]]]],[11,R[241],E,E,42,[[["self"],["u128"]]]],[11,R[241],E,E,41,[[["self"],["u8"]]]],[11,R[241],E,E,41,[[["u32"],["self"]]]],[11,R[241],E,E,41,[[["self"],["i64"]]]],[11,R[241],E,E,41,[[["i128"],["self"]]]],[11,R[241],E,E,41,[[["self"],["u16"]]]],[11,R[241],E,E,42,[[["self"],[R[465]]]]],[11,R[241],E,E,41,[[["self"],["u64"]]]],[11,R[241],E,E,41,[[["self"],[R[4]]]]],[11,R[241],E,E,42,[[["u32"],["self"]]]],[11,R[241],E,E,41,[[["i32"],["self"]]]],[11,R[241],E,E,41,[[["self"],["i16"]]]],[11,R[241],E,E,41,[[["isize"],["self"]]]],[11,R[241],E,E,42,[[["self"],["u64"]]]],[11,R[241],E,E,42,[[["self"],["u8"]]]],[11,R[241],E,E,41,[[["self"],["u128"]]]],[11,R[241],E,E,42,[[["self"],[R[465]]]]],[11,R[241],E,E,42,[[["self"],["u16"]]]],[11,R[241],E,E,42,[[["self"],[R[4]]]]],[11,R[408],E,E,41,[[["i64"]],[["option",["bigint"]],["bigint"]]]],[11,R[250],E,E,41,[[["i128"]],[["option",["bigint"]],["bigint"]]]],[11,R[411],E,E,41,[[["u64"]],[["option",["bigint"]],["bigint"]]]],[11,R[252],E,E,41,[[["u128"]],[["option",["bigint"]],["bigint"]]]],[11,R[413],E,E,41,[[["f64"]],[["option",["bigint"]],["bigint"]]]],[11,R[408],E,E,42,[[["i64"]],[["option",[R[465]]],[R[465]]]]],[11,R[250],E,E,42,[[["i128"]],[["option",[R[465]]],[R[465]]]]],[11,R[411],E,E,42,[[["u64"]],[["option",[R[465]]],[R[465]]]]],[11,R[252],E,E,42,[[["u128"]],[["option",[R[465]]],[R[465]]]]],[11,R[413],E,E,42,[[["f64"]],[["option",[R[465]]],[R[465]]]]],[11,"shl",E,E,42,[[[R[4]]],[R[465]]]],[11,"shl",E,E,41,[[[R[4]]],["bigint"]]],[11,R[254],E,R[500],41,[[["u32"],["str"]],[[R[486]],["bigint"],[R[1],["bigint",R[486]]]]]],[11,R[254],E,R[462],42,[[["u32"],["str"]],[[R[486]],[R[1],[R[465],R[486]]],[R[465]]]]],[11,"to_i64",E,E,42,[[["self"]],[["i64"],["option",["i64"]]]]],[11,R[506],E,E,42,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_u64",E,E,42,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,E,42,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32",E,E,42,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64",E,E,42,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"to_i64",E,E,41,[[["self"]],[["i64"],["option",["i64"]]]]],[11,R[506],E,E,41,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_u64",E,E,41,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,E,41,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32",E,E,41,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64",E,E,41,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"fmt",E,E,42,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,41,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,R[243],E,E,41,[[["self"],["u64"]]]],[11,R[243],E,E,42,[[[R[465]],["self"]]]],[11,R[243],E,E,42,[[["u32"],["self"]]]],[11,R[243],E,E,42,[[["self"],["u16"]]]],[11,R[243],E,E,41,[[["isize"],["self"]]]],[11,R[243],E,E,41,[[["self"],["i8"]]]],[11,R[243],E,E,41,[[["self"],["u8"]]]],[11,R[243],E,E,41,[[["self"],["i16"]]]],[11,R[243],E,E,41,[[["self"],["bigint"]]]],[11,R[243],E,E,42,[[["self"],["u128"]]]],[11,R[243],E,E,42,[[["self"],["u8"]]]],[11,R[243],E,E,41,[[["u32"],["self"]]]],[11,R[243],E,E,41,[[["self"],["i64"]]]],[11,R[243],E,E,42,[[["self"],["u64"]]]],[11,R[243],E,E,42,[[["self"],[R[465]]]]],[11,R[243],E,E,41,[[["self"],["u16"]]]],[11,R[243],E,E,41,[[["self"],[R[4]]]]],[11,R[243],E,E,41,[[["i32"],["self"]]]],[11,R[243],E,E,42,[[["self"],[R[4]]]]],[11,R[243],E,E,41,[[["self"],["u128"]]]],[11,R[243],E,E,41,[[["i128"],["self"]]]],[11,R[243],E,E,41,[[["bigint"],["self"]]]],[11,R[277],E,E,42,[[[R[465]],["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[277],E,E,41,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"abs",E,E,41,[[["self"]],["bigint"]]],[11,R[314],E,E,41,[[["bigint"],["self"]],["bigint"]]],[11,"signum",E,E,41,[[["self"]],["bigint"]]],[11,R[266],E,E,41,[[["self"]],["bool"]]],[11,R[268],E,E,41,[[["self"]],["bool"]]],[11,R[280],E,E,41,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[280],E,E,42,[[[R[465]],["self"]],[["option",[R[465]]],[R[465]]]]],[11,"zero",E,E,41,[[],["bigint"]]],[11,R[507],E,E,41,[[["self"]],["bool"]]],[11,"zero",E,E,42,[[],[R[465]]]],[11,R[507],E,E,42,[[["self"]],["bool"]]],[11,"add",E,E,41,[[["i128"]],["bigint"]]],[11,"add",E,E,41,[[["u16"]],["bigint"]]],[11,"add",E,E,41,[[["isize"]],["bigint"]]],[11,"add",E,E,41,[[["u64"]],["bigint"]]],[11,"add",E,E,41,[[["i16"]],["bigint"]]],[11,"add",E,E,42,[[["u128"]],[R[465]]]],[11,"add",E,E,41,[[["i64"]],["bigint"]]],[11,"add",E,E,41,[[["bigint"]],["bigint"]]],[11,"add",E,E,41,[[["i64"]],["bigint"]]],[11,"add",E,E,42,[[[R[4]]],[R[465]]]],[11,"add",E,E,42,[[["u32"]],[R[465]]]],[11,"add",E,E,41,[[["u32"]],["bigint"]]],[11,"add",E,E,41,[[["i32"]],["bigint"]]],[11,"add",E,E,42,[[["u64"]],[R[465]]]],[11,"add",E,E,42,[[["u16"]],[R[465]]]],[11,"add",E,E,41,[[["i8"]],["bigint"]]],[11,"add",E,E,41,[[["u8"]],["bigint"]]],[11,"add",E,E,41,[[["u64"]],["bigint"]]],[11,"add",E,E,41,[[["u128"]],["bigint"]]],[11,"add",E,E,41,[[["isize"]],["bigint"]]],[11,"add",E,E,41,[[["i8"]],["bigint"]]],[11,"add",E,E,42,[[[R[4]]],[R[465]]]],[11,"add",E,E,42,[[["u8"]],[R[465]]]],[11,"add",E,E,41,[[["u16"]],["bigint"]]],[11,"add",E,E,42,[[[R[465]]],[R[465]]]],[11,"add",E,E,41,[[["bigint"]],["bigint"]]],[11,"add",E,E,41,[[[R[4]]],["bigint"]]],[11,"add",E,E,42,[[["u8"]],[R[465]]]],[11,"add",E,E,41,[[[R[4]]],["bigint"]]],[11,"add",E,E,42,[[["u128"]],[R[465]]]],[11,"add",E,E,41,[[["u8"]],["bigint"]]],[11,"add",E,E,42,[[[R[465]]],[R[465]]]],[11,"add",E,E,41,[[["i16"]],["bigint"]]],[11,"add",E,E,41,[[["i128"]],["bigint"]]],[11,"add",E,E,42,[[["u32"]],[R[465]]]],[11,"add",E,E,42,[[["u64"]],[R[465]]]],[11,"add",E,E,42,[[["u16"]],[R[465]]]],[11,"add",E,E,41,[[["i32"]],["bigint"]]],[11,"add",E,E,41,[[["u128"]],["bigint"]]],[11,"add",E,E,41,[[["u32"]],["bigint"]]],[11,"clone",E,E,42,[[["self"]],[R[465]]]],[11,"clone",E,E,21,[[["self"]],["sign"]]],[11,"clone",E,E,43,[[["self"]],[R[486]]]],[11,"clone",E,E,41,[[["self"]],["bigint"]]],[11,"sum",E,E,42,[[["i"]],[R[465]]]],[11,"sum",E,E,41,[[["i"]],["bigint"]]],[11,R[488],E,E,41,[[["self"],["bigint"]]]],[11,R[488],E,E,42,[[["self"],[R[465]]]]],[11,R[488],E,E,42,[[["self"],[R[465]]]]],[11,R[488],E,E,41,[[["bigint"],["self"]]]],[11,R[487],E,E,41,[[["bigint"],["self"]]]],[11,R[487],E,E,42,[[["self"],[R[465]]]]],[11,R[487],E,E,41,[[["self"],["bigint"]]]],[11,R[487],E,E,42,[[["self"],[R[465]]]]],[11,R[485],E,E,41,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[485],E,E,42,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,"one",E,E,42,[[],[R[465]]]],[11,"is_one",E,E,42,[[["self"]],["bool"]]],[11,"one",E,E,41,[[],["bigint"]]],[11,"is_one",E,E,41,[[["self"]],["bool"]]],[11,"bitor",E,E,41,[[["bigint"]],["bigint"]]],[11,"bitor",E,E,42,[[[R[465]]],[R[465]]]],[11,"bitor",E,E,42,[[[R[465]]],[R[465]]]],[11,"bitor",E,E,41,[[["bigint"]],["bigint"]]],[11,"bitxor",E,E,41,[[["bigint"]],["bigint"]]],[11,"bitxor",E,E,42,[[[R[465]]],[R[465]]]],[11,"bitxor",E,E,42,[[[R[465]]],[R[465]]]],[11,"bitxor",E,E,41,[[["bigint"]],["bigint"]]],[11,"shr",E,E,41,[[[R[4]]],["bigint"]]],[11,"shr",E,E,42,[[[R[4]]],[R[465]]]],[11,"eq",E,E,41,[[["bigint"],["self"]],["bool"]]],[11,"eq",E,E,42,[[[R[465]],["self"]],["bool"]]],[11,"eq",E,E,43,[[["self"],[R[486]]],["bool"]]],[11,"ne",E,E,43,[[["self"],[R[486]]],["bool"]]],[11,"eq",E,E,21,[[["sign"],["self"]],["bool"]]],[11,R[283],E,E,41,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[283],E,E,42,[[[R[465]],["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[242],E,E,42,[[["u32"],["self"]]]],[11,R[242],E,E,41,[[["u32"],["self"]]]],[11,R[242],E,E,41,[[["isize"],["self"]]]],[11,R[242],E,E,41,[[["self"],["bigint"]]]],[11,R[242],E,E,42,[[["self"],["u128"]]]],[11,R[242],E,E,41,[[["i32"],["self"]]]],[11,R[242],E,E,42,[[["self"],["u16"]]]],[11,R[242],E,E,41,[[["self"],[R[4]]]]],[11,R[242],E,E,41,[[["bigint"],["self"]]]],[11,R[242],E,E,42,[[["self"],[R[465]]]]],[11,R[242],E,E,41,[[["self"],["i64"]]]],[11,R[242],E,E,42,[[["self"],["u8"]]]],[11,R[242],E,E,41,[[["i128"],["self"]]]],[11,R[242],E,E,41,[[["self"],["u128"]]]],[11,R[242],E,E,41,[[["self"],["i16"]]]],[11,R[242],E,E,41,[[["self"],["u8"]]]],[11,R[242],E,E,41,[[["self"],["u16"]]]],[11,R[242],E,E,42,[[["self"],["u64"]]]],[11,R[242],E,E,42,[[[R[465]],["self"]]]],[11,R[242],E,E,41,[[["self"],["u64"]]]],[11,R[242],E,E,41,[[["self"],["i8"]]]],[11,R[242],E,E,42,[[["self"],[R[4]]]]],[11,"not",E,E,41,[[],["bigint"]]],[11,"div",E,E,41,[[["u16"]],["bigint"]]],[11,"div",E,E,41,[[["i64"]],["bigint"]]],[11,"div",E,E,42,[[["u32"]],[R[465]]]],[11,"div",E,E,41,[[[R[4]]],["bigint"]]],[11,"div",E,E,42,[[["u8"]],[R[465]]]],[11,"div",E,E,41,[[["bigint"]],["bigint"]]],[11,"div",E,E,41,[[["i16"]],["bigint"]]],[11,"div",E,E,42,[[["u128"]],[R[465]]]],[11,"div",E,E,42,[[["u16"]],[R[465]]]],[11,"div",E,E,41,[[["i32"]],["bigint"]]],[11,"div",E,E,42,[[["u8"]],[R[465]]]],[11,"div",E,E,41,[[[R[4]]],["bigint"]]],[11,"div",E,E,41,[[["u128"]],["bigint"]]],[11,"div",E,E,41,[[["i16"]],["bigint"]]],[11,"div",E,E,41,[[["i8"]],["bigint"]]],[11,"div",E,E,42,[[[R[465]]],[R[465]]]],[11,"div",E,E,41,[[["u32"]],["bigint"]]],[11,"div",E,E,41,[[["u16"]],["bigint"]]],[11,"div",E,E,42,[[[R[4]]],[R[465]]]],[11,"div",E,E,41,[[["u64"]],["bigint"]]],[11,"div",E,E,41,[[["u128"]],["bigint"]]],[11,"div",E,E,41,[[["u8"]],["bigint"]]],[11,"div",E,E,41,[[["i128"]],["bigint"]]],[11,"div",E,E,41,[[["i128"]],["bigint"]]],[11,"div",E,E,41,[[["u8"]],["bigint"]]],[11,"div",E,E,41,[[["bigint"]],["bigint"]]],[11,"div",E,E,42,[[["u64"]],[R[465]]]],[11,"div",E,E,42,[[["u64"]],[R[465]]]],[11,"div",E,E,41,[[["u32"]],["bigint"]]],[11,"div",E,E,41,[[["i8"]],["bigint"]]],[11,"div",E,E,41,[[["isize"]],["bigint"]]],[11,"div",E,E,41,[[["i32"]],["bigint"]]],[11,"div",E,E,41,[[["u64"]],["bigint"]]],[11,"div",E,E,42,[[[R[4]]],[R[465]]]],[11,"div",E,E,41,[[["isize"]],["bigint"]]],[11,"div",E,E,42,[[["u16"]],[R[465]]]],[11,"div",E,E,42,[[[R[465]]],[R[465]]]],[11,"div",E,E,42,[[["u32"]],[R[465]]]],[11,"div",E,E,42,[[["u128"]],[R[465]]]],[11,"div",E,E,41,[[["i64"]],["bigint"]]],[11,R[489],E,E,42,[[["self"],[R[465]]]]],[11,R[489],E,E,41,[[["self"],["bigint"]]]],[11,R[489],E,E,41,[[["bigint"],["self"]]]],[11,R[489],E,E,42,[[["self"],[R[465]]]]],[11,R[286],E,E,41,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[286],E,E,42,[[[R[465]],["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[492],E,E,42,[[["u32"],["self"]],[R[465]]]],[11,"sqrt",E,E,42,[[["self"]],[R[465]]]],[11,"cbrt",E,E,42,[[["self"]],[R[465]]]],[11,R[492],E,E,41,[[["u32"],["self"]],["bigint"]]],[11,"sqrt",E,E,41,[[["self"]],["bigint"]]],[11,"cbrt",E,E,41,[[["self"]],["bigint"]]],[11,R[244],E,E,41,[[["self"],["u8"]]]],[11,R[244],E,E,42,[[[R[465]],["self"]]]],[11,R[244],E,E,42,[[["self"],["u16"]]]],[11,R[244],E,E,42,[[["self"],[R[4]]]]],[11,R[244],E,E,41,[[["self"],["bigint"]]]],[11,R[244],E,E,41,[[["self"],["u16"]]]],[11,R[244],E,E,41,[[["self"],["i64"]]]],[11,R[244],E,E,41,[[["i128"],["self"]]]],[11,R[244],E,E,42,[[["self"],["u8"]]]],[11,R[244],E,E,41,[[["isize"],["self"]]]],[11,R[244],E,E,41,[[["self"],[R[4]]]]],[11,R[244],E,E,41,[[["self"],["u64"]]]],[11,R[244],E,E,41,[[["bigint"],["self"]]]],[11,R[244],E,E,42,[[["self"],["u64"]]]],[11,R[244],E,E,41,[[["self"],["u128"]]]],[11,R[244],E,E,41,[[["self"],["i16"]]]],[11,R[244],E,E,42,[[["u32"],["self"]]]],[11,R[244],E,E,41,[[["self"],["i8"]]]],[11,R[244],E,E,42,[[["self"],["u128"]]]],[11,R[244],E,E,41,[[["u32"],["self"]]]],[11,R[244],E,E,42,[[["self"],[R[465]]]]],[11,R[244],E,E,41,[[["i32"],["self"]]]],[11,"fmt",E,E,42,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,41,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"cmp",E,E,21,[[["sign"],["self"]],[R[82]]]],[11,"cmp",E,E,42,[[[R[465]],["self"]],[R[82]]]],[11,"cmp",E,E,41,[[["bigint"],["self"]],[R[82]]]],[11,R[491],E,E,41,[[["self"],[R[4]]]]],[11,R[491],E,E,42,[[["self"],[R[4]]]]],[11,"bitand",E,E,41,[[["bigint"]],["bigint"]]],[11,"bitand",E,E,42,[[[R[465]]],[R[465]]]],[11,"bitand",E,E,42,[[[R[465]]],[R[465]]]],[11,"bitand",E,E,41,[[["bigint"]],["bigint"]]],[11,"fmt",E,E,41,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,42,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,R[503],E,E,41,[[["str"]],[[R[486]],["bigint"],[R[1],["bigint",R[486]]]]]],[11,R[503],E,E,42,[[["str"]],[[R[486]],[R[1],[R[465],R[486]]],[R[465]]]]],[11,"neg",E,E,42,[[],[R[465]]]],[11,"neg",E,E,41,[[],["bigint"]]],[11,"neg",E,R[681],21,[[],["sign"]]],[11,R[607],E,E,42,[[[R[465]],["self"]]]],[11,R[230],E,E,42,[[[R[465]],["self"]],[R[465]]]],[11,R[231],E,E,42,[[[R[465]],["self"]],[R[465]]]],[11,R[232],E,E,42,[[[R[465]],["self"]]]],[11,"gcd",E,R[493],42,[[[R[465]],["self"]],[R[465]]]],[11,"lcm",E,R[494],42,[[[R[465]],["self"]],[R[465]]]],[11,R[682],E,R[495],42,[[[R[465]],["self"]],["bool"]]],[11,R[496],E,R[497],42,[[[R[465]],["self"]],["bool"]]],[11,R[683],E,R[498],42,[[["self"]],["bool"]]],[11,"is_odd",E,R[499],42,[[["self"]],["bool"]]],[11,R[607],E,E,41,[[["bigint"],["self"]]]],[11,R[230],E,E,41,[[["bigint"],["self"]],["bigint"]]],[11,R[231],E,E,41,[[["bigint"],["self"]],["bigint"]]],[11,R[232],E,E,41,[[["bigint"],["self"]]]],[11,"gcd",E,R[493],41,[[["bigint"],["self"]],["bigint"]]],[11,"lcm",E,R[494],41,[[["bigint"],["self"]],["bigint"]]],[11,R[682],E,R[495],41,[[["bigint"],["self"]],["bool"]]],[11,R[496],E,R[497],41,[[["bigint"],["self"]],["bool"]]],[11,R[683],E,R[498],41,[[["self"]],["bool"]]],[11,"is_odd",E,R[499],41,[[["self"]],["bool"]]],[11,"fmt",E,E,42,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,41,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"sub",E,E,41,[[["i128"]],["bigint"]]],[11,"sub",E,E,42,[[["u8"]],[R[465]]]],[11,"sub",E,E,42,[[["u16"]],[R[465]]]],[11,"sub",E,E,42,[[["u16"]],[R[465]]]],[11,"sub",E,E,42,[[[R[4]]],[R[465]]]],[11,"sub",E,E,41,[[["u8"]],["bigint"]]],[11,"sub",E,E,41,[[["u16"]],["bigint"]]],[11,"sub",E,E,41,[[["u32"]],["bigint"]]],[11,"sub",E,E,41,[[["i32"]],["bigint"]]],[11,"sub",E,E,41,[[["isize"]],["bigint"]]],[11,"sub",E,E,42,[[["u64"]],[R[465]]]],[11,"sub",E,E,42,[[["u128"]],[R[465]]]],[11,"sub",E,E,41,[[["u128"]],["bigint"]]],[11,"sub",E,E,41,[[["i128"]],["bigint"]]],[11,"sub",E,E,41,[[["isize"]],["bigint"]]],[11,"sub",E,E,41,[[[R[4]]],["bigint"]]],[11,"sub",E,E,41,[[["u32"]],["bigint"]]],[11,"sub",E,E,42,[[["u32"]],[R[465]]]],[11,"sub",E,E,41,[[["bigint"]],["bigint"]]],[11,"sub",E,E,42,[[[R[4]]],[R[465]]]],[11,"sub",E,E,41,[[["u16"]],["bigint"]]],[11,"sub",E,E,41,[[["i64"]],["bigint"]]],[11,"sub",E,E,41,[[["u64"]],["bigint"]]],[11,"sub",E,E,41,[[[R[4]]],["bigint"]]],[11,"sub",E,E,41,[[["u8"]],["bigint"]]],[11,"sub",E,E,42,[[["u64"]],[R[465]]]],[11,"sub",E,E,42,[[[R[465]]],[R[465]]]],[11,"sub",E,E,41,[[["bigint"]],["bigint"]]],[11,"sub",E,E,41,[[["i8"]],["bigint"]]],[11,"sub",E,E,42,[[[R[465]]],[R[465]]]],[11,"sub",E,E,41,[[["i64"]],["bigint"]]],[11,"sub",E,E,41,[[["u64"]],["bigint"]]],[11,"sub",E,E,42,[[["u32"]],[R[465]]]],[11,"sub",E,E,42,[[["u128"]],[R[465]]]],[11,"sub",E,E,41,[[["i16"]],["bigint"]]],[11,"sub",E,E,41,[[["u128"]],["bigint"]]],[11,"sub",E,E,41,[[["i16"]],["bigint"]]],[11,"sub",E,E,42,[[["u8"]],[R[465]]]],[11,"sub",E,E,41,[[["i8"]],["bigint"]]],[11,"sub",E,E,41,[[["i32"]],["bigint"]]],[11,R[83],E,E,21,[[["sign"],["self"]],[[R[82]],["option",[R[82]]]]]],[11,R[83],E,E,42,[[[R[465]],["self"]],[[R[82]],["option",[R[82]]]]]],[11,R[83],E,E,41,[[["bigint"],["self"]],[[R[82]],["option",[R[82]]]]]],[11,"from",E,E,42,[[[R[4]]],[R[465]]]],[11,"from",E,E,41,[[["i32"]],["bigint"]]],[11,"from",E,E,41,[[[R[4]]],["bigint"]]],[11,"from",E,E,41,[[["u32"]],["bigint"]]],[11,"from",E,E,41,[[["u64"]],["bigint"]]],[11,"from",E,E,41,[[["u8"]],["bigint"]]],[11,"from",E,E,41,[[["i16"]],["bigint"]]],[11,"from",E,E,41,[[[R[465]]],["bigint"]]],[11,"from",E,E,42,[[["u128"]],[R[465]]]],[11,"from",E,E,41,[[["i8"]],["bigint"]]],[11,"from",E,E,41,[[["u128"]],["bigint"]]],[11,"from",E,E,41,[[["isize"]],["bigint"]]],[11,"from",E,E,42,[[["u8"]],[R[465]]]],[11,"from",E,E,42,[[["u32"]],[R[465]]]],[11,"from",E,E,42,[[["u16"]],[R[465]]]],[11,"from",E,E,41,[[["i64"]],["bigint"]]],[11,"from",E,E,41,[[["u16"]],["bigint"]]],[11,"from",E,E,42,[[["u64"]],[R[465]]]],[11,"from",E,E,41,[[["i128"]],["bigint"]]],[11,R[504],E,E,43,[[["self"]],["str"]]],[11,R[520],E,E,42,[[["i"]],[R[465]]]],[11,R[520],E,E,41,[[["i"]],["bigint"]]],[11,R[245],E,E,41,[[["bigint"],["self"]]]],[11,R[245],E,E,41,[[["self"],["i8"]]]],[11,R[245],E,E,41,[[["self"],["i16"]]]],[11,R[245],E,E,41,[[["self"],[R[4]]]]],[11,R[245],E,E,41,[[["self"],["u128"]]]],[11,R[245],E,E,41,[[["self"],["i64"]]]],[11,R[245],E,E,42,[[["self"],["u64"]]]],[11,R[245],E,E,41,[[["u32"],["self"]]]],[11,R[245],E,E,41,[[["self"],["u8"]]]],[11,R[245],E,E,42,[[["self"],[R[4]]]]],[11,R[245],E,E,41,[[["i32"],["self"]]]],[11,R[245],E,E,41,[[["isize"],["self"]]]],[11,R[245],E,E,42,[[["self"],["u128"]]]],[11,R[245],E,E,42,[[["self"],["u8"]]]],[11,R[245],E,E,41,[[["self"],["u16"]]]],[11,R[245],E,E,41,[[["self"],["u64"]]]],[11,R[245],E,E,42,[[["self"],[R[465]]]]],[11,R[245],E,E,42,[[["self"],["u16"]]]],[11,R[245],E,E,41,[[["i128"],["self"]]]],[11,R[245],E,E,42,[[["self"],[R[465]]]]],[11,R[245],E,E,41,[[["self"],["bigint"]]]],[11,R[245],E,E,42,[[["u32"],["self"]]]],[11,"mul",E,E,41,[[["i64"]],["bigint"]]],[11,"mul",E,E,41,[[["i32"]],["bigint"]]],[11,"mul",E,E,42,[[[R[4]]],[R[465]]]],[11,"mul",E,E,42,[[["u8"]],[R[465]]]],[11,"mul",E,E,42,[[[R[4]]],[R[465]]]],[11,"mul",E,E,41,[[["isize"]],["bigint"]]],[11,"mul",E,E,41,[[["i128"]],["bigint"]]],[11,"mul",E,E,21,[[["sign"]],["sign"]]],[11,"mul",E,E,41,[[["i64"]],["bigint"]]],[11,"mul",E,E,41,[[[R[4]]],["bigint"]]],[11,"mul",E,E,41,[[["bigint"]],["bigint"]]],[11,"mul",E,E,42,[[["u16"]],[R[465]]]],[11,"mul",E,E,42,[[["u64"]],[R[465]]]],[11,"mul",E,E,41,[[["i16"]],["bigint"]]],[11,"mul",E,E,41,[[["u64"]],["bigint"]]],[11,"mul",E,E,42,[[["u32"]],[R[465]]]],[11,"mul",E,E,42,[[["u8"]],[R[465]]]],[11,"mul",E,E,41,[[["i32"]],["bigint"]]],[11,"mul",E,E,42,[[["u32"]],[R[465]]]],[11,"mul",E,E,42,[[["u128"]],[R[465]]]],[11,"mul",E,E,41,[[[R[4]]],["bigint"]]],[11,"mul",E,E,42,[[[R[465]]],[R[465]]]],[11,"mul",E,E,41,[[["i8"]],["bigint"]]],[11,"mul",E,E,41,[[["i16"]],["bigint"]]],[11,"mul",E,E,41,[[["i8"]],["bigint"]]],[11,"mul",E,E,41,[[["u32"]],["bigint"]]],[11,"mul",E,E,41,[[["isize"]],["bigint"]]],[11,"mul",E,E,41,[[["bigint"]],["bigint"]]],[11,"mul",E,E,41,[[["u128"]],["bigint"]]],[11,"mul",E,E,41,[[["u8"]],["bigint"]]],[11,"mul",E,E,41,[[["i128"]],["bigint"]]],[11,"mul",E,E,41,[[["u8"]],["bigint"]]],[11,"mul",E,E,42,[[["u128"]],[R[465]]]],[11,"mul",E,E,42,[[["u64"]],[R[465]]]],[11,"mul",E,E,41,[[["u16"]],["bigint"]]],[11,"mul",E,E,42,[[["u16"]],[R[465]]]],[11,"mul",E,E,41,[[["u64"]],["bigint"]]],[11,"mul",E,E,41,[[["u128"]],["bigint"]]],[11,"mul",E,E,41,[[["u16"]],["bigint"]]],[11,"mul",E,E,41,[[["u32"]],["bigint"]]],[11,"mul",E,E,42,[[[R[465]]],[R[465]]]],[11,R[514],E,E,42,[[],[R[465]]]],[11,R[514],E,E,41,[[],["bigint"]]],[11,"rem",E,E,41,[[["u8"]],["bigint"]]],[11,"rem",E,E,41,[[["isize"]],["bigint"]]],[11,"rem",E,E,41,[[["bigint"]],["bigint"]]],[11,"rem",E,E,42,[[[R[465]]],[R[465]]]],[11,"rem",E,E,42,[[["u128"]],[R[465]]]],[11,"rem",E,E,41,[[["u128"]],["bigint"]]],[11,"rem",E,E,41,[[["i128"]],["bigint"]]],[11,"rem",E,E,41,[[["i16"]],["bigint"]]],[11,"rem",E,E,41,[[["u32"]],["bigint"]]],[11,"rem",E,E,41,[[["i64"]],["bigint"]]],[11,"rem",E,E,42,[[["u16"]],[R[465]]]],[11,"rem",E,E,41,[[["i32"]],["bigint"]]],[11,"rem",E,E,41,[[["u128"]],["bigint"]]],[11,"rem",E,E,41,[[["i8"]],["bigint"]]],[11,"rem",E,E,42,[[["u128"]],[R[465]]]],[11,"rem",E,E,41,[[["i8"]],["bigint"]]],[11,"rem",E,E,41,[[["isize"]],["bigint"]]],[11,"rem",E,E,41,[[["i32"]],["bigint"]]],[11,"rem",E,E,42,[[["u32"]],[R[465]]]],[11,"rem",E,E,42,[[[R[4]]],[R[465]]]],[11,"rem",E,E,41,[[["u64"]],["bigint"]]],[11,"rem",E,E,41,[[["u16"]],["bigint"]]],[11,"rem",E,E,41,[[[R[4]]],["bigint"]]],[11,"rem",E,E,42,[[["u32"]],[R[465]]]],[11,"rem",E,E,42,[[["u16"]],[R[465]]]],[11,"rem",E,E,42,[[["u64"]],[R[465]]]],[11,"rem",E,E,41,[[["u16"]],["bigint"]]],[11,"rem",E,E,42,[[["u64"]],[R[465]]]],[11,"rem",E,E,41,[[["u64"]],["bigint"]]],[11,"rem",E,E,41,[[["i128"]],["bigint"]]],[11,"rem",E,E,41,[[["u32"]],["bigint"]]],[11,"rem",E,E,41,[[["i16"]],["bigint"]]],[11,"rem",E,E,41,[[["u8"]],["bigint"]]],[11,"rem",E,E,41,[[["i64"]],["bigint"]]],[11,"rem",E,E,42,[[["u8"]],[R[465]]]],[11,"rem",E,E,42,[[[R[465]]],[R[465]]]],[11,"rem",E,E,41,[[[R[4]]],["bigint"]]],[11,"rem",E,E,42,[[["u8"]],[R[465]]]],[11,"rem",E,E,41,[[["bigint"]],["bigint"]]],[11,"rem",E,E,42,[[[R[4]]],[R[465]]]],[11,"fmt",E,E,42,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,41,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,43,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,R[484],E,E,42,[[["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[484],E,E,41,[[["self"]],[["option",[R[465]]],[R[465]]]]],[11,"clone",R[562],E,22,[[["self"]],[R[233]]]],[11,"fmt",E,E,22,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"next",E,E,45,[[["self"]],["option"]]],[11,"eq",E,E,22,[[[R[233]],["self"]],["bool"]]],[11,"ne",E,E,22,[[[R[233]],["self"]],["bool"]]],[11,"fmt",R[553],E,39,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,40,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,40,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"one",R[561],E,0,[[],[R[239]]]],[11,"is_one",E,E,0,[[["self"]],["bool"]]],[11,R[600],E,E,0,[[["self"]]]],[11,"from",E,E,0,[[[U]],[[R[239]],["option",[R[239]]]]]],[11,"sum",E,E,0,[[["i"]],[R[239]]]],[11,"sum",E,E,0,[[["i"]],[R[239]]]],[11,"add",E,E,0,[[[R[239]]]]],[11,"add",E,E,0,[[[T]]]],[11,"add",E,E,0,[[[R[239]]]]],[11,"add",E,E,0,[[[T]]]],[11,"clone",E,E,0,[[["self"]],[R[239]]]],[11,R[254],E,R[246],0,[[["u32"],["str"]],[[R[239]],[R[1],[R[239]]]]]],[11,R[243],E,E,0,[[["self"],[T]]]],[11,R[243],E,E,0,[[["self"],[R[239]]]]],[11,R[243],E,E,0,[[[R[239]],["self"]]]],[11,R[243],E,E,0,[[["self"],[T]]]],[11,R[251],E,E,0,[[[R[4]]],[[R[239]],["option",[R[239]]]]]],[11,R[249],E,E,0,[[["isize"]],[[R[239]],["option",[R[239]]]]]],[11,R[602],E,E,0,[[["u8"]],[[R[239]],["option",[R[239]]]]]],[11,R[409],E,E,0,[[["u16"]],[[R[239]],["option",[R[239]]]]]],[11,R[410],E,E,0,[[["u32"]],[[R[239]],["option",[R[239]]]]]],[11,R[411],E,E,0,[[["u64"]],[[R[239]],["option",[R[239]]]]]],[11,R[601],E,E,0,[[["i8"]],[[R[239]],["option",[R[239]]]]]],[11,R[406],E,E,0,[[["i16"]],[[R[239]],["option",[R[239]]]]]],[11,R[407],E,E,0,[[["i32"]],[[R[239]],["option",[R[239]]]]]],[11,R[408],E,E,0,[[["i64"]],[[R[239]],["option",[R[239]]]]]],[11,R[252],E,E,0,[[["u128"]],[[R[239]],["option",[R[239]]]]]],[11,R[250],E,E,0,[[["i128"]],[[R[239]],["option",[R[239]]]]]],[11,R[412],E,E,0,[[["f32"]],[[R[239]],["option",[R[239]]]]]],[11,R[413],E,E,0,[[["f64"]],[[R[239]],["option",[R[239]]]]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,R[423],E,E,0,[[[R[239]]],[R[239]]]],[11,R[241],E,E,0,[[["self"],[T]]]],[11,R[241],E,E,0,[[["self"],[R[239]]]]],[11,R[241],E,E,0,[[[R[239]],["self"]]]],[11,R[241],E,E,0,[[["self"],[T]]]],[11,"hash",E,E,0,[[["self"],["__ht"]]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,44,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,R[514],E,E,0,[[],[R[239]]]],[11,"rem",E,E,0,[[[T]]]],[11,"rem",E,E,0,[[[R[239]]]]],[11,"rem",E,E,0,[[[T]]]],[11,"rem",E,E,0,[[[R[239]]]]],[11,"fmt",E,E,44,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"mul",E,E,0,[[[T]]]],[11,"mul",E,E,0,[[[R[239]]]]],[11,"mul",E,E,0,[[[R[239]]]]],[11,"mul",E,E,0,[[[T]]]],[11,R[245],E,E,0,[[[R[239]],["self"]]]],[11,R[245],E,E,0,[[["self"],[T]]]],[11,R[245],E,E,0,[[["self"],[R[239]]]]],[11,R[245],E,E,0,[[["self"],[T]]]],[11,R[520],E,E,0,[[["i"]],[R[239]]]],[11,R[520],E,E,0,[[["i"]],[R[239]]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"from",E,E,0,[[[T]],[R[239]]]],[11,"from",E,E,0,[[[T]],[R[239]]]],[11,"sub",E,E,0,[[[R[239]]]]],[11,"sub",E,E,0,[[[R[239]]]]],[11,"sub",E,E,0,[[[T]]]],[11,"sub",E,E,0,[[[T]]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"zero",E,E,0,[[],[R[239]]]],[11,R[507],E,E,0,[[["self"]],["bool"]]],[11,R[420],E,E,0,[[["self"]]]],[11,"neg",E,E,0,[[]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,R[503],E,R[246],0,[[["str"]],[[R[239]],[R[1],[R[239]]]]]],[11,R[504],E,E,44,[[["self"]],["str"]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,R[247],E,E,0,[[[R[239]],["self"]]]],[11,R[247],E,E,0,[[["self"],[R[239]]]]],[11,"inv",E,E,0,[[]]],[11,R[244],E,E,0,[[["self"],[T]]]],[11,R[244],E,E,0,[[[R[239]],["self"]]]],[11,R[244],E,E,0,[[["self"],[R[239]]]]],[11,R[244],E,E,0,[[["self"],[T]]]],[11,"as_",E,E,0,[[],[U]]],[11,"div",E,E,0,[[[R[239]]]]],[11,"div",E,E,0,[[[T]]]],[11,"div",E,E,0,[[[T]]]],[11,"div",E,E,0,[[[R[239]]]]],[11,R[242],E,E,0,[[[R[239]],["self"]]]],[11,R[242],E,E,0,[[["self"],[T]]]],[11,R[242],E,E,0,[[["self"],[R[239]]]]],[11,R[242],E,E,0,[[["self"],[T]]]],[11,"pow",E,E,0,[[[R[239]]]]],[11,"pow",E,E,0,[[["f32"]]]],[11,"pow",E,E,0,[[["f64"]]]],[11,"pow",E,E,0,[[[R[239]]]]],[11,"pow",E,E,0,[[["f64"]]]],[11,"pow",E,E,0,[[["f32"]]]],[11,R[405],E,E,0,[[["self"]],[["option",[R[4]]],[R[4]]]]],[11,R[404],E,E,0,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_u8",E,E,0,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16",E,E,0,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"to_u32",E,E,0,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"to_u64",E,E,0,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_i8",E,E,0,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16",E,E,0,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32",E,E,0,[[["self"]],[["i32"],["option",["i32"]]]]],[11,"to_i64",E,E,0,[[["self"]],[["i64"],["option",["i64"]]]]],[11,R[505],E,E,0,[[["self"]],[["u128"],["option",["u128"]]]]],[11,R[506],E,E,0,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_f32",E,E,0,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64",E,E,0,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"eq",E,E,44,[[["self"],[R[240]]],["bool"]]],[11,"ne",E,E,44,[[["self"],[R[240]]],["bool"]]],[11,"eq",E,E,0,[[[R[239]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[239]],["self"]],["bool"]]],[11,"clone",R[563],E,47,[[["self"]],[R[449]]]],[11,"clone",E,E,48,[[["self"]],[R[450]]]],[11,"clone",E,E,49,[[["self"]],[R[451]]]],[11,"clone",E,E,46,[[["self"]],["range"]]],[11,R[448],E,E,47,[[["self"]],["option"]]],[11,R[448],E,E,46,[[["self"]],["option"]]],[11,"next",E,E,48,[[["self"]],["option"]]],[11,"next",E,E,47,[[["self"]],["option"]]],[11,R[447],E,E,47,[[["self"]]]],[11,"next",E,E,49,[[["self"]],["option"]]],[11,"next",E,E,46,[[["self"]],["option"]]],[11,R[447],E,E,46,[[["self"]]]],[11,"one",R[564],E,50,[[],["ratio"]]],[11,"is_one",E,E,50,[[["self"]],["bool"]]],[11,R[600],E,E,50,[[["self"]]]],[11,"sum",E,E,50,[[["i"]],["ratio"]]],[11,"sum",E,E,50,[[["i"]],["ratio"]]],[11,R[280],E,E,50,[[["self"],["ratio"]],[["option",["ratio"]],["ratio"]]]],[11,"abs",E,E,50,[[["self"]],["ratio"]]],[11,R[314],E,E,50,[[["self"],["ratio"]],["ratio"]]],[11,"signum",E,E,50,[[["self"]],["ratio"]]],[11,R[266],E,E,50,[[["self"]],["bool"]]],[11,R[268],E,E,50,[[["self"]],["bool"]]],[11,"zero",E,E,50,[[],["ratio"]]],[11,R[507],E,E,50,[[["self"]],["bool"]]],[11,R[420],E,E,50,[[["self"]]]],[11,"add",E,E,50,[[[T]],["ratio"]]],[11,"add",E,E,50,[[["ratio"]],["ratio"]]],[11,"add",E,E,50,[[[T]],["ratio"]]],[11,"add",E,E,50,[[["ratio"]],["ratio"]]],[11,"clone",E,E,50,[[["self"]],["ratio"]]],[11,"clone",E,E,51,[[["self"]],[R[518]]]],[11,R[277],E,E,50,[[["self"],["ratio"]],[["option",["ratio"]],["ratio"]]]],[11,R[243],E,E,50,[[["self"],["ratio"]]]],[11,R[243],E,E,50,[[["self"],[T]]]],[11,R[243],E,E,50,[[["self"],[T]]]],[11,R[243],E,E,50,[[["self"],["ratio"]]]],[11,"pow",E,E,50,[[["i32"]],["ratio"]]],[11,"pow",E,E,50,[[["isize"]],["ratio"]]],[11,"pow",E,E,50,[[["i16"]],["ratio"]]],[11,"pow",E,E,50,[[["u8"]],["ratio"]]],[11,"pow",E,E,50,[[["isize"]],["ratio"]]],[11,"pow",E,E,50,[[["i8"]],["ratio"]]],[11,"pow",E,E,50,[[["u32"]],["ratio"]]],[11,"pow",E,E,50,[[[R[4]]],["ratio"]]],[11,"pow",E,E,50,[[["i32"]],["ratio"]]],[11,"pow",E,E,50,[[["i64"]],["ratio"]]],[11,"pow",E,E,50,[[["u32"]],["ratio"]]],[11,"pow",E,E,50,[[["u8"]],["ratio"]]],[11,"pow",E,E,50,[[["u64"]],["ratio"]]],[11,"pow",E,E,50,[[["u16"]],["ratio"]]],[11,"pow",E,E,50,[[[R[4]]],["ratio"]]],[11,"pow",E,E,50,[[["i64"]],["ratio"]]],[11,"pow",E,E,50,[[["u16"]],["ratio"]]],[11,"pow",E,E,50,[[["i16"]],["ratio"]]],[11,"pow",E,E,50,[[["u64"]],["ratio"]]],[11,"pow",E,E,50,[[["i8"]],["ratio"]]],[11,"hash",E,E,50,[[["h"],["self"]]]],[11,R[241],E,E,50,[[["self"],["ratio"]]]],[11,R[241],E,E,50,[[["self"],["ratio"]]]],[11,R[241],E,E,50,[[["self"],[T]]]],[11,R[241],E,E,50,[[["self"],[T]]]],[11,R[408],E,E,50,[[["i64"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,R[250],E,E,50,[[["i128"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,R[411],E,E,50,[[["u64"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,R[252],E,E,50,[[["u128"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,R[412],E,E,50,[[["f32"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,R[413],E,E,50,[[["f64"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,R[408],E,E,50,[[["i64"]],[["option",["ratio"]],["ratio",["u128"]]]]],[11,R[250],E,E,50,[[["i128"]],[["option",["ratio"]],["ratio",["u128"]]]]],[11,R[411],E,E,50,[[["u64"]],[["option",["ratio"]],["ratio",["u128"]]]]],[11,R[252],E,E,50,[[["u128"]],[["option",["ratio"]],["ratio",["u128"]]]]],[11,R[412],E,E,50,[[["f32"]],[["option",["ratio"]],["ratio",["u128"]]]]],[11,R[413],E,E,50,[[["f64"]],[["option",["ratio"]],["ratio",["u128"]]]]],[11,R[408],E,E,50,[[["i64"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,R[250],E,E,50,[[["i128"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,R[411],E,E,50,[[["u64"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,R[252],E,E,50,[[["u128"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,R[412],E,E,50,[[["f32"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,R[413],E,E,50,[[["f64"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,R[408],E,E,50,[[["i64"]],[["option",["ratio"]],["ratio",["i32"]]]]],[11,R[250],E,E,50,[[["i128"]],[["option",["ratio"]],["ratio",["i32"]]]]],[11,R[411],E,E,50,[[["u64"]],[["option",["ratio"]],["ratio",["i32"]]]]],[11,R[252],E,E,50,[[["u128"]],[["option",["ratio"]],["ratio",["i32"]]]]],[11,R[412],E,E,50,[[["f32"]],[["option",["ratio"]],["ratio",["i32"]]]]],[11,R[413],E,E,50,[[["f64"]],[["option",["ratio"]],["ratio",["i32"]]]]],[11,R[408],E,E,50,[[["i64"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,R[250],E,E,50,[[["i128"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,R[411],E,E,50,[[["u64"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,R[252],E,E,50,[[["u128"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,R[412],E,E,50,[[["f32"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,R[413],E,E,50,[[["f64"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,R[408],E,E,50,[[["i64"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,R[250],E,E,50,[[["i128"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,R[411],E,E,50,[[["u64"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,R[252],E,E,50,[[["u128"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,R[412],E,E,50,[[["f32"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,R[413],E,E,50,[[["f64"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,R[408],E,E,50,[[["i64"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,R[250],E,E,50,[[["i128"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,R[411],E,E,50,[[["u64"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,R[252],E,E,50,[[["u128"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,R[412],E,E,50,[[["f32"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,R[413],E,E,50,[[["f64"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,R[408],E,E,50,[[["i64"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,R[250],E,E,50,[[["i128"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,R[411],E,E,50,[[["u64"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,R[252],E,E,50,[[["u128"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,R[412],E,E,50,[[["f32"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,R[413],E,E,50,[[["f64"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,R[408],E,E,50,[[["i64"]],[["ratio",["i64"]],["option",["ratio"]]]]],[11,R[250],E,E,50,[[["i128"]],[["ratio",["i64"]],["option",["ratio"]]]]],[11,R[411],E,E,50,[[["u64"]],[["ratio",["i64"]],["option",["ratio"]]]]],[11,R[252],E,E,50,[[["u128"]],[["ratio",["i64"]],["option",["ratio"]]]]],[11,R[412],E,E,50,[[["f32"]],[["ratio",["i64"]],["option",["ratio"]]]]],[11,R[413],E,E,50,[[["f64"]],[["ratio",["i64"]],["option",["ratio"]]]]],[11,R[408],E,E,50,[[["i64"]],[["option",["ratio"]],["ratio",["bigint"]]]]],[11,R[250],E,E,50,[[["i128"]],[["option",["ratio"]],["ratio",["bigint"]]]]],[11,R[411],E,E,50,[[["u64"]],[["option",["ratio"]],["ratio",["bigint"]]]]],[11,R[252],E,E,50,[[["u128"]],[["option",["ratio"]],["ratio",["bigint"]]]]],[11,R[412],E,E,50,[[["f32"]],[["option",["ratio"]],["ratio",["bigint"]]]]],[11,R[413],E,E,50,[[["f64"]],[["option",["ratio"]],["ratio",["bigint"]]]]],[11,R[408],E,E,50,[[["i64"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,R[250],E,E,50,[[["i128"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,R[411],E,E,50,[[["u64"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,R[252],E,E,50,[[["u128"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,R[412],E,E,50,[[["f32"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,R[413],E,E,50,[[["f64"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,R[408],E,E,50,[[["i64"]],[["option",["ratio"]],["ratio",["u32"]]]]],[11,R[250],E,E,50,[[["i128"]],[["option",["ratio"]],["ratio",["u32"]]]]],[11,R[411],E,E,50,[[["u64"]],[["option",["ratio"]],["ratio",["u32"]]]]],[11,R[252],E,E,50,[[["u128"]],[["option",["ratio"]],["ratio",["u32"]]]]],[11,R[412],E,E,50,[[["f32"]],[["option",["ratio"]],["ratio",["u32"]]]]],[11,R[413],E,E,50,[[["f64"]],[["option",["ratio"]],["ratio",["u32"]]]]],[11,R[408],E,E,50,[[["i64"]],[["ratio",[R[4]]],["option",["ratio"]]]]],[11,R[250],E,E,50,[[["i128"]],[["ratio",[R[4]]],["option",["ratio"]]]]],[11,R[411],E,E,50,[[["u64"]],[["ratio",[R[4]]],["option",["ratio"]]]]],[11,R[252],E,E,50,[[["u128"]],[["ratio",[R[4]]],["option",["ratio"]]]]],[11,R[412],E,E,50,[[["f32"]],[["ratio",[R[4]]],["option",["ratio"]]]]],[11,R[413],E,E,50,[[["f64"]],[["ratio",[R[4]]],["option",["ratio"]]]]],[11,R[254],E,R[713],50,[[["u32"],["str"]],[[R[518]],["ratio"],[R[1],["ratio",R[518]]]]]],[11,"inv",E,E,50,[[],["ratio"]]],[11,"fmt",E,E,51,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,50,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,51,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,R[711],50,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"rem",E,E,50,[[[T]],["ratio"]]],[11,"rem",E,E,50,[[[T]],["ratio"]]],[11,"rem",E,E,50,[[["ratio"]],["ratio"]]],[11,"rem",E,E,50,[[["ratio"]],["ratio"]]],[11,"mul",E,E,50,[[[T]],["ratio"]]],[11,"mul",E,E,50,[[["ratio"]],["ratio"]]],[11,"mul",E,E,50,[[[T]],["ratio"]]],[11,"mul",E,E,50,[[["ratio"]],["ratio"]]],[11,R[245],E,E,50,[[["self"],["ratio"]]]],[11,R[245],E,E,50,[[["self"],[T]]]],[11,R[245],E,E,50,[[["self"],[T]]]],[11,R[245],E,E,50,[[["self"],["ratio"]]]],[11,R[520],E,E,50,[[["i"]],["ratio"]]],[11,R[520],E,E,50,[[["i"]],["ratio"]]],[11,R[83],E,E,50,[[["self"],["ratio"]],[[R[82]],["option",[R[82]]]]]],[11,"from",E,E,50,[[],["ratio"]]],[11,"from",E,E,50,[[[T]],["ratio"]]],[11,"sub",E,E,50,[[["ratio"]],["ratio"]]],[11,"sub",E,E,50,[[["ratio"]],["ratio"]]],[11,"sub",E,E,50,[[[T]],["ratio"]]],[11,"sub",E,E,50,[[[T]],["ratio"]]],[11,"neg",E,E,50,[[],["ratio"]]],[11,R[503],E,R[712],50,[[["str"]],[[R[518]],["ratio"],[R[1],["ratio",R[518]]]]]],[11,"cmp",E,E,50,[[["self"],["ratio"]],[R[82]]]],[11,R[244],E,E,50,[[["self"],["ratio"]]]],[11,R[244],E,E,50,[[["self"],[T]]]],[11,R[244],E,E,50,[[["self"],["ratio"]]]],[11,R[244],E,E,50,[[["self"],[T]]]],[11,"div",E,E,50,[[[T]],["ratio"]]],[11,"div",E,E,50,[[["ratio"]],["ratio"]]],[11,"div",E,E,50,[[["ratio"]],["ratio"]]],[11,"div",E,E,50,[[[T]],["ratio"]]],[11,R[286],E,E,50,[[["self"],["ratio"]],[["option",["ratio"]],["ratio"]]]],[11,R[242],E,E,50,[[["self"],[T]]]],[11,R[242],E,E,50,[[["self"],["ratio"]]]],[11,R[242],E,E,50,[[["self"],[T]]]],[11,R[242],E,E,50,[[["self"],["ratio"]]]],[11,R[283],E,E,50,[[["self"],["ratio"]],[["option",["ratio"]],["ratio"]]]],[11,"eq",E,E,51,[[[R[518]],["self"]],["bool"]]],[11,"ne",E,E,51,[[[R[518]],["self"]],["bool"]]],[11,"eq",E,E,50,[[["self"],["ratio"]],["bool"]]],[11,"into",E,E,50,[[]]],[11,R[504],E,E,51,[[["self"]],["str"]]],[11,"new",R[560],R[500],41,[[["u32"],["sign"],["vec",["u32"]]],["bigint"]]],[11,R[664],E,R[456],41,[[["sign"],[R[465]]],["bigint"]]],[11,R[461],E,R[456],41,[[["sign"]],["bigint"]]],[11,R[463],E,R[665],41,[[["sign"],["self"]]]],[11,R[464],E,R[456],41,[[["sign"]],["bigint"]]],[11,R[466],E,R[456],41,[[["sign"]],["bigint"]]],[11,R[666],E,R[457],41,[[],["bigint"]]],[11,R[667],E,R[457],41,[[],["bigint"]]],[11,R[467],E,R[456],41,[[["u32"]],[["option",["bigint"]],["bigint"]]]],[11,R[468],E,R[458],41,[[["u32"],["sign"]],[["option",["bigint"]],["bigint"]]]],[11,R[469],E,R[458],41,[[["u32"],["sign"]],[["option",["bigint"]],["bigint"]]]],[11,R[471],E,R[459],41,[[["self"]]]],[11,R[472],E,R[459],41,[[["self"]]]],[11,R[668],E,R[460],41,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[669],E,R[460],41,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[474],E,R[475],41,[[["u32"],["self"]],["string"]]],[11,R[476],E,R[477],41,[[["u32"],["self"]]]],[11,R[478],E,R[479],41,[[["u32"],["self"]]]],[11,"sign",E,R[670],41,[[["self"]],["sign"]]],[11,"bits",E,R[480],41,[[["self"]],[R[4]]]],[11,R[484],E,R[671],41,[[["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[277],E,E,41,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[280],E,E,41,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[283],E,E,41,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[286],E,E,41,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"modpow",E,R[672],41,[[["bigint"],["self"]],["bigint"]]],[11,"sqrt",E,R[481],41,[[["self"]],["bigint"]]],[11,"cbrt",E,R[482],41,[[["self"]],["bigint"]]],[11,R[492],E,R[483],41,[[["u32"],["self"]],["bigint"]]],[11,"new",E,R[462],42,[[["u32"],["vec",["u32"]]],[R[465]]]],[11,R[461],E,R[462],42,[[],[R[465]]]],[11,R[463],E,R[673],42,[[["self"]]]],[11,R[464],E,R[462],42,[[],[R[465]]]],[11,R[466],E,R[462],42,[[],[R[465]]]],[11,R[467],E,R[674],42,[[["u32"]],[["option",[R[465]]],[R[465]]]]],[11,R[468],E,R[470],42,[[["u32"]],[["option",[R[465]]],[R[465]]]]],[11,R[469],E,R[470],42,[[["u32"]],[["option",[R[465]]],[R[465]]]]],[11,R[471],E,R[473],42,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[472],E,R[473],42,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[474],E,R[475],42,[[["u32"],["self"]],["string"]]],[11,R[476],E,R[477],42,[[["u32"],["self"]],[["u8"],["vec",["u8"]]]]],[11,R[478],E,R[479],42,[[["u32"],["self"]],[["u8"],["vec",["u8"]]]]],[11,"bits",E,R[480],42,[[["self"]],[R[4]]]],[11,"modpow",E,R[675],42,[[[R[465]],["self"]],[R[465]]]],[11,"sqrt",E,R[481],42,[[["self"]],[R[465]]]],[11,"cbrt",E,R[482],42,[[["self"]],[R[465]]]],[11,R[492],E,R[483],42,[[["u32"],["self"]],[R[465]]]],[11,"new",R[561],R[622],0,[[[T]],[R[239]]]],[11,"i",E,R[623],0,[[],[R[239]]]],[11,"norm_sqr",E,R[624],0,[[["self"]],[T]]],[11,"scale",E,R[625],0,[[["self"],[T]],[R[239]]]],[11,"unscale",E,R[626],0,[[["self"],[T]],[R[239]]]],[11,"powu",E,R[627],0,[[["u32"],["self"]],[R[239]]]],[11,"conj",E,R[628],0,[[["self"]],[R[239]]]],[11,"inv",E,R[629],0,[[["self"]],[R[239]]]],[11,"powi",E,R[630],0,[[["i32"],["self"]],[R[239]]]],[11,"l1_norm",E,R[631],0,[[["self"]],[T]]],[11,"norm",E,R[632],0,[[["self"]],[T]]],[11,"arg",E,R[633],0,[[["self"]],[T]]],[11,"to_polar",E,R[634],0,[[["self"]]]],[11,R[635],E,R[636],0,[[[T]],[R[239]]]],[11,"exp",E,R[637],0,[[["self"]],[R[239]]]],[11,"ln",E,R[638],0,[[["self"]],[R[239]]]],[11,"sqrt",E,R[639],0,[[["self"]],[R[239]]]],[11,"cbrt",E,R[640],0,[[["self"]],[R[239]]]],[11,"powf",E,R[641],0,[[["self"],[T]],[R[239]]]],[11,"log",E,R[642],0,[[["self"],[T]],[R[239]]]],[11,"powc",E,R[643],0,[[[R[239]],["self"]],[R[239]]]],[11,"expf",E,R[644],0,[[["self"],[T]],[R[239]]]],[11,"sin",E,R[645],0,[[["self"]],[R[239]]]],[11,"cos",E,R[646],0,[[["self"]],[R[239]]]],[11,"tan",E,R[647],0,[[["self"]],[R[239]]]],[11,"asin",E,R[648],0,[[["self"]],[R[239]]]],[11,"acos",E,R[649],0,[[["self"]],[R[239]]]],[11,"atan",E,R[650],0,[[["self"]],[R[239]]]],[11,"sinh",E,R[651],0,[[["self"]],[R[239]]]],[11,"cosh",E,R[652],0,[[["self"]],[R[239]]]],[11,"tanh",E,R[653],0,[[["self"]],[R[239]]]],[11,"asinh",E,R[654],0,[[["self"]],[R[239]]]],[11,"acosh",E,R[655],0,[[["self"]],[R[239]]]],[11,"atanh",E,R[656],0,[[["self"]],[R[239]]]],[11,"finv",E,R[657],0,[[["self"]],[R[239]]]],[11,"fdiv",E,R[658],0,[[[R[239]],["self"]],[R[239]]]],[11,"is_nan",E,R[659],0,[[],["bool"]]],[11,R[141],E,R[660],0,[[],["bool"]]],[11,R[142],E,R[661],0,[[],["bool"]]],[11,R[143],E,R[662],0,[[],["bool"]]],[11,"new",R[562],R[618],45,[[[T]],[R[619]]]],[11,"new",R[564],R[690],50,[[[T]],["ratio"]]],[11,R[691],E,R[692],50,[[[T]],["ratio"]]],[11,"new_raw",E,R[693],50,[[[T]],["ratio"]]],[11,R[694],E,R[695],50,[[["self"]],[T]]],[11,"numer",E,R[696],50,[[["self"]],[T]]],[11,"denom",E,R[697],50,[[["self"]],[T]]],[11,R[698],E,R[699],50,[[["self"]],["bool"]]],[11,"reduced",E,R[700],50,[[["self"]],["ratio"]]],[11,"recip",E,R[701],50,[[["self"]],["ratio"]]],[11,"floor",E,R[702],50,[[["self"]],["ratio"]]],[11,"ceil",E,R[703],50,[[["self"]],["ratio"]]],[11,"round",E,R[704],50,[[["self"]],["ratio"]]],[11,"trunc",E,R[705],50,[[["self"]],["ratio"]]],[11,"fract",E,R[706],50,[[["self"]],["ratio"]]],[11,"pow",E,R[707],50,[[["i32"],["self"]],["ratio"]]],[11,R[708],E,R[709],50,[[[T]],[["option",["ratio"]],["ratio",["bigint"]]]]],[11,R[710],E,E,50,[[["f"]],[["option",["ratio"]],["ratio"]]]]],"p":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,R[598]],[8,R[219]],[8,R[210]],[8,R[211]],[8,R[212]],[8,R[213]],[8,R[603]],[8,R[205]],[8,R[206]],[8,R[597]],[8,R[207]],[8,"Pow"],[8,"Float"],[8,R[678]],[8,R[501]],[4,"Sign"],[3,R[234]],[8,"Roots"],[8,R[208]],[8,R[209]],[8,R[214]],[8,R[215]],[8,R[216]],[8,R[217]],[8,"Inv"],[8,"MulAdd"],[8,R[218]],[8,R[220]],[8,R[221]],[8,R[222]],[8,R[223]],[8,R[224]],[8,"Real"],[4,R[204]],[3,R[203]],[3,"BigInt"],[3,"BigUint"],[3,R[502]],[3,R[248]],[3,R[235]],[3,"Range"],[3,R[452]],[3,R[453]],[3,R[454]],[3,"Ratio"],[3,R[519]]]};
searchIndex["num_iter"]={"doc":"External iterators for generic mathematics","i":[[3,"Range","num_iter",R[565],N,N],[3,R[452],E,R[566],N,N],[3,R[453],E,R[567],N,N],[3,R[454],E,R[568],N,N],[5,"range",E,R[546],N,[[["a"]],["range"]]],[5,R[547],E,R[548],N,[[["a"]],[R[449]]]],[5,R[549],E,R[550],N,[[["a"]],[R[450]]]],[5,R[551],E,R[552],N,[[["a"]],[R[451]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[446],E,E,0,[[],["i"]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,"into",E,E,0,[[],[U]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[65],E,E,0,[[["self"]],[T]]],[11,R[66],E,E,0,[[[T],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[446],E,E,1,[[],["i"]]],[11,R[67],E,E,1,[[[U]],[R[1]]]],[11,R[69],E,E,1,[[],[R[1]]]],[11,"into",E,E,1,[[],[U]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[68],E,E,1,[[["self"]],[T]]],[11,R[236],E,E,1,[[["self"]],["typeid"]]],[11,R[65],E,E,1,[[["self"]],[T]]],[11,R[66],E,E,1,[[[T],["self"]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[446],E,E,2,[[],["i"]]],[11,R[67],E,E,2,[[[U]],[R[1]]]],[11,R[69],E,E,2,[[],[R[1]]]],[11,"into",E,E,2,[[],[U]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[68],E,E,2,[[["self"]],[T]]],[11,R[236],E,E,2,[[["self"]],["typeid"]]],[11,R[65],E,E,2,[[["self"]],[T]]],[11,R[66],E,E,2,[[[T],["self"]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[446],E,E,3,[[],["i"]]],[11,R[67],E,E,3,[[[U]],[R[1]]]],[11,R[69],E,E,3,[[],[R[1]]]],[11,"into",E,E,3,[[],[U]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[68],E,E,3,[[["self"]],[T]]],[11,R[236],E,E,3,[[["self"]],["typeid"]]],[11,R[65],E,E,3,[[["self"]],[T]]],[11,R[66],E,E,3,[[[T],["self"]]]],[11,"next",E,E,0,[[["self"]],["option"]]],[11,R[447],E,E,0,[[["self"]]]],[11,"next",E,E,1,[[["self"]],["option"]]],[11,R[447],E,E,1,[[["self"]]]],[11,"next",E,E,2,[[["self"]],["option"]]],[11,"next",E,E,3,[[["self"]],["option"]]],[11,R[448],E,E,0,[[["self"]],["option"]]],[11,R[448],E,E,1,[[["self"]],["option"]]],[11,"clone",E,E,0,[[["self"]],["range"]]],[11,"clone",E,E,1,[[["self"]],[R[449]]]],[11,"clone",E,E,2,[[["self"]],[R[450]]]],[11,"clone",E,E,3,[[["self"]],[R[451]]]]],"p":[[3,"Range"],[3,R[452]],[3,R[453]],[3,R[454]]]};
searchIndex[R[0]]={"doc":"This crate provides convenience methods for encoding and…","i":[[4,R[128],R[0],"Defines big-endian serialization.",N,N],[4,R[129],E,"Defines little-endian serialization.",N,N],[6,"BE",E,"A type alias for [`BigEndian`].",N,N],[6,"LE",E,"A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian",E,"Defines network byte order serialization.",N,N],[6,"NativeEndian",E,"Defines system native-endian serialization.",N,N],[8,R[125],E,"Extends [`Read`] with methods for reading numbers. (For…",N,N],[11,"read_u8",E,R[85],0,[[["self"]],[["u8"],[R[1],["u8"]]]]],[11,"read_i8",E,R[86],0,[[["self"]],[[R[1],["i8"]],["i8"]]]],[11,R[8],E,R[87],0,[[["self"]],[[R[1],["u16"]],["u16"]]]],[11,R[26],E,R[88],0,[[["self"]],[[R[1],["i16"]],["i16"]]]],[11,R[9],E,R[89],0,[[["self"]],[["u32"],[R[1],["u32"]]]]],[11,R[27],E,R[90],0,[[["self"]],[["i32"],[R[1],["i32"]]]]],[11,R[10],E,R[91],0,[[["self"]],[["u32"],[R[1],["u32"]]]]],[11,R[28],E,R[92],0,[[["self"]],[["i32"],[R[1],["i32"]]]]],[11,R[11],E,R[93],0,[[["self"]],[[R[1],["u64"]],["u64"]]]],[11,R[29],E,R[94],0,[[["self"]],[[R[1],["i64"]],["i64"]]]],[11,R[12],E,R[95],0,[[["self"]],[[R[1],["u64"]],["u64"]]]],[11,R[30],E,R[96],0,[[["self"]],[[R[1],["i64"]],["i64"]]]],[11,R[13],E,R[97],0,[[["self"]],[[R[1],["u128"]],["u128"]]]],[11,R[31],E,R[98],0,[[["self"]],[["i128"],[R[1],["i128"]]]]],[11,R[14],E,R[2],0,[[["self"],[R[4]]],[[R[1],["u64"]],["u64"]]]],[11,R[32],E,R[3],0,[[["self"],[R[4]]],[[R[1],["i64"]],["i64"]]]],[11,R[15],E,R[2],0,[[["self"],[R[4]]],[[R[1],["u128"]],["u128"]]]],[11,R[33],E,R[3],0,[[["self"],[R[4]]],[["i128"],[R[1],["i128"]]]]],[11,R[35],E,R[36],0,[[["self"]],[[R[1],["f32"]],["f32"]]]],[11,R[37],E,R[38],0,[[["self"]],[[R[1],["f64"]],["f64"]]]],[11,R[52],E,R[99],0,[[["self"]],[R[1]]]],[11,R[53],E,R[100],0,[[["self"]],[R[1]]]],[11,R[54],E,R[101],0,[[["self"]],[R[1]]]],[11,R[55],E,R[102],0,[[["self"]],[R[1]]]],[11,R[103],E,R[104],0,[[["self"]],[R[1]]]],[11,R[56],E,R[105],0,[[["self"]],[R[1]]]],[11,R[57],E,R[106],0,[[["self"]],[R[1]]]],[11,R[58],E,R[107],0,[[["self"]],[R[1]]]],[11,R[59],E,R[108],0,[[["self"]],[R[1]]]],[11,R[60],E,R[109],0,[[["self"]],[R[1]]]],[11,R[61],E,R[5],0,[[["self"]],[R[1]]]],[11,R[62],E,R[110],0,[[["self"]],[R[1]]]],[11,R[64],E,R[5],0,[[["self"]],[R[1]]]],[8,R[126],E,"Extends [`Write`] with methods for writing numbers. (For…",N,N],[11,"write_u8",E,R[111],1,[[["self"],["u8"]],[R[1]]]],[11,"write_i8",E,R[112],1,[[["self"],["i8"]],[R[1]]]],[11,R[17],E,R[113],1,[[["self"],["u16"]],[R[1]]]],[11,R[39],E,R[114],1,[[["self"],["i16"]],[R[1]]]],[11,R[18],E,R[115],1,[[["u32"],["self"]],[R[1]]]],[11,R[40],E,R[116],1,[[["i32"],["self"]],[R[1]]]],[11,R[19],E,R[117],1,[[["u32"],["self"]],[R[1]]]],[11,R[41],E,R[118],1,[[["i32"],["self"]],[R[1]]]],[11,R[20],E,R[119],1,[[["self"],["u64"]],[R[1]]]],[11,R[42],E,R[120],1,[[["self"],["i64"]],[R[1]]]],[11,R[21],E,R[121],1,[[["self"],["u64"]],[R[1]]]],[11,R[43],E,R[122],1,[[["self"],["i64"]],[R[1]]]],[11,R[22],E,R[123],1,[[["self"],["u128"]],[R[1]]]],[11,R[44],E,R[124],1,[[["i128"],["self"]],[R[1]]]],[11,R[23],E,R[6],1,[[["self"],["u64"],[R[4]]],[R[1]]]],[11,R[45],E,R[7],1,[[["self"],["i64"],[R[4]]],[R[1]]]],[11,R[24],E,R[6],1,[[["self"],["u128"],[R[4]]],[R[1]]]],[11,R[46],E,R[7],1,[[["i128"],["self"],[R[4]]],[R[1]]]],[11,R[48],E,R[49],1,[[["self"],["f32"]],[R[1]]]],[11,R[50],E,R[51],1,[[["self"],["f64"]],[R[1]]]],[8,R[127],E,"`ByteOrder` describes types that can serialize integers as…",N,N],[10,R[8],E,"Reads an unsigned 16 bit integer from `buf`.",2,[[],["u16"]]],[11,R[9],E,"Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,[[],["u32"]]],[10,R[10],E,"Reads an unsigned 32 bit integer from `buf`.",2,[[],["u32"]]],[11,R[11],E,"Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,[[],["u64"]]],[10,R[12],E,"Reads an unsigned 64 bit integer from `buf`.",2,[[],["u64"]]],[10,R[13],E,"Reads an unsigned 128 bit integer from `buf`.",2,[[],["u128"]]],[10,R[14],E,R[16],2,[[[R[4]]],["u64"]]],[10,R[15],E,R[16],2,[[[R[4]]],["u128"]]],[10,R[17],E,"Writes an unsigned 16 bit integer `n` to `buf`.",2,[[["u16"]]]],[11,R[18],E,"Writes an unsigned 24 bit integer `n` to `buf`, stored in…",2,[[["u32"]]]],[10,R[19],E,"Writes an unsigned 32 bit integer `n` to `buf`.",2,[[["u32"]]]],[11,R[20],E,"Writes an unsigned 48 bit integer `n` to `buf`, stored in…",2,[[["u64"]]]],[10,R[21],E,"Writes an unsigned 64 bit integer `n` to `buf`.",2,[[["u64"]]]],[10,R[22],E,"Writes an unsigned 128 bit integer `n` to `buf`.",2,[[["u128"]]]],[10,R[23],E,R[25],2,[[["u64"],[R[4]]]]],[10,R[24],E,R[25],2,[[["u128"],[R[4]]]]],[11,R[26],E,"Reads a signed 16 bit integer from `buf`.",2,[[],["i16"]]],[11,R[27],E,"Reads a signed 24 bit integer from `buf`, stored in i32.",2,[[],["i32"]]],[11,R[28],E,"Reads a signed 32 bit integer from `buf`.",2,[[],["i32"]]],[11,R[29],E,"Reads a signed 48 bit integer from `buf`, stored in i64.",2,[[],["i64"]]],[11,R[30],E,"Reads a signed 64 bit integer from `buf`.",2,[[],["i64"]]],[11,R[31],E,"Reads a signed 128 bit integer from `buf`.",2,[[],["i128"]]],[11,R[32],E,R[34],2,[[[R[4]]],["i64"]]],[11,R[33],E,R[34],2,[[[R[4]]],["i128"]]],[11,R[35],E,R[36],2,[[],["f32"]]],[11,R[37],E,R[38],2,[[],["f64"]]],[11,R[39],E,"Writes a signed 16 bit integer `n` to `buf`.",2,[[["i16"]]]],[11,R[40],E,"Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,[[["i32"]]]],[11,R[41],E,"Writes a signed 32 bit integer `n` to `buf`.",2,[[["i32"]]]],[11,R[42],E,"Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,[[["i64"]]]],[11,R[43],E,"Writes a signed 64 bit integer `n` to `buf`.",2,[[["i64"]]]],[11,R[44],E,"Writes a signed 128 bit integer `n` to `buf`.",2,[[["i128"]]]],[11,R[45],E,R[47],2,[[["i64"],[R[4]]]]],[11,R[46],E,R[47],2,[[["i128"],[R[4]]]]],[11,R[48],E,R[49],2,[[["f32"]]]],[11,R[50],E,R[51],2,[[["f64"]]]],[10,R[52],E,"Reads unsigned 16 bit integers from `src` into `dst`.",2,[[]]],[10,R[53],E,"Reads unsigned 32 bit integers from `src` into `dst`.",2,[[]]],[10,R[54],E,"Reads unsigned 64 bit integers from `src` into `dst`.",2,[[]]],[10,R[55],E,"Reads unsigned 128 bit integers from `src` into `dst`.",2,[[]]],[11,R[56],E,"Reads signed 16 bit integers from `src` to `dst`.",2,[[]]],[11,R[57],E,"Reads signed 32 bit integers from `src` into `dst`.",2,[[]]],[11,R[58],E,"Reads signed 64 bit integers from `src` into `dst`.",2,[[]]],[11,R[59],E,"Reads signed 128 bit integers from `src` into `dst`.",2,[[]]],[11,R[60],E,R[63],2,[[]]],[11,R[61],E,R[5],2,[[]]],[11,R[62],E,R[63],2,[[]]],[11,R[64],E,R[5],2,[[]]],[10,R[70],E,"Writes unsigned 16 bit integers from `src` into `dst`.",2,[[]]],[10,R[71],E,"Writes unsigned 32 bit integers from `src` into `dst`.",2,[[]]],[10,R[72],E,"Writes unsigned 64 bit integers from `src` into `dst`.",2,[[]]],[10,R[73],E,"Writes unsigned 128 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i16_into",E,"Writes signed 16 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i32_into",E,"Writes signed 32 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i64_into",E,"Writes signed 64 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i128_into",E,"Writes signed 128 bit integers from `src` into `dst`.",2,[[]]],[11,"write_f32_into",E,"Writes IEEE754 single-precision (4 bytes) floating point…",2,[[]]],[11,"write_f64_into",E,"Writes IEEE754 double-precision (8 bytes) floating point…",2,[[]]],[10,R[74],E,"Converts the given slice of unsigned 16 bit integers to a…",2,[[]]],[10,R[75],E,"Converts the given slice of unsigned 32 bit integers to a…",2,[[]]],[10,R[76],E,"Converts the given slice of unsigned 64 bit integers to a…",2,[[]]],[10,R[77],E,"Converts the given slice of unsigned 128 bit integers to a…",2,[[]]],[11,"from_slice_i16",E,"Converts the given slice of signed 16 bit integers to a…",2,[[]]],[11,"from_slice_i32",E,"Converts the given slice of signed 32 bit integers to a…",2,[[]]],[11,"from_slice_i64",E,"Converts the given slice of signed 64 bit integers to a…",2,[[]]],[11,"from_slice_i128",E,"Converts the given slice of signed 128 bit integers to a…",2,[[]]],[10,R[78],E,"Converts the given slice of IEEE754 single-precision (4…",2,[[]]],[10,R[79],E,"Converts the given slice of IEEE754 double-precision (8…",2,[[]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[65],E,E,3,[[["self"]],[T]]],[11,R[66],E,E,3,[[[T],["self"]]]],[11,R[67],E,E,3,[[[U]],[R[1]]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[236],E,E,3,[[["self"]],["typeid"]]],[11,R[68],E,E,3,[[["self"]],[T]]],[11,R[69],E,E,3,[[],[R[1]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[65],E,E,4,[[["self"]],[T]]],[11,R[66],E,E,4,[[[T],["self"]]]],[11,R[67],E,E,4,[[[U]],[R[1]]]],[11,"borrow",E,E,4,[[["self"]],[T]]],[11,R[236],E,E,4,[[["self"]],["typeid"]]],[11,R[68],E,E,4,[[["self"]],[T]]],[11,R[69],E,E,4,[[],[R[1]]]],[11,R[8],E,E,3,[[],["u16"]]],[11,R[10],E,E,3,[[],["u32"]]],[11,R[12],E,E,3,[[],["u64"]]],[11,R[13],E,E,3,[[],["u128"]]],[11,R[14],E,E,3,[[[R[4]]],["u64"]]],[11,R[15],E,E,3,[[[R[4]]],["u128"]]],[11,R[17],E,E,3,[[["u16"]]]],[11,R[19],E,E,3,[[["u32"]]]],[11,R[21],E,E,3,[[["u64"]]]],[11,R[22],E,E,3,[[["u128"]]]],[11,R[23],E,E,3,[[["u64"],[R[4]]]]],[11,R[24],E,E,3,[[["u128"],[R[4]]]]],[11,R[52],E,E,3,[[]]],[11,R[53],E,E,3,[[]]],[11,R[54],E,E,3,[[]]],[11,R[55],E,E,3,[[]]],[11,R[70],E,E,3,[[]]],[11,R[71],E,E,3,[[]]],[11,R[72],E,E,3,[[]]],[11,R[73],E,E,3,[[]]],[11,R[74],E,E,3,[[]]],[11,R[75],E,E,3,[[]]],[11,R[76],E,E,3,[[]]],[11,R[77],E,E,3,[[]]],[11,R[78],E,E,3,[[]]],[11,R[79],E,E,3,[[]]],[11,R[8],E,E,4,[[],["u16"]]],[11,R[10],E,E,4,[[],["u32"]]],[11,R[12],E,E,4,[[],["u64"]]],[11,R[13],E,E,4,[[],["u128"]]],[11,R[14],E,E,4,[[[R[4]]],["u64"]]],[11,R[15],E,E,4,[[[R[4]]],["u128"]]],[11,R[17],E,E,4,[[["u16"]]]],[11,R[19],E,E,4,[[["u32"]]]],[11,R[21],E,E,4,[[["u64"]]]],[11,R[22],E,E,4,[[["u128"]]]],[11,R[23],E,E,4,[[["u64"],[R[4]]]]],[11,R[24],E,E,4,[[["u128"],[R[4]]]]],[11,R[52],E,E,4,[[]]],[11,R[53],E,E,4,[[]]],[11,R[54],E,E,4,[[]]],[11,R[55],E,E,4,[[]]],[11,R[70],E,E,4,[[]]],[11,R[71],E,E,4,[[]]],[11,R[72],E,E,4,[[]]],[11,R[73],E,E,4,[[]]],[11,R[74],E,E,4,[[]]],[11,R[75],E,E,4,[[]]],[11,R[76],E,E,4,[[]]],[11,R[77],E,E,4,[[]]],[11,R[78],E,E,4,[[]]],[11,R[79],E,E,4,[[]]],[11,"eq",E,E,3,[[["self"],[R[80]]],["bool"]]],[11,"eq",E,E,4,[[[R[81]],["self"]],["bool"]]],[11,"clone",E,E,3,[[["self"]],[R[80]]]],[11,"clone",E,E,4,[[["self"]],[R[81]]]],[11,"cmp",E,E,3,[[["self"],[R[80]]],[R[82]]]],[11,"cmp",E,E,4,[[[R[81]],["self"]],[R[82]]]],[11,R[83],E,E,3,[[["self"],[R[80]]],[[R[82]],["option",[R[82]]]]]],[11,R[83],E,E,4,[[[R[81]],["self"]],[[R[82]],["option",[R[82]]]]]],[11,R[514],E,E,3,[[],[R[80]]]],[11,R[514],E,E,4,[[],[R[81]]]],[11,"fmt",E,E,3,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,4,[[[R[84]],["self"]],[R[1]]]],[11,"hash",E,E,3,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"read_u8",E,R[85],0,[[["self"]],[["u8"],[R[1],["u8"]]]]],[11,"read_i8",E,R[86],0,[[["self"]],[[R[1],["i8"]],["i8"]]]],[11,R[8],E,R[87],0,[[["self"]],[[R[1],["u16"]],["u16"]]]],[11,R[26],E,R[88],0,[[["self"]],[[R[1],["i16"]],["i16"]]]],[11,R[9],E,R[89],0,[[["self"]],[["u32"],[R[1],["u32"]]]]],[11,R[27],E,R[90],0,[[["self"]],[["i32"],[R[1],["i32"]]]]],[11,R[10],E,R[91],0,[[["self"]],[["u32"],[R[1],["u32"]]]]],[11,R[28],E,R[92],0,[[["self"]],[["i32"],[R[1],["i32"]]]]],[11,R[11],E,R[93],0,[[["self"]],[[R[1],["u64"]],["u64"]]]],[11,R[29],E,R[94],0,[[["self"]],[[R[1],["i64"]],["i64"]]]],[11,R[12],E,R[95],0,[[["self"]],[[R[1],["u64"]],["u64"]]]],[11,R[30],E,R[96],0,[[["self"]],[[R[1],["i64"]],["i64"]]]],[11,R[13],E,R[97],0,[[["self"]],[[R[1],["u128"]],["u128"]]]],[11,R[31],E,R[98],0,[[["self"]],[["i128"],[R[1],["i128"]]]]],[11,R[14],E,R[2],0,[[["self"],[R[4]]],[[R[1],["u64"]],["u64"]]]],[11,R[32],E,R[3],0,[[["self"],[R[4]]],[[R[1],["i64"]],["i64"]]]],[11,R[15],E,R[2],0,[[["self"],[R[4]]],[[R[1],["u128"]],["u128"]]]],[11,R[33],E,R[3],0,[[["self"],[R[4]]],[["i128"],[R[1],["i128"]]]]],[11,R[35],E,R[36],0,[[["self"]],[[R[1],["f32"]],["f32"]]]],[11,R[37],E,R[38],0,[[["self"]],[[R[1],["f64"]],["f64"]]]],[11,R[52],E,R[99],0,[[["self"]],[R[1]]]],[11,R[53],E,R[100],0,[[["self"]],[R[1]]]],[11,R[54],E,R[101],0,[[["self"]],[R[1]]]],[11,R[55],E,R[102],0,[[["self"]],[R[1]]]],[11,R[103],E,R[104],0,[[["self"]],[R[1]]]],[11,R[56],E,R[105],0,[[["self"]],[R[1]]]],[11,R[57],E,R[106],0,[[["self"]],[R[1]]]],[11,R[58],E,R[107],0,[[["self"]],[R[1]]]],[11,R[59],E,R[108],0,[[["self"]],[R[1]]]],[11,R[60],E,R[109],0,[[["self"]],[R[1]]]],[11,R[61],E,R[5],0,[[["self"]],[R[1]]]],[11,R[62],E,R[110],0,[[["self"]],[R[1]]]],[11,R[64],E,R[5],0,[[["self"]],[R[1]]]],[11,"write_u8",E,R[111],1,[[["self"],["u8"]],[R[1]]]],[11,"write_i8",E,R[112],1,[[["self"],["i8"]],[R[1]]]],[11,R[17],E,R[113],1,[[["self"],["u16"]],[R[1]]]],[11,R[39],E,R[114],1,[[["self"],["i16"]],[R[1]]]],[11,R[18],E,R[115],1,[[["u32"],["self"]],[R[1]]]],[11,R[40],E,R[116],1,[[["i32"],["self"]],[R[1]]]],[11,R[19],E,R[117],1,[[["u32"],["self"]],[R[1]]]],[11,R[41],E,R[118],1,[[["i32"],["self"]],[R[1]]]],[11,R[20],E,R[119],1,[[["self"],["u64"]],[R[1]]]],[11,R[42],E,R[120],1,[[["self"],["i64"]],[R[1]]]],[11,R[21],E,R[121],1,[[["self"],["u64"]],[R[1]]]],[11,R[43],E,R[122],1,[[["self"],["i64"]],[R[1]]]],[11,R[22],E,R[123],1,[[["self"],["u128"]],[R[1]]]],[11,R[44],E,R[124],1,[[["i128"],["self"]],[R[1]]]],[11,R[23],E,R[6],1,[[["self"],["u64"],[R[4]]],[R[1]]]],[11,R[45],E,R[7],1,[[["self"],["i64"],[R[4]]],[R[1]]]],[11,R[24],E,R[6],1,[[["self"],["u128"],[R[4]]],[R[1]]]],[11,R[46],E,R[7],1,[[["i128"],["self"],[R[4]]],[R[1]]]],[11,R[48],E,R[49],1,[[["self"],["f32"]],[R[1]]]],[11,R[50],E,R[51],1,[[["self"],["f64"]],[R[1]]]]],"p":[[8,R[125]],[8,R[126]],[8,R[127]],[4,R[128]],[4,R[129]]]};
searchIndex[R[130]]={"doc":R[400],"i":[[3,R[203],R[130],E,N,N],[12,"kind",E,E,0,N],[4,R[204],E,E,N,N],[13,"Empty",E,E,1,N],[13,"Invalid",E,E,1,N],[5,"clamp",E,R[401],N,[[[R[131]]],[R[131]]]],[0,"bounds",E,E,N,N],[8,R[598],R[402],R[303],N,N],[10,R[132],E,R[304],2,[[],["self"]]],[10,R[133],E,R[305],2,[[],["self"]]],[0,"cast",R[130],E,N,N],[5,"cast",R[403],R[374],N,[[["numcast"]],[["option"],["numcast"]]]],[8,R[205],E,R[357],N,N],[11,R[404],E,R[358],3,[[["self"]],[["option",["isize"]],["isize"]]]],[11,"to_i8",E,R[359],3,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16",E,R[360],3,[[["self"]],[["i16"],["option",["i16"]]]]],[11,"to_i32",E,R[361],3,[[["self"]],[["i32"],["option",["i32"]]]]],[10,"to_i64",E,R[362],3,[[["self"]],[["i64"],["option",["i64"]]]]],[11,R[506],E,R[363],3,[[["self"]],[["i128"],["option",["i128"]]]]],[11,R[405],E,R[364],3,[[["self"]],[[R[4]],["option",[R[4]]]]]],[11,"to_u8",E,R[365],3,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16",E,R[366],3,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"to_u32",E,R[367],3,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64",E,R[368],3,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,R[369],3,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32",E,R[370],3,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64",E,R[371],3,[[["self"]],[["f64"],["option",["f64"]]]]],[8,R[206],E,R[342],N,N],[11,R[249],E,R[343],4,[[["isize"]],["option"]]],[11,R[601],E,R[344],4,[[["i8"]],["option"]]],[11,R[406],E,R[345],4,[[["i16"]],["option"]]],[11,R[407],E,R[346],4,[[["i32"]],["option"]]],[10,R[408],E,R[347],4,[[["i64"]],["option"]]],[11,R[250],E,R[348],4,[[["i128"]],["option"]]],[11,R[251],E,R[349],4,[[[R[4]]],["option"]]],[11,R[602],E,R[350],4,[[["u8"]],["option"]]],[11,R[409],E,R[351],4,[[["u16"]],["option"]]],[11,R[410],E,R[352],4,[[["u32"]],["option"]]],[10,R[411],E,R[353],4,[[["u64"]],["option"]]],[11,R[252],E,R[354],4,[[["u128"]],["option"]]],[11,R[412],E,R[355],4,[[["f32"]],["option"]]],[11,R[413],E,R[356],4,[[["f64"]],["option"]]],[8,R[597],E,R[372],N,N],[10,"from",E,R[373],5,[[[R[253]]],["option"]]],[8,R[207],E,R[340],N,N],[10,"as_",E,R[341],6,[[],[T]]],[0,"float",R[130],E,N,N],[8,R[208],R[414],R[569],N,N],[10,R[415],E,R[570],7,[[],["self"]]],[10,R[134],E,R[571],7,[[],["self"]]],[10,"nan",E,R[572],7,[[],["self"]]],[10,R[416],E,R[135],7,[[],["self"]]],[10,R[132],E,R[136],7,[[],["self"]]],[10,R[137],E,R[138],7,[[],["self"]]],[10,R[430],E,R[139],7,[[],["self"]]],[10,R[133],E,R[140],7,[[],["self"]]],[11,"is_nan",E,R[573],7,[[],["bool"]]],[11,R[141],E,R[574],7,[[],["bool"]]],[11,R[142],E,R[575],7,[[],["bool"]]],[11,R[143],E,R[144],7,[[],["bool"]]],[10,R[417],E,R[145],7,[[],[R[146]]]],[11,"floor",E,R[147],7,[[],["self"]]],[11,"ceil",E,R[148],7,[[],["self"]]],[11,"round",E,R[149],7,[[],["self"]]],[11,"trunc",E,R[150],7,[[],["self"]]],[11,"fract",E,R[151],7,[[],["self"]]],[11,"abs",E,R[152],7,[[],["self"]]],[11,"signum",E,R[153],7,[[],["self"]]],[11,R[154],E,R[576],7,[[],["bool"]]],[11,R[155],E,R[577],7,[[],["bool"]]],[11,"min",E,R[160],7,[[],["self"]]],[11,"max",E,R[159],7,[[],["self"]]],[11,"recip",E,R[578],7,[[],["self"]]],[11,"powi",E,R[156],7,[[["i32"]],["self"]]],[10,R[157],E,R[579],7,[[],["self"]]],[10,R[158],E,R[580],7,[[],["self"]]],[10,R[161],E,R[162],7,[[]]],[8,"Float",E,R[306],N,N],[10,"nan",E,R[307],8,[[],["self"]]],[10,R[415],E,R[308],8,[[],["self"]]],[10,R[134],E,R[309],8,[[],["self"]]],[10,R[416],E,R[135],8,[[],["self"]]],[10,R[132],E,R[136],8,[[],["self"]]],[10,R[137],E,R[138],8,[[],["self"]]],[11,R[430],E,R[139],8,[[],["self"]]],[10,R[133],E,R[140],8,[[],["self"]]],[10,"is_nan",E,R[310],8,[[],["bool"]]],[10,R[141],E,R[311],8,[[],["bool"]]],[10,R[142],E,R[312],8,[[],["bool"]]],[10,R[143],E,R[144],8,[[],["bool"]]],[10,R[417],E,R[145],8,[[],[R[146]]]],[10,"floor",E,R[147],8,[[],["self"]]],[10,"ceil",E,R[148],8,[[],["self"]]],[10,"round",E,R[149],8,[[],["self"]]],[10,"trunc",E,R[150],8,[[],["self"]]],[10,"fract",E,R[151],8,[[],["self"]]],[10,"abs",E,R[152],8,[[],["self"]]],[10,"signum",E,R[153],8,[[],["self"]]],[10,R[154],E,R[170],8,[[],["bool"]]],[10,R[155],E,R[171],8,[[],["bool"]]],[10,R[423],E,R[166],8,[[],["self"]]],[10,"recip",E,R[172],8,[[],["self"]]],[10,"powi",E,R[156],8,[[["i32"]],["self"]]],[10,"powf",E,R[313],8,[[],["self"]]],[10,"sqrt",E,R[173],8,[[],["self"]]],[10,"exp",E,R[174],8,[[],["self"]]],[10,"exp2",E,R[175],8,[[],["self"]]],[10,"ln",E,R[176],8,[[],["self"]]],[10,"log",E,R[177],8,[[],["self"]]],[10,"log2",E,R[178],8,[[],["self"]]],[10,"log10",E,R[179],8,[[],["self"]]],[11,R[157],E,R[180],8,[[],["self"]]],[11,R[158],E,R[181],8,[[],["self"]]],[10,"max",E,R[159],8,[[],["self"]]],[10,"min",E,R[160],8,[[],["self"]]],[10,R[314],E,R[182],8,[[],["self"]]],[10,"cbrt",E,R[183],8,[[],["self"]]],[10,"hypot",E,R[184],8,[[],["self"]]],[10,"sin",E,R[185],8,[[],["self"]]],[10,"cos",E,R[186],8,[[],["self"]]],[10,"tan",E,R[187],8,[[],["self"]]],[10,"asin",E,R[188],8,[[],["self"]]],[10,"acos",E,R[189],8,[[],["self"]]],[10,"atan",E,R[190],8,[[],["self"]]],[10,"atan2",E,R[191],8,[[],["self"]]],[10,R[599],E,R[192],8,[[]]],[10,"exp_m1",E,R[193],8,[[],["self"]]],[10,"ln_1p",E,R[194],8,[[],["self"]]],[10,"sinh",E,R[195],8,[[],["self"]]],[10,"cosh",E,R[196],8,[[],["self"]]],[10,"tanh",E,R[197],8,[[],["self"]]],[10,"asinh",E,R[198],8,[[],["self"]]],[10,"acosh",E,R[199],8,[[],["self"]]],[10,"atanh",E,R[200],8,[[],["self"]]],[10,R[161],E,R[162],8,[[]]],[8,R[209],E,E,N,N],[10,"E",E,R[315],9,[[],["self"]]],[10,R[316],E,R[317],9,[[],["self"]]],[10,R[318],E,R[319],9,[[],["self"]]],[10,R[320],E,R[321],9,[[],["self"]]],[10,R[322],E,R[323],9,[[],["self"]]],[10,R[324],E,R[325],9,[[],["self"]]],[10,R[326],E,R[327],9,[[],["self"]]],[10,R[328],E,R[329],9,[[],["self"]]],[10,R[330],E,R[331],9,[[],["self"]]],[10,R[332],E,R[333],9,[[],["self"]]],[10,"LN_10",E,R[334],9,[[],["self"]]],[10,"LN_2",E,R[335],9,[[],["self"]]],[10,"LOG10_E",E,R[336],9,[[],["self"]]],[10,"LOG2_E",E,R[337],9,[[],["self"]]],[10,"PI",E,R[338],9,[[],["self"]]],[10,"SQRT_2",E,R[339],9,[[],["self"]]],[0,R[418],R[130],E,N,N],[5,"zero",R[419],R[263],N,[[],["zero"]]],[5,"one",E,R[264],N,[[],["one"]]],[8,"Zero",E,R[255],N,N],[10,"zero",E,R[256],10,[[],["self"]]],[11,R[420],E,R[257],10,[[["self"]]]],[10,R[507],E,R[258],10,[[["self"]],["bool"]]],[8,"One",E,R[259],N,N],[10,"one",E,R[260],11,[[],["self"]]],[11,R[600],E,R[261],11,[[["self"]]]],[11,"is_one",E,R[262],11,[[["self"]],["bool"]]],[0,"int",R[130],E,N,N],[8,R[603],R[421],R[375],N,N],[10,R[376],E,R[377],12,[[],["u32"]]],[10,R[378],E,R[379],12,[[],["u32"]]],[10,R[380],E,R[381],12,[[],["u32"]]],[10,R[382],E,R[383],12,[[],["u32"]]],[10,R[384],E,R[163],12,[[["u32"]],["self"]]],[10,R[385],E,R[164],12,[[["u32"]],["self"]]],[10,R[386],E,R[163],12,[[["u32"]],["self"]]],[10,R[387],E,R[164],12,[[["u32"]],["self"]]],[10,R[388],E,R[163],12,[[["u32"]],["self"]]],[10,R[389],E,R[164],12,[[["u32"]],["self"]]],[10,R[390],E,R[391],12,[[],["self"]]],[10,"from_be",E,R[392],12,[[],["self"]]],[10,"from_le",E,R[393],12,[[],["self"]]],[10,"to_be",E,R[394],12,[[],["self"]]],[10,"to_le",E,R[395],12,[[],["self"]]],[10,"pow",E,R[396],12,[[["u32"]],["self"]]],[0,"ops",R[130],E,N,N],[0,"checked",R[165],E,N,N],[8,R[210],R[422],R[276],N,N],[10,R[277],E,R[278],13,[[["self"]],["option"]]],[8,R[211],E,R[279],N,N],[10,R[280],E,R[281],14,[[["self"]],["option"]]],[8,R[212],E,R[282],N,N],[10,R[283],E,R[284],15,[[["self"]],["option"]]],[8,R[213],E,R[285],N,N],[10,R[286],E,R[287],16,[[["self"]],["option"]]],[8,R[214],E,R[581],N,N],[10,R[582],E,R[583],17,[[["self"]],["option"]]],[8,R[215],E,R[584],N,N],[10,R[585],E,R[586],18,[[["self"]],["option"]]],[8,R[216],E,R[288],N,N],[10,R[289],E,R[290],19,[[["u32"],["self"]],["option"]]],[8,R[217],E,R[291],N,N],[10,R[292],E,R[293],20,[[["u32"],["self"]],["option"]]],[0,"inv",R[165],E,N,N],[8,"Inv","num_traits::ops::inv",R[587],N,N],[16,"Output",E,R[169],21,N],[10,"inv",E,R[588],21,[[]]],[0,R[423],R[165],E,N,N],[8,"MulAdd","num_traits::ops::mul_add",R[166],N,N],[16,"Output",E,R[589],22,N],[10,R[423],E,R[167],22,[[["a"],["b"]]]],[8,R[218],E,R[590],N,N],[10,R[247],E,R[167],23,[[["self"],["a"],["b"]]]],[0,R[424],R[165],E,N,N],[8,R[219],R[425],R[271],N,N],[10,R[272],E,R[273],24,[[],["self"]]],[10,R[274],E,R[275],24,[[],["self"]]],[0,R[604],R[165],E,N,N],[8,R[220],R[426],R[294],N,N],[10,R[295],E,R[296],25,[[["self"]],["self"]]],[8,R[221],E,R[300],N,N],[10,R[301],E,R[302],26,[[["self"]],["self"]]],[8,R[222],E,R[297],N,N],[10,R[298],E,R[299],27,[[["self"]],["self"]]],[8,R[223],E,R[591],N,N],[10,R[592],E,R[593],28,[[["u32"],["self"]],["self"]]],[8,R[224],E,R[594],N,N],[10,R[595],E,R[596],29,[[["u32"],["self"]],["self"]]],[0,"pow",R[130],E,N,N],[5,"pow",R[427],R[397],N,[[["mul"],["one"],[R[4]],["clone"]],[["mul"],["one"],["clone"]]]],[5,R[398],E,R[399],N,[[["one"],[R[168]],[R[4]],["clone"]],[["option"],["one"],[R[168]],["clone"]]]],[8,"Pow",E,R[555],N,N],[16,"Output",E,R[169],30,N],[10,"pow",E,R[556],30,[[["rhs"]]]],[0,"real",R[130],E,N,N],[8,"Real",R[428],R[429],N,N],[10,R[132],E,R[136],31,[[],["self"]]],[10,R[137],E,R[138],31,[[],["self"]]],[10,R[430],E,R[139],31,[[],["self"]]],[10,R[133],E,R[140],31,[[],["self"]]],[10,"floor",E,R[147],31,[[],["self"]]],[10,"ceil",E,R[148],31,[[],["self"]]],[10,"round",E,R[149],31,[[],["self"]]],[10,"trunc",E,R[150],31,[[],["self"]]],[10,"fract",E,R[151],31,[[],["self"]]],[10,"abs",E,R[152],31,[[],["self"]]],[10,"signum",E,R[153],31,[[],["self"]]],[10,R[154],E,R[170],31,[[],["bool"]]],[10,R[155],E,R[171],31,[[],["bool"]]],[10,R[423],E,R[166],31,[[],["self"]]],[10,"recip",E,R[172],31,[[],["self"]]],[10,"powi",E,R[156],31,[[["i32"]],["self"]]],[10,"powf",E,R[431],31,[[],["self"]]],[10,"sqrt",E,R[173],31,[[],["self"]]],[10,"exp",E,R[174],31,[[],["self"]]],[10,"exp2",E,R[175],31,[[],["self"]]],[10,"ln",E,R[176],31,[[],["self"]]],[10,"log",E,R[177],31,[[],["self"]]],[10,"log2",E,R[178],31,[[],["self"]]],[10,"log10",E,R[179],31,[[],["self"]]],[10,R[157],E,R[180],31,[[],["self"]]],[10,R[158],E,R[181],31,[[],["self"]]],[10,"max",E,R[159],31,[[],["self"]]],[10,"min",E,R[160],31,[[],["self"]]],[10,R[314],E,R[182],31,[[],["self"]]],[10,"cbrt",E,R[183],31,[[],["self"]]],[10,"hypot",E,R[184],31,[[],["self"]]],[10,"sin",E,R[185],31,[[],["self"]]],[10,"cos",E,R[186],31,[[],["self"]]],[10,"tan",E,R[187],31,[[],["self"]]],[10,"asin",E,R[188],31,[[],["self"]]],[10,"acos",E,R[189],31,[[],["self"]]],[10,"atan",E,R[190],31,[[],["self"]]],[10,"atan2",E,R[191],31,[[],["self"]]],[10,R[599],E,R[192],31,[[]]],[10,"exp_m1",E,R[193],31,[[],["self"]]],[10,"ln_1p",E,R[194],31,[[],["self"]]],[10,"sinh",E,R[195],31,[[],["self"]]],[10,"cosh",E,R[196],31,[[],["self"]]],[10,"tanh",E,R[197],31,[[],["self"]]],[10,"asinh",E,R[198],31,[[],["self"]]],[10,"acosh",E,R[199],31,[[],["self"]]],[10,"atanh",E,R[200],31,[[],["self"]]],[0,"sign",R[130],E,N,N],[5,"abs",R[432],R[201],N,[[["signed"]],["signed"]]],[5,R[314],E,R[182],N,[[["signed"]],["signed"]]],[5,"signum",E,R[202],N,[[["signed"]],["signed"]]],[8,"Signed",E,R[265],N,N],[10,"abs",E,R[201],32,[[["self"]],["self"]]],[10,R[314],E,R[182],32,[[["self"]],["self"]]],[10,"signum",E,R[202],32,[[["self"]],["self"]]],[10,R[266],E,R[267],32,[[["self"]],["bool"]]],[10,R[268],E,R[269],32,[[["self"]],["bool"]]],[8,R[433],E,R[270],N,N],[8,"Num",R[130],R[434],N,N],[16,R[435],E,E,33,N],[10,R[254],E,R[436],33,[[["u32"],["str"]],[R[1]]]],[8,"NumOps",E,R[437],N,N],[8,"NumRef",E,R[438],N,N],[8,"RefNum",E,R[439],N,N],[8,R[440],E,R[441],N,N],[8,R[442],E,R[443],N,N],[8,R[444],E,R[445],N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,"into",E,E,0,[[],[U]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[238],E,E,0,[[["self"]],["string"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[67],E,E,1,[[[U]],[R[1]]]],[11,R[69],E,E,1,[[],[R[1]]]],[11,"into",E,E,1,[[],[U]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[68],E,E,1,[[["self"]],[T]]],[11,R[236],E,E,1,[[["self"]],["typeid"]]],[11,"fmt",E,E,1,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]]],"p":[[3,R[203]],[4,R[204]],[8,R[598]],[8,R[205]],[8,R[206]],[8,R[597]],[8,R[207]],[8,R[208]],[8,"Float"],[8,R[209]],[8,"Zero"],[8,"One"],[8,R[603]],[8,R[210]],[8,R[211]],[8,R[212]],[8,R[213]],[8,R[214]],[8,R[215]],[8,R[216]],[8,R[217]],[8,"Inv"],[8,"MulAdd"],[8,R[218]],[8,R[219]],[8,R[220]],[8,R[221]],[8,R[222]],[8,R[223]],[8,R[224]],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]};
searchIndex[R[130]]={"doc":R[400],"i":[[8,R[598],R[130],R[303],N,N],[10,R[132],E,R[304],0,[[],["self"]]],[10,R[133],E,R[305],0,[[],["self"]]],[8,"Float",E,R[306],N,N],[10,"nan",E,R[307],1,[[],["self"]]],[10,R[415],E,R[308],1,[[],["self"]]],[10,R[134],E,R[309],1,[[],["self"]]],[10,R[416],E,R[135],1,[[],["self"]]],[10,R[132],E,R[136],1,[[],["self"]]],[10,R[137],E,R[138],1,[[],["self"]]],[11,R[430],E,R[139],1,[[],["self"]]],[10,R[133],E,R[140],1,[[],["self"]]],[10,"is_nan",E,R[310],1,[[],["bool"]]],[10,R[141],E,R[311],1,[[],["bool"]]],[10,R[142],E,R[312],1,[[],["bool"]]],[10,R[143],E,R[144],1,[[],["bool"]]],[10,R[417],E,R[145],1,[[],[R[146]]]],[10,"floor",E,R[147],1,[[],["self"]]],[10,"ceil",E,R[148],1,[[],["self"]]],[10,"round",E,R[149],1,[[],["self"]]],[10,"trunc",E,R[150],1,[[],["self"]]],[10,"fract",E,R[151],1,[[],["self"]]],[10,"abs",E,R[152],1,[[],["self"]]],[10,"signum",E,R[153],1,[[],["self"]]],[10,R[154],E,R[170],1,[[],["bool"]]],[10,R[155],E,R[171],1,[[],["bool"]]],[10,R[423],E,R[166],1,[[],["self"]]],[10,"recip",E,R[172],1,[[],["self"]]],[10,"powi",E,R[156],1,[[["i32"]],["self"]]],[10,"powf",E,R[313],1,[[],["self"]]],[10,"sqrt",E,R[173],1,[[],["self"]]],[10,"exp",E,R[174],1,[[],["self"]]],[10,"exp2",E,R[175],1,[[],["self"]]],[10,"ln",E,R[176],1,[[],["self"]]],[10,"log",E,R[177],1,[[],["self"]]],[10,"log2",E,R[178],1,[[],["self"]]],[10,"log10",E,R[179],1,[[],["self"]]],[11,R[157],E,R[180],1,[[],["self"]]],[11,R[158],E,R[181],1,[[],["self"]]],[10,"max",E,R[159],1,[[],["self"]]],[10,"min",E,R[160],1,[[],["self"]]],[10,R[314],E,R[182],1,[[],["self"]]],[10,"cbrt",E,R[183],1,[[],["self"]]],[10,"hypot",E,R[184],1,[[],["self"]]],[10,"sin",E,R[185],1,[[],["self"]]],[10,"cos",E,R[186],1,[[],["self"]]],[10,"tan",E,R[187],1,[[],["self"]]],[10,"asin",E,R[188],1,[[],["self"]]],[10,"acos",E,R[189],1,[[],["self"]]],[10,"atan",E,R[190],1,[[],["self"]]],[10,"atan2",E,R[191],1,[[],["self"]]],[10,R[599],E,R[192],1,[[]]],[10,"exp_m1",E,R[193],1,[[],["self"]]],[10,"ln_1p",E,R[194],1,[[],["self"]]],[10,"sinh",E,R[195],1,[[],["self"]]],[10,"cosh",E,R[196],1,[[],["self"]]],[10,"tanh",E,R[197],1,[[],["self"]]],[10,"asinh",E,R[198],1,[[],["self"]]],[10,"acosh",E,R[199],1,[[],["self"]]],[10,"atanh",E,R[200],1,[[],["self"]]],[10,R[161],E,R[162],1,[[]]],[8,R[209],E,E,N,N],[10,"E",E,R[315],2,[[],["self"]]],[10,R[316],E,R[317],2,[[],["self"]]],[10,R[318],E,R[319],2,[[],["self"]]],[10,R[320],E,R[321],2,[[],["self"]]],[10,R[322],E,R[323],2,[[],["self"]]],[10,R[324],E,R[325],2,[[],["self"]]],[10,R[326],E,R[327],2,[[],["self"]]],[10,R[328],E,R[329],2,[[],["self"]]],[10,R[330],E,R[331],2,[[],["self"]]],[10,R[332],E,R[333],2,[[],["self"]]],[10,"LN_10",E,R[334],2,[[],["self"]]],[10,"LN_2",E,R[335],2,[[],["self"]]],[10,"LOG10_E",E,R[336],2,[[],["self"]]],[10,"LOG2_E",E,R[337],2,[[],["self"]]],[10,"PI",E,R[338],2,[[],["self"]]],[10,"SQRT_2",E,R[339],2,[[],["self"]]],[8,"Zero",E,R[255],N,N],[10,"zero",E,R[256],3,[[],["self"]]],[11,R[420],E,R[257],3,[[["self"]]]],[10,R[507],E,R[258],3,[[["self"]],["bool"]]],[8,"One",E,R[259],N,N],[10,"one",E,R[260],4,[[],["self"]]],[11,R[600],E,R[261],4,[[["self"]]]],[11,"is_one",E,R[262],4,[[["self"]],["bool"]]],[5,"zero",E,R[263],N,[[],[T]]],[5,"one",E,R[264],N,[[],[T]]],[8,R[210],E,R[276],N,N],[10,R[277],E,R[278],5,[[["self"]],["option"]]],[8,R[211],E,R[279],N,N],[10,R[280],E,R[281],6,[[["self"]],["option"]]],[8,R[212],E,R[282],N,N],[10,R[283],E,R[284],7,[[["self"]],["option"]]],[8,R[213],E,R[285],N,N],[10,R[286],E,R[287],8,[[["self"]],["option"]]],[8,R[216],E,R[288],N,N],[10,R[289],E,R[290],9,[[["u32"],["self"]],["option"]]],[8,R[217],E,R[291],N,N],[10,R[292],E,R[293],10,[[["u32"],["self"]],["option"]]],[8,R[220],E,R[294],N,N],[10,R[295],E,R[296],11,[[["self"]],["self"]]],[8,R[222],E,R[297],N,N],[10,R[298],E,R[299],12,[[["self"]],["self"]]],[8,R[221],E,R[300],N,N],[10,R[301],E,R[302],13,[[["self"]],["self"]]],[8,R[219],E,R[271],N,N],[10,R[272],E,R[273],14,[[],["self"]]],[10,R[274],E,R[275],14,[[],["self"]]],[8,"Signed",E,R[265],N,N],[10,"abs",E,R[201],15,[[["self"]],["self"]]],[10,R[314],E,R[182],15,[[["self"]],["self"]]],[10,"signum",E,R[202],15,[[["self"]],["self"]]],[10,R[266],E,R[267],15,[[["self"]],["bool"]]],[10,R[268],E,R[269],15,[[["self"]],["bool"]]],[8,R[433],E,R[270],N,N],[5,"abs",E,R[201],N,[[[T]],[T]]],[5,R[314],E,R[182],N,[[[T]],[T]]],[5,"signum",E,R[202],N,[[[T]],[T]]],[8,R[207],E,R[340],N,N],[10,"as_",E,R[341],16,[[],[T]]],[8,R[206],E,R[342],N,N],[11,R[249],E,R[343],17,[[["isize"]],["option"]]],[11,R[601],E,R[344],17,[[["i8"]],["option"]]],[11,R[406],E,R[345],17,[[["i16"]],["option"]]],[11,R[407],E,R[346],17,[[["i32"]],["option"]]],[10,R[408],E,R[347],17,[[["i64"]],["option"]]],[11,R[250],E,R[348],17,[[["i128"]],["option"]]],[11,R[251],E,R[349],17,[[[R[4]]],["option"]]],[11,R[602],E,R[350],17,[[["u8"]],["option"]]],[11,R[409],E,R[351],17,[[["u16"]],["option"]]],[11,R[410],E,R[352],17,[[["u32"]],["option"]]],[10,R[411],E,R[353],17,[[["u64"]],["option"]]],[11,R[252],E,R[354],17,[[["u128"]],["option"]]],[11,R[412],E,R[355],17,[[["f32"]],["option"]]],[11,R[413],E,R[356],17,[[["f64"]],["option"]]],[8,R[205],E,R[357],N,N],[11,R[404],E,R[358],18,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8",E,R[359],18,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16",E,R[360],18,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32",E,R[361],18,[[["self"]],[["i32"],["option",["i32"]]]]],[10,"to_i64",E,R[362],18,[[["self"]],[["option",["i64"]],["i64"]]]],[11,R[506],E,R[363],18,[[["self"]],[["i128"],["option",["i128"]]]]],[11,R[405],E,R[364],18,[[["self"]],[["option",[R[4]]],[R[4]]]]],[11,"to_u8",E,R[365],18,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"to_u16",E,R[366],18,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"to_u32",E,R[367],18,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64",E,R[368],18,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,R[369],18,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32",E,R[370],18,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64",E,R[371],18,[[["self"]],[["f64"],["option",["f64"]]]]],[8,R[597],E,R[372],N,N],[10,"from",E,R[373],19,[[[T]],["option"]]],[5,"cast",E,R[374],N,[[[T]],["option"]]],[8,R[603],E,R[375],N,N],[10,R[376],E,R[377],20,[[],["u32"]]],[10,R[378],E,R[379],20,[[],["u32"]]],[10,R[380],E,R[381],20,[[],["u32"]]],[10,R[382],E,R[383],20,[[],["u32"]]],[10,R[384],E,R[163],20,[[["u32"]],["self"]]],[10,R[385],E,R[164],20,[[["u32"]],["self"]]],[10,R[386],E,R[163],20,[[["u32"]],["self"]]],[10,R[387],E,R[164],20,[[["u32"]],["self"]]],[10,R[388],E,R[163],20,[[["u32"]],["self"]]],[10,R[389],E,R[164],20,[[["u32"]],["self"]]],[10,R[390],E,R[391],20,[[],["self"]]],[10,"from_be",E,R[392],20,[[],["self"]]],[10,"from_le",E,R[393],20,[[],["self"]]],[10,"to_be",E,R[394],20,[[],["self"]]],[10,"to_le",E,R[395],20,[[],["self"]]],[10,"pow",E,R[396],20,[[["u32"]],["self"]]],[5,"pow",E,R[397],N,[[[R[4]],[T]],[T]]],[5,R[398],E,R[399],N,[[[R[4]],[T]],["option"]]],[8,"Num",E,R[434],N,N],[16,R[435],E,E,21,N],[10,R[254],E,R[436],21,[[["u32"],["str"]],[R[1]]]],[8,"NumOps",E,R[437],N,N],[8,"NumRef",E,R[438],N,N],[8,"RefNum",E,R[439],N,N],[8,R[440],E,R[441],N,N],[8,R[442],E,R[443],N,N],[8,R[444],E,R[445],N,N],[4,R[204],E,E,N,N],[13,"Empty",E,E,22,N],[13,"Invalid",E,E,22,N],[3,R[203],E,E,N,N],[12,"kind",E,E,23,N],[5,"clamp",E,R[401],N,[[[T]],[T]]],[0,R[418],E,E,N,N],[8,"Zero",R[419],R[255],N,N],[10,"zero",E,R[256],3,[[],["self"]]],[11,R[420],E,R[257],3,[[["self"]]]],[10,R[507],E,R[258],3,[[["self"]],["bool"]]],[8,"One",E,R[259],N,N],[10,"one",E,R[260],4,[[],["self"]]],[11,R[600],E,R[261],4,[[["self"]]]],[11,"is_one",E,R[262],4,[[["self"]],["bool"]]],[5,"zero",E,R[263],N,[[],[T]]],[5,"one",E,R[264],N,[[],[T]]],[0,"sign",R[130],E,N,N],[8,"Signed",R[432],R[265],N,N],[10,"abs",E,R[201],15,[[["self"]],["self"]]],[10,R[314],E,R[182],15,[[["self"]],["self"]]],[10,"signum",E,R[202],15,[[["self"]],["self"]]],[10,R[266],E,R[267],15,[[["self"]],["bool"]]],[10,R[268],E,R[269],15,[[["self"]],["bool"]]],[8,R[433],E,R[270],N,N],[5,"abs",E,R[201],N,[[[T]],[T]]],[5,R[314],E,R[182],N,[[[T]],[T]]],[5,"signum",E,R[202],N,[[[T]],[T]]],[0,"ops",R[130],E,N,N],[0,R[424],R[165],E,N,N],[8,R[219],R[425],R[271],N,N],[10,R[272],E,R[273],14,[[],["self"]]],[10,R[274],E,R[275],14,[[],["self"]]],[0,"checked",R[165],E,N,N],[8,R[210],R[422],R[276],N,N],[10,R[277],E,R[278],5,[[["self"]],["option"]]],[8,R[211],E,R[279],N,N],[10,R[280],E,R[281],6,[[["self"]],["option"]]],[8,R[212],E,R[282],N,N],[10,R[283],E,R[284],7,[[["self"]],["option"]]],[8,R[213],E,R[285],N,N],[10,R[286],E,R[287],8,[[["self"]],["option"]]],[8,R[216],E,R[288],N,N],[10,R[289],E,R[290],9,[[["u32"],["self"]],["option"]]],[8,R[217],E,R[291],N,N],[10,R[292],E,R[293],10,[[["u32"],["self"]],["option"]]],[0,R[604],R[165],E,N,N],[8,R[220],R[426],R[294],N,N],[10,R[295],E,R[296],11,[[["self"]],["self"]]],[8,R[222],E,R[297],N,N],[10,R[298],E,R[299],12,[[["self"]],["self"]]],[8,R[221],E,R[300],N,N],[10,R[301],E,R[302],13,[[["self"]],["self"]]],[0,"bounds",R[130],E,N,N],[8,R[598],R[402],R[303],N,N],[10,R[132],E,R[304],0,[[],["self"]]],[10,R[133],E,R[305],0,[[],["self"]]],[0,"float",R[130],E,N,N],[8,"Float",R[414],R[306],N,N],[10,"nan",E,R[307],1,[[],["self"]]],[10,R[415],E,R[308],1,[[],["self"]]],[10,R[134],E,R[309],1,[[],["self"]]],[10,R[416],E,R[135],1,[[],["self"]]],[10,R[132],E,R[136],1,[[],["self"]]],[10,R[137],E,R[138],1,[[],["self"]]],[11,R[430],E,R[139],1,[[],["self"]]],[10,R[133],E,R[140],1,[[],["self"]]],[10,"is_nan",E,R[310],1,[[],["bool"]]],[10,R[141],E,R[311],1,[[],["bool"]]],[10,R[142],E,R[312],1,[[],["bool"]]],[10,R[143],E,R[144],1,[[],["bool"]]],[10,R[417],E,R[145],1,[[],[R[146]]]],[10,"floor",E,R[147],1,[[],["self"]]],[10,"ceil",E,R[148],1,[[],["self"]]],[10,"round",E,R[149],1,[[],["self"]]],[10,"trunc",E,R[150],1,[[],["self"]]],[10,"fract",E,R[151],1,[[],["self"]]],[10,"abs",E,R[152],1,[[],["self"]]],[10,"signum",E,R[153],1,[[],["self"]]],[10,R[154],E,R[170],1,[[],["bool"]]],[10,R[155],E,R[171],1,[[],["bool"]]],[10,R[423],E,R[166],1,[[],["self"]]],[10,"recip",E,R[172],1,[[],["self"]]],[10,"powi",E,R[156],1,[[["i32"]],["self"]]],[10,"powf",E,R[313],1,[[],["self"]]],[10,"sqrt",E,R[173],1,[[],["self"]]],[10,"exp",E,R[174],1,[[],["self"]]],[10,"exp2",E,R[175],1,[[],["self"]]],[10,"ln",E,R[176],1,[[],["self"]]],[10,"log",E,R[177],1,[[],["self"]]],[10,"log2",E,R[178],1,[[],["self"]]],[10,"log10",E,R[179],1,[[],["self"]]],[11,R[157],E,R[180],1,[[],["self"]]],[11,R[158],E,R[181],1,[[],["self"]]],[10,"max",E,R[159],1,[[],["self"]]],[10,"min",E,R[160],1,[[],["self"]]],[10,R[314],E,R[182],1,[[],["self"]]],[10,"cbrt",E,R[183],1,[[],["self"]]],[10,"hypot",E,R[184],1,[[],["self"]]],[10,"sin",E,R[185],1,[[],["self"]]],[10,"cos",E,R[186],1,[[],["self"]]],[10,"tan",E,R[187],1,[[],["self"]]],[10,"asin",E,R[188],1,[[],["self"]]],[10,"acos",E,R[189],1,[[],["self"]]],[10,"atan",E,R[190],1,[[],["self"]]],[10,"atan2",E,R[191],1,[[],["self"]]],[10,R[599],E,R[192],1,[[]]],[10,"exp_m1",E,R[193],1,[[],["self"]]],[10,"ln_1p",E,R[194],1,[[],["self"]]],[10,"sinh",E,R[195],1,[[],["self"]]],[10,"cosh",E,R[196],1,[[],["self"]]],[10,"tanh",E,R[197],1,[[],["self"]]],[10,"asinh",E,R[198],1,[[],["self"]]],[10,"acosh",E,R[199],1,[[],["self"]]],[10,"atanh",E,R[200],1,[[],["self"]]],[10,R[161],E,R[162],1,[[]]],[8,R[209],E,E,N,N],[10,"E",E,R[315],2,[[],["self"]]],[10,R[316],E,R[317],2,[[],["self"]]],[10,R[318],E,R[319],2,[[],["self"]]],[10,R[320],E,R[321],2,[[],["self"]]],[10,R[322],E,R[323],2,[[],["self"]]],[10,R[324],E,R[325],2,[[],["self"]]],[10,R[326],E,R[327],2,[[],["self"]]],[10,R[328],E,R[329],2,[[],["self"]]],[10,R[330],E,R[331],2,[[],["self"]]],[10,R[332],E,R[333],2,[[],["self"]]],[10,"LN_10",E,R[334],2,[[],["self"]]],[10,"LN_2",E,R[335],2,[[],["self"]]],[10,"LOG10_E",E,R[336],2,[[],["self"]]],[10,"LOG2_E",E,R[337],2,[[],["self"]]],[10,"PI",E,R[338],2,[[],["self"]]],[10,"SQRT_2",E,R[339],2,[[],["self"]]],[0,"real",R[130],E,N,N],[8,"Real",R[428],R[429],N,N],[10,R[132],E,R[136],24,[[],["self"]]],[10,R[137],E,R[138],24,[[],["self"]]],[10,R[430],E,R[139],24,[[],["self"]]],[10,R[133],E,R[140],24,[[],["self"]]],[10,"floor",E,R[147],24,[[],["self"]]],[10,"ceil",E,R[148],24,[[],["self"]]],[10,"round",E,R[149],24,[[],["self"]]],[10,"trunc",E,R[150],24,[[],["self"]]],[10,"fract",E,R[151],24,[[],["self"]]],[10,"abs",E,R[152],24,[[],["self"]]],[10,"signum",E,R[153],24,[[],["self"]]],[10,R[154],E,R[170],24,[[],["bool"]]],[10,R[155],E,R[171],24,[[],["bool"]]],[10,R[423],E,R[166],24,[[],["self"]]],[10,"recip",E,R[172],24,[[],["self"]]],[10,"powi",E,R[156],24,[[["i32"]],["self"]]],[10,"powf",E,R[431],24,[[],["self"]]],[10,"sqrt",E,R[173],24,[[],["self"]]],[10,"exp",E,R[174],24,[[],["self"]]],[10,"exp2",E,R[175],24,[[],["self"]]],[10,"ln",E,R[176],24,[[],["self"]]],[10,"log",E,R[177],24,[[],["self"]]],[10,"log2",E,R[178],24,[[],["self"]]],[10,"log10",E,R[179],24,[[],["self"]]],[10,R[157],E,R[180],24,[[],["self"]]],[10,R[158],E,R[181],24,[[],["self"]]],[10,"max",E,R[159],24,[[],["self"]]],[10,"min",E,R[160],24,[[],["self"]]],[10,R[314],E,R[182],24,[[],["self"]]],[10,"cbrt",E,R[183],24,[[],["self"]]],[10,"hypot",E,R[184],24,[[],["self"]]],[10,"sin",E,R[185],24,[[],["self"]]],[10,"cos",E,R[186],24,[[],["self"]]],[10,"tan",E,R[187],24,[[],["self"]]],[10,"asin",E,R[188],24,[[],["self"]]],[10,"acos",E,R[189],24,[[],["self"]]],[10,"atan",E,R[190],24,[[],["self"]]],[10,"atan2",E,R[191],24,[[],["self"]]],[10,R[599],E,R[192],24,[[]]],[10,"exp_m1",E,R[193],24,[[],["self"]]],[10,"ln_1p",E,R[194],24,[[],["self"]]],[10,"sinh",E,R[195],24,[[],["self"]]],[10,"cosh",E,R[196],24,[[],["self"]]],[10,"tanh",E,R[197],24,[[],["self"]]],[10,"asinh",E,R[198],24,[[],["self"]]],[10,"acosh",E,R[199],24,[[],["self"]]],[10,"atanh",E,R[200],24,[[],["self"]]],[0,"cast",R[130],E,N,N],[8,R[207],R[403],R[340],N,N],[10,"as_",E,R[341],16,[[],[T]]],[8,R[206],E,R[342],N,N],[11,R[249],E,R[343],17,[[["isize"]],["option"]]],[11,R[601],E,R[344],17,[[["i8"]],["option"]]],[11,R[406],E,R[345],17,[[["i16"]],["option"]]],[11,R[407],E,R[346],17,[[["i32"]],["option"]]],[10,R[408],E,R[347],17,[[["i64"]],["option"]]],[11,R[250],E,R[348],17,[[["i128"]],["option"]]],[11,R[251],E,R[349],17,[[[R[4]]],["option"]]],[11,R[602],E,R[350],17,[[["u8"]],["option"]]],[11,R[409],E,R[351],17,[[["u16"]],["option"]]],[11,R[410],E,R[352],17,[[["u32"]],["option"]]],[10,R[411],E,R[353],17,[[["u64"]],["option"]]],[11,R[252],E,R[354],17,[[["u128"]],["option"]]],[11,R[412],E,R[355],17,[[["f32"]],["option"]]],[11,R[413],E,R[356],17,[[["f64"]],["option"]]],[8,R[205],E,R[357],N,N],[11,R[404],E,R[358],18,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8",E,R[359],18,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16",E,R[360],18,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32",E,R[361],18,[[["self"]],[["i32"],["option",["i32"]]]]],[10,"to_i64",E,R[362],18,[[["self"]],[["option",["i64"]],["i64"]]]],[11,R[506],E,R[363],18,[[["self"]],[["i128"],["option",["i128"]]]]],[11,R[405],E,R[364],18,[[["self"]],[["option",[R[4]]],[R[4]]]]],[11,"to_u8",E,R[365],18,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"to_u16",E,R[366],18,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"to_u32",E,R[367],18,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64",E,R[368],18,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,R[369],18,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32",E,R[370],18,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64",E,R[371],18,[[["self"]],[["f64"],["option",["f64"]]]]],[8,R[597],E,R[372],N,N],[10,"from",E,R[373],19,[[[T]],["option"]]],[5,"cast",E,R[374],N,[[[T]],["option"]]],[0,"int",R[130],E,N,N],[8,R[603],R[421],R[375],N,N],[10,R[376],E,R[377],20,[[],["u32"]]],[10,R[378],E,R[379],20,[[],["u32"]]],[10,R[380],E,R[381],20,[[],["u32"]]],[10,R[382],E,R[383],20,[[],["u32"]]],[10,R[384],E,R[163],20,[[["u32"]],["self"]]],[10,R[385],E,R[164],20,[[["u32"]],["self"]]],[10,R[386],E,R[163],20,[[["u32"]],["self"]]],[10,R[387],E,R[164],20,[[["u32"]],["self"]]],[10,R[388],E,R[163],20,[[["u32"]],["self"]]],[10,R[389],E,R[164],20,[[["u32"]],["self"]]],[10,R[390],E,R[391],20,[[],["self"]]],[10,"from_be",E,R[392],20,[[],["self"]]],[10,"from_le",E,R[393],20,[[],["self"]]],[10,"to_be",E,R[394],20,[[],["self"]]],[10,"to_le",E,R[395],20,[[],["self"]]],[10,"pow",E,R[396],20,[[["u32"]],["self"]]],[0,"pow",R[130],E,N,N],[5,"pow",R[427],R[397],N,[[[R[4]],[T]],[T]]],[5,R[398],E,R[399],N,[[[R[4]],[T]],["option"]]],[11,"from",R[130],E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[67],E,E,22,[[[U]],[R[1]]]],[11,"borrow",E,E,22,[[["self"]],[T]]],[11,R[236],E,E,22,[[["self"]],["typeid"]]],[11,R[68],E,E,22,[[["self"]],[T]]],[11,R[69],E,E,22,[[],[R[1]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[238],E,E,23,[[["self"]],["string"]]],[11,R[67],E,E,23,[[[U]],[R[1]]]],[11,"borrow",E,E,23,[[["self"]],[T]]],[11,R[236],E,E,23,[[["self"]],["typeid"]]],[11,R[68],E,E,23,[[["self"]],[T]]],[11,R[69],E,E,23,[[],[R[1]]]],[11,"fmt",E,E,22,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,23,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"fmt",E,E,23,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]]],"p":[[8,R[598]],[8,"Float"],[8,R[209]],[8,"Zero"],[8,"One"],[8,R[210]],[8,R[211]],[8,R[212]],[8,R[213]],[8,R[216]],[8,R[217]],[8,R[220]],[8,R[222]],[8,R[221]],[8,R[219]],[8,"Signed"],[8,R[207]],[8,R[206]],[8,R[205]],[8,R[597]],[8,R[603]],[8,"Num"],[4,R[204]],[3,R[203]],[8,"Real"]]};
searchIndex[R[225]]={"doc":"Integer trait and functions.","i":[[3,R[234],R[225],R[605],N,N],[12,"gcd",E,E,0,N],[12,"x",E,E,0,N],[12,"y",E,E,0,N],[3,R[235],E,R[606],N,N],[5,"cbrt",E,R[229],N,[[["roots"]],["roots"]]],[5,R[492],E,R[227],N,[[["u32"],["roots"]],["roots"]]],[5,"sqrt",E,R[228],N,[[["roots"]],["roots"]]],[5,R[607],E,R[608],N,[[[R[226]]]]],[5,R[230],E,R[609],N,[[[R[226]]],[R[226]]]],[5,R[231],E,R[610],N,[[[R[226]]],[R[226]]]],[5,R[232],E,R[611],N,[[[R[226]]]]],[5,R[545],E,R[612],N,[[[R[226]]],[R[226]]]],[5,"gcd",E,R[493],N,[[[R[226]]],[R[226]]]],[5,"lcm",E,R[494],N,[[[R[226]]],[R[226]]]],[5,"gcd_lcm",E,R[613],N,[[[R[226]]]]],[5,"binomial",E,R[614],N,[[[R[226]],["clone"]],[[R[226]],["clone"]]]],[5,R[615],E,R[616],N,[[],[[R[226]],["clone"]]]],[8,"Roots",E,R[617],N,N],[10,R[492],E,R[227],1,[[["u32"],["self"]],["self"]]],[11,"sqrt",E,R[228],1,[[["self"]],["self"]]],[11,"cbrt",E,R[229],1,[[["self"]],["self"]]],[8,"Integer",E,E,N,N],[10,R[230],E,R[526],2,[[["self"]],["self"]]],[10,R[231],E,R[527],2,[[["self"]],["self"]]],[11,R[545],E,R[528],2,[[["self"]],["self"]]],[10,"gcd",E,R[529],2,[[["self"]],["self"]]],[10,"lcm",E,R[530],2,[[["self"]],["self"]]],[11,"gcd_lcm",E,R[531],2,[[["self"]]]],[11,R[532],E,R[533],2,[[["self"]],[R[233]]]],[11,R[534],E,R[535],2,[[["self"]]]],[10,R[682],E,R[495],2,[[["self"]],["bool"]]],[10,R[496],E,R[536],2,[[["self"]],["bool"]]],[10,R[683],E,R[537],2,[[["self"]],["bool"]]],[10,"is_odd",E,R[538],2,[[["self"]],["bool"]]],[10,R[607],E,R[539],2,[[["self"]]]],[11,R[232],E,R[540],2,[[["self"]]]],[11,R[541],E,R[542],2,[[["self"]],["self"]]],[11,R[543],E,R[544],2,[[["self"]],["self"]]],[11,"new",E,R[618],3,[[[T]],[R[619]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,"into",E,E,0,[[],[U]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[65],E,E,0,[[["self"]],[T]]],[11,R[66],E,E,0,[[[T],["self"]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[446],E,E,3,[[],["i"]]],[11,R[67],E,E,3,[[[U]],[R[1]]]],[11,R[69],E,E,3,[[],[R[1]]]],[11,"into",E,E,3,[[],[U]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[68],E,E,3,[[["self"]],[T]]],[11,R[236],E,E,3,[[["self"]],["typeid"]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"eq",E,E,0,[[["self"],[R[233]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[233]]],["bool"]]],[11,"next",E,E,3,[[["self"]],["option"]]],[11,"clone",E,E,0,[[["self"]],[R[233]]]],[11,"sqrt",E,R[228],1,[[["self"]],["self"]]],[11,"cbrt",E,R[229],1,[[["self"]],["self"]]]],"p":[[3,R[234]],[8,"Roots"],[8,"Integer"],[3,R[235]]]};
searchIndex[R[237]]={"doc":"Complex numbers.","i":[[3,"Complex",R[237],R[523],N,N],[12,"re",E,R[524],0,N],[12,"im",E,R[525],0,N],[3,R[248],E,E,N,N],[6,R[620],E,E,N,N],[6,R[621],E,E,N,N],[11,"new",E,R[622],0,[[[T]],["self"]]],[11,"i",E,R[623],0,[[],["self"]]],[11,"norm_sqr",E,R[624],0,[[["self"]],[T]]],[11,"scale",E,R[625],0,[[["self"],[T]],["self"]]],[11,"unscale",E,R[626],0,[[["self"],[T]],["self"]]],[11,"powu",E,R[627],0,[[["u32"],["self"]],["self"]]],[11,"conj",E,R[628],0,[[["self"]],["self"]]],[11,"inv",E,R[629],0,[[["self"]],["self"]]],[11,"powi",E,R[630],0,[[["i32"],["self"]],["self"]]],[11,"l1_norm",E,R[631],0,[[["self"]],[T]]],[11,"norm",E,R[632],0,[[["self"]],[T]]],[11,"arg",E,R[633],0,[[["self"]],[T]]],[11,"to_polar",E,R[634],0,[[["self"]]]],[11,R[635],E,R[636],0,[[[T]],["self"]]],[11,"exp",E,R[637],0,[[["self"]],["self"]]],[11,"ln",E,R[638],0,[[["self"]],["self"]]],[11,"sqrt",E,R[639],0,[[["self"]],["self"]]],[11,"cbrt",E,R[640],0,[[["self"]],["self"]]],[11,"powf",E,R[641],0,[[["self"],[T]],["self"]]],[11,"log",E,R[642],0,[[["self"],[T]],["self"]]],[11,"powc",E,R[643],0,[[["self"]],["self"]]],[11,"expf",E,R[644],0,[[["self"],[T]],["self"]]],[11,"sin",E,R[645],0,[[["self"]],["self"]]],[11,"cos",E,R[646],0,[[["self"]],["self"]]],[11,"tan",E,R[647],0,[[["self"]],["self"]]],[11,"asin",E,R[648],0,[[["self"]],["self"]]],[11,"acos",E,R[649],0,[[["self"]],["self"]]],[11,"atan",E,R[650],0,[[["self"]],["self"]]],[11,"sinh",E,R[651],0,[[["self"]],["self"]]],[11,"cosh",E,R[652],0,[[["self"]],["self"]]],[11,"tanh",E,R[653],0,[[["self"]],["self"]]],[11,"asinh",E,R[654],0,[[["self"]],["self"]]],[11,"acosh",E,R[655],0,[[["self"]],["self"]]],[11,"atanh",E,R[656],0,[[["self"]],["self"]]],[11,"finv",E,R[657],0,[[["self"]],[R[239]]]],[11,"fdiv",E,R[658],0,[[["self"],[R[239]]],[R[239]]]],[11,"is_nan",E,R[659],0,[[],["bool"]]],[11,R[141],E,R[660],0,[[],["bool"]]],[11,R[142],E,R[661],0,[[],["bool"]]],[11,R[143],E,R[662],0,[[],["bool"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,"into",E,E,0,[[],[U]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[65],E,E,0,[[["self"]],[T]]],[11,R[66],E,E,0,[[[T],["self"]]]],[11,R[238],E,E,0,[[["self"]],["string"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[67],E,E,1,[[[U]],[R[1]]]],[11,R[69],E,E,1,[[],[R[1]]]],[11,"into",E,E,1,[[],[U]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[68],E,E,1,[[["self"]],[T]]],[11,R[236],E,E,1,[[["self"]],["typeid"]]],[11,R[238],E,E,1,[[["self"]],["string"]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"div",E,E,0,[[[R[239]]]]],[11,"div",E,E,0,[[]]],[11,"div",E,E,0,[[[T]]]],[11,"div",E,E,0,[[[T]]]],[11,"eq",E,E,0,[[[R[239]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[239]],["self"]],["bool"]]],[11,"eq",E,E,1,[[[R[240]],["self"]],["bool"]]],[11,"ne",E,E,1,[[[R[240]],["self"]],["bool"]]],[11,"from",E,E,0,[[[T]],["self"]]],[11,"from",E,E,0,[[[T]],["self"]]],[11,"hash",E,E,0,[[["self"],["__ht"]]]],[11,"add",E,E,0,[[[R[239]]]]],[11,"add",E,E,0,[[]]],[11,"add",E,E,0,[[[T]]]],[11,"add",E,E,0,[[[T]]]],[11,"sub",E,E,0,[[[R[239]]]]],[11,"sub",E,E,0,[[]]],[11,"sub",E,E,0,[[[T]]]],[11,"sub",E,E,0,[[[T]]]],[11,"mul",E,E,0,[[[R[239]]]]],[11,"mul",E,E,0,[[]]],[11,"mul",E,E,0,[[[T]]]],[11,"mul",E,E,0,[[[T]]]],[11,"rem",E,E,0,[[[R[239]]]]],[11,"rem",E,E,0,[[]]],[11,"rem",E,E,0,[[[T]]]],[11,"rem",E,E,0,[[[T]]]],[11,"neg",E,E,0,[[]]],[11,R[241],E,E,0,[[["self"]]]],[11,R[241],E,E,0,[[["self"],[T]]]],[11,R[241],E,E,0,[[["self"],["self"]]]],[11,R[241],E,E,0,[[["self"],[T]]]],[11,R[242],E,E,0,[[["self"]]]],[11,R[242],E,E,0,[[["self"],[T]]]],[11,R[242],E,E,0,[[["self"],["self"]]]],[11,R[242],E,E,0,[[["self"],[T]]]],[11,R[243],E,E,0,[[["self"]]]],[11,R[243],E,E,0,[[["self"],[T]]]],[11,R[243],E,E,0,[[["self"],["self"]]]],[11,R[243],E,E,0,[[["self"],[T]]]],[11,R[244],E,E,0,[[["self"]]]],[11,R[244],E,E,0,[[["self"],[T]]]],[11,R[244],E,E,0,[[["self"],["self"]]]],[11,R[244],E,E,0,[[["self"],[T]]]],[11,R[245],E,E,0,[[["self"]]]],[11,R[245],E,E,0,[[["self"],[T]]]],[11,R[245],E,E,0,[[["self"],["self"]]]],[11,R[245],E,E,0,[[["self"],[T]]]],[11,R[520],E,E,0,[[["i"]],["self"]]],[11,R[520],E,E,0,[[["i"]],["self"]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,R[503],E,R[246],0,[[["str"]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"clone",E,E,0,[[["self"]],[R[239]]]],[11,R[514],E,E,0,[[],[R[239]]]],[11,R[504],E,E,1,[[["self"]],["str"]]],[11,R[405],E,E,0,[[["self"]],[[R[4]],["option",[R[4]]]]]],[11,R[404],E,E,0,[[["self"]],[["option",["isize"]],["isize"]]]],[11,"to_u8",E,E,0,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16",E,E,0,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"to_u32",E,E,0,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"to_u64",E,E,0,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_i8",E,E,0,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16",E,E,0,[[["self"]],[["i16"],["option",["i16"]]]]],[11,"to_i32",E,E,0,[[["self"]],[["i32"],["option",["i32"]]]]],[11,"to_i64",E,E,0,[[["self"]],[["i64"],["option",["i64"]]]]],[11,R[505],E,E,0,[[["self"]],[["u128"],["option",["u128"]]]]],[11,R[506],E,E,0,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_f32",E,E,0,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64",E,E,0,[[["self"]],[["f64"],["option",["f64"]]]]],[11,R[251],E,E,0,[[[R[4]]],["option"]]],[11,R[249],E,E,0,[[["isize"]],["option"]]],[11,R[602],E,E,0,[[["u8"]],["option"]]],[11,R[409],E,E,0,[[["u16"]],["option"]]],[11,R[410],E,E,0,[[["u32"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[601],E,E,0,[[["i8"]],["option"]]],[11,R[406],E,E,0,[[["i16"]],["option"]]],[11,R[407],E,E,0,[[["i32"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,"from",E,E,0,[[[R[253]]],["option"]]],[11,"as_",E,E,0,[[],[U]]],[11,R[254],E,R[246],0,[[["u32"],["str"]],[R[1]]]],[11,"zero",E,E,0,[[],["self"]]],[11,R[507],E,E,0,[[["self"]],["bool"]]],[11,R[420],E,E,0,[[["self"]]]],[11,"one",E,E,0,[[],["self"]]],[11,"is_one",E,E,0,[[["self"]],["bool"]]],[11,R[600],E,E,0,[[["self"]]]],[11,"inv",E,E,0,[[]]],[11,R[423],E,E,0,[[[R[239]]],[R[239]]]],[11,R[247],E,E,0,[[["self"],[R[239]]]]],[11,R[247],E,E,0,[[[R[239]],["self"]]]],[11,"pow",E,E,0,[[["f32"]]]],[11,"pow",E,E,0,[[["f32"]]]],[11,"pow",E,E,0,[[["f64"]]]],[11,"pow",E,E,0,[[["f64"]]]],[11,"pow",E,E,0,[[[R[239]]]]],[11,"pow",E,E,0,[[[R[239]]]]]],"p":[[3,"Complex"],[3,R[248]]]};
searchIndex[R[455]]={"doc":"A Big integer (signed version: `BigInt`, unsigned version:…","i":[[3,R[502],R[455],E,N,N],[3,"BigUint",E,R[521],N,N],[3,"BigInt",E,R[522],N,N],[4,"Sign",E,R[663],N,N],[13,"Minus",E,E,0,N],[13,"NoSign",E,E,0,N],[13,"Plus",E,E,0,N],[11,"new",E,R[500],1,[[["u32"],["sign"],["vec",["u32"]]],["bigint"]]],[11,R[664],E,R[456],1,[[["sign"],[R[465]]],["bigint"]]],[11,R[461],E,R[456],1,[[["sign"]],["bigint"]]],[11,R[463],E,R[665],1,[[["self"],["sign"]]]],[11,R[464],E,R[456],1,[[["sign"]],["bigint"]]],[11,R[466],E,R[456],1,[[["sign"]],["bigint"]]],[11,R[666],E,R[457],1,[[],["bigint"]]],[11,R[667],E,R[457],1,[[],["bigint"]]],[11,R[467],E,R[456],1,[[["u32"]],[["option",["bigint"]],["bigint"]]]],[11,R[468],E,R[458],1,[[["u32"],["sign"]],[["option",["bigint"]],["bigint"]]]],[11,R[469],E,R[458],1,[[["u32"],["sign"]],[["option",["bigint"]],["bigint"]]]],[11,R[471],E,R[459],1,[[["self"]]]],[11,R[472],E,R[459],1,[[["self"]]]],[11,R[668],E,R[460],1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[669],E,R[460],1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[474],E,R[475],1,[[["u32"],["self"]],["string"]]],[11,R[476],E,R[477],1,[[["u32"],["self"]]]],[11,R[478],E,R[479],1,[[["u32"],["self"]]]],[11,"sign",E,R[670],1,[[["self"]],["sign"]]],[11,"bits",E,R[480],1,[[["self"]],[R[4]]]],[11,R[484],E,R[671],1,[[["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[277],E,E,1,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,R[280],E,E,1,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,R[283],E,E,1,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,R[286],E,E,1,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,"modpow",E,R[672],1,[[["self"]],["self"]]],[11,"sqrt",E,R[481],1,[[["self"]],["self"]]],[11,"cbrt",E,R[482],1,[[["self"]],["self"]]],[11,R[492],E,R[483],1,[[["u32"],["self"]],["self"]]],[11,"new",E,R[462],2,[[["u32"],["vec",["u32"]]],[R[465]]]],[11,R[461],E,R[462],2,[[],[R[465]]]],[11,R[463],E,R[673],2,[[["self"]]]],[11,R[464],E,R[462],2,[[],[R[465]]]],[11,R[466],E,R[462],2,[[],[R[465]]]],[11,R[467],E,R[674],2,[[["u32"]],[["option",[R[465]]],[R[465]]]]],[11,R[468],E,R[470],2,[[["u32"]],[["option",[R[465]]],[R[465]]]]],[11,R[469],E,R[470],2,[[["u32"]],[["option",[R[465]]],[R[465]]]]],[11,R[471],E,R[473],2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[472],E,R[473],2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,R[474],E,R[475],2,[[["u32"],["self"]],["string"]]],[11,R[476],E,R[477],2,[[["u32"],["self"]],[["u8"],["vec",["u8"]]]]],[11,R[478],E,R[479],2,[[["u32"],["self"]],[["u8"],["vec",["u8"]]]]],[11,"bits",E,R[480],2,[[["self"]],[R[4]]]],[11,"modpow",E,R[675],2,[[["self"]],["self"]]],[11,"sqrt",E,R[481],2,[[["self"]],["self"]]],[11,"cbrt",E,R[482],2,[[["self"]],["self"]]],[11,R[492],E,R[483],2,[[["u32"],["self"]],["self"]]],[8,R[501],E,R[676],N,N],[10,R[484],E,R[677],3,[[["self"]],[["option",[R[465]]],[R[465]]]]],[8,R[678],E,R[679],N,N],[10,R[485],E,R[680],4,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[65],E,E,5,[[["self"]],[T]]],[11,R[66],E,E,5,[[[T],["self"]]]],[11,R[238],E,E,5,[[["self"]],["string"]]],[11,R[67],E,E,5,[[[U]],[R[1]]]],[11,"borrow",E,E,5,[[["self"]],[T]]],[11,R[236],E,E,5,[[["self"]],["typeid"]]],[11,R[68],E,E,5,[[["self"]],[T]]],[11,R[69],E,E,5,[[],[R[1]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[65],E,E,2,[[["self"]],[T]]],[11,R[66],E,E,2,[[[T],["self"]]]],[11,R[238],E,E,2,[[["self"]],["string"]]],[11,R[67],E,E,2,[[[U]],[R[1]]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[236],E,E,2,[[["self"]],["typeid"]]],[11,R[68],E,E,2,[[["self"]],[T]]],[11,R[69],E,E,2,[[],[R[1]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[65],E,E,1,[[["self"]],[T]]],[11,R[66],E,E,1,[[[T],["self"]]]],[11,R[238],E,E,1,[[["self"]],["string"]]],[11,R[67],E,E,1,[[[U]],[R[1]]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[236],E,E,1,[[["self"]],["typeid"]]],[11,R[68],E,E,1,[[["self"]],[T]]],[11,R[69],E,E,1,[[],[R[1]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[65],E,E,0,[[["self"]],[T]]],[11,R[66],E,E,0,[[[T],["self"]]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,R[485],E,E,1,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[485],E,E,2,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,R[484],E,E,1,[[["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[484],E,E,2,[[["self"]],[["option",[R[465]]],[R[465]]]]],[11,"eq",E,E,0,[[["self"],["sign"]],["bool"]]],[11,"eq",E,E,1,[[["self"],["bigint"]],["bool"]]],[11,"eq",E,E,2,[[[R[465]],["self"]],["bool"]]],[11,"eq",E,E,5,[[[R[486]],["self"]],["bool"]]],[11,"ne",E,E,5,[[[R[486]],["self"]],["bool"]]],[11,"clone",E,E,0,[[["self"]],["sign"]]],[11,"clone",E,E,1,[[["self"]],["bigint"]]],[11,"clone",E,E,2,[[["self"]],[R[465]]]],[11,"clone",E,E,5,[[["self"]],[R[486]]]],[11,"cmp",E,E,0,[[["self"],["sign"]],[R[82]]]],[11,"cmp",E,E,1,[[["self"],["bigint"]],[R[82]]]],[11,"cmp",E,E,2,[[[R[465]],["self"]],[R[82]]]],[11,"from",E,E,1,[[["i64"]],["self"]]],[11,"from",E,E,1,[[["i128"]],["self"]]],[11,"from",E,E,1,[[["i8"]],["self"]]],[11,"from",E,E,1,[[["i16"]],["self"]]],[11,"from",E,E,1,[[["i32"]],["self"]]],[11,"from",E,E,1,[[["isize"]],["self"]]],[11,"from",E,E,1,[[["u64"]],["self"]]],[11,"from",E,E,1,[[["u128"]],["self"]]],[11,"from",E,E,1,[[["u8"]],["self"]]],[11,"from",E,E,1,[[["u16"]],["self"]]],[11,"from",E,E,1,[[["u32"]],["self"]]],[11,"from",E,E,1,[[[R[4]]],["self"]]],[11,"from",E,E,1,[[[R[465]]],["self"]]],[11,"from",E,E,2,[[["u64"]],["self"]]],[11,"from",E,E,2,[[["u128"]],["self"]]],[11,"from",E,E,2,[[["u8"]],["self"]]],[11,"from",E,E,2,[[["u16"]],["self"]]],[11,"from",E,E,2,[[["u32"]],["self"]]],[11,"from",E,E,2,[[[R[4]]],["self"]]],[11,R[83],E,E,0,[[["self"],["sign"]],[[R[82]],["option",[R[82]]]]]],[11,R[83],E,E,1,[[["self"],["bigint"]],[["option",[R[82]]],[R[82]]]]],[11,R[83],E,E,2,[[[R[465]],["self"]],[["option",[R[82]]],[R[82]]]]],[11,R[514],E,E,1,[[],["bigint"]]],[11,R[514],E,E,2,[[],[R[465]]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,1,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,2,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,5,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,1,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,2,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,5,[[[R[84]],["self"]],[R[1]]]],[11,"div",E,E,1,[[["bigint"]],["bigint"]]],[11,"div",E,E,1,[[["bigint"]],["bigint"]]],[11,"div",E,E,1,[[["u8"]],["bigint"]]],[11,"div",E,E,1,[[["u8"]],["bigint"]]],[11,"div",E,E,1,[[["u16"]],["bigint"]]],[11,"div",E,E,1,[[["u16"]],["bigint"]]],[11,"div",E,E,1,[[[R[4]]],["bigint"]]],[11,"div",E,E,1,[[[R[4]]],["bigint"]]],[11,"div",E,E,1,[[["i8"]],["bigint"]]],[11,"div",E,E,1,[[["i8"]],["bigint"]]],[11,"div",E,E,1,[[["i16"]],["bigint"]]],[11,"div",E,E,1,[[["i16"]],["bigint"]]],[11,"div",E,E,1,[[["isize"]],["bigint"]]],[11,"div",E,E,1,[[["isize"]],["bigint"]]],[11,"div",E,E,1,[[["u32"]],["bigint"]]],[11,"div",E,E,1,[[["u64"]],["bigint"]]],[11,"div",E,E,1,[[["u128"]],["bigint"]]],[11,"div",E,E,1,[[["u32"]],["bigint"]]],[11,"div",E,E,1,[[["u64"]],["bigint"]]],[11,"div",E,E,1,[[["u128"]],["bigint"]]],[11,"div",E,E,1,[[["i32"]],["bigint"]]],[11,"div",E,E,1,[[["i64"]],["bigint"]]],[11,"div",E,E,1,[[["i128"]],["bigint"]]],[11,"div",E,E,1,[[["i32"]],["bigint"]]],[11,"div",E,E,1,[[["i64"]],["bigint"]]],[11,"div",E,E,1,[[["i128"]],["bigint"]]],[11,"div",E,E,2,[[[R[465]]],[R[465]]]],[11,"div",E,E,2,[[[R[465]]],[R[465]]]],[11,"div",E,E,2,[[["u8"]],[R[465]]]],[11,"div",E,E,2,[[["u8"]],[R[465]]]],[11,"div",E,E,2,[[["u16"]],[R[465]]]],[11,"div",E,E,2,[[["u16"]],[R[465]]]],[11,"div",E,E,2,[[[R[4]]],[R[465]]]],[11,"div",E,E,2,[[[R[4]]],[R[465]]]],[11,"div",E,E,2,[[["u32"]],[R[465]]]],[11,"div",E,E,2,[[["u64"]],[R[465]]]],[11,"div",E,E,2,[[["u128"]],[R[465]]]],[11,"div",E,E,2,[[["u32"]],[R[465]]]],[11,"div",E,E,2,[[["u64"]],[R[465]]]],[11,"div",E,E,2,[[["u128"]],[R[465]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"add",E,E,1,[[["bigint"]],["bigint"]]],[11,"add",E,E,1,[[["bigint"]],["bigint"]]],[11,"add",E,E,1,[[["u8"]],["bigint"]]],[11,"add",E,E,1,[[["u8"]],["bigint"]]],[11,"add",E,E,1,[[["u16"]],["bigint"]]],[11,"add",E,E,1,[[["u16"]],["bigint"]]],[11,"add",E,E,1,[[[R[4]]],["bigint"]]],[11,"add",E,E,1,[[[R[4]]],["bigint"]]],[11,"add",E,E,1,[[["i8"]],["bigint"]]],[11,"add",E,E,1,[[["i8"]],["bigint"]]],[11,"add",E,E,1,[[["i16"]],["bigint"]]],[11,"add",E,E,1,[[["i16"]],["bigint"]]],[11,"add",E,E,1,[[["isize"]],["bigint"]]],[11,"add",E,E,1,[[["isize"]],["bigint"]]],[11,"add",E,E,1,[[["u32"]],["bigint"]]],[11,"add",E,E,1,[[["u64"]],["bigint"]]],[11,"add",E,E,1,[[["u128"]],["bigint"]]],[11,"add",E,E,1,[[["u32"]],["bigint"]]],[11,"add",E,E,1,[[["u64"]],["bigint"]]],[11,"add",E,E,1,[[["u128"]],["bigint"]]],[11,"add",E,E,1,[[["i32"]],["bigint"]]],[11,"add",E,E,1,[[["i64"]],["bigint"]]],[11,"add",E,E,1,[[["i128"]],["bigint"]]],[11,"add",E,E,1,[[["i32"]],["bigint"]]],[11,"add",E,E,1,[[["i64"]],["bigint"]]],[11,"add",E,E,1,[[["i128"]],["bigint"]]],[11,"add",E,E,2,[[[R[465]]],[R[465]]]],[11,"add",E,E,2,[[[R[465]]],[R[465]]]],[11,"add",E,E,2,[[["u8"]],[R[465]]]],[11,"add",E,E,2,[[["u8"]],[R[465]]]],[11,"add",E,E,2,[[["u16"]],[R[465]]]],[11,"add",E,E,2,[[["u16"]],[R[465]]]],[11,"add",E,E,2,[[[R[4]]],[R[465]]]],[11,"add",E,E,2,[[[R[4]]],[R[465]]]],[11,"add",E,E,2,[[["u32"]],[R[465]]]],[11,"add",E,E,2,[[["u64"]],[R[465]]]],[11,"add",E,E,2,[[["u128"]],[R[465]]]],[11,"add",E,E,2,[[["u32"]],[R[465]]]],[11,"add",E,E,2,[[["u64"]],[R[465]]]],[11,"add",E,E,2,[[["u128"]],[R[465]]]],[11,"sub",E,E,1,[[["bigint"]],["bigint"]]],[11,"sub",E,E,1,[[["bigint"]],["bigint"]]],[11,"sub",E,E,1,[[["u8"]],["bigint"]]],[11,"sub",E,E,1,[[["u8"]],["bigint"]]],[11,"sub",E,E,1,[[["u16"]],["bigint"]]],[11,"sub",E,E,1,[[["u16"]],["bigint"]]],[11,"sub",E,E,1,[[[R[4]]],["bigint"]]],[11,"sub",E,E,1,[[[R[4]]],["bigint"]]],[11,"sub",E,E,1,[[["i8"]],["bigint"]]],[11,"sub",E,E,1,[[["i8"]],["bigint"]]],[11,"sub",E,E,1,[[["i16"]],["bigint"]]],[11,"sub",E,E,1,[[["i16"]],["bigint"]]],[11,"sub",E,E,1,[[["isize"]],["bigint"]]],[11,"sub",E,E,1,[[["isize"]],["bigint"]]],[11,"sub",E,E,1,[[["u32"]],["bigint"]]],[11,"sub",E,E,1,[[["u64"]],["bigint"]]],[11,"sub",E,E,1,[[["u128"]],["bigint"]]],[11,"sub",E,E,1,[[["u32"]],["bigint"]]],[11,"sub",E,E,1,[[["u64"]],["bigint"]]],[11,"sub",E,E,1,[[["u128"]],["bigint"]]],[11,"sub",E,E,1,[[["i32"]],["bigint"]]],[11,"sub",E,E,1,[[["i64"]],["bigint"]]],[11,"sub",E,E,1,[[["i128"]],["bigint"]]],[11,"sub",E,E,1,[[["i32"]],["bigint"]]],[11,"sub",E,E,1,[[["i64"]],["bigint"]]],[11,"sub",E,E,1,[[["i128"]],["bigint"]]],[11,"sub",E,E,2,[[[R[465]]],[R[465]]]],[11,"sub",E,E,2,[[[R[465]]],[R[465]]]],[11,"sub",E,E,2,[[["u8"]],[R[465]]]],[11,"sub",E,E,2,[[["u8"]],[R[465]]]],[11,"sub",E,E,2,[[["u16"]],[R[465]]]],[11,"sub",E,E,2,[[["u16"]],[R[465]]]],[11,"sub",E,E,2,[[[R[4]]],[R[465]]]],[11,"sub",E,E,2,[[[R[4]]],[R[465]]]],[11,"sub",E,E,2,[[["u32"]],[R[465]]]],[11,"sub",E,E,2,[[["u64"]],[R[465]]]],[11,"sub",E,E,2,[[["u128"]],[R[465]]]],[11,"sub",E,E,2,[[["u32"]],[R[465]]]],[11,"sub",E,E,2,[[["u64"]],[R[465]]]],[11,"sub",E,E,2,[[["u128"]],[R[465]]]],[11,"mul",E,E,0,[[["sign"]],["sign"]]],[11,"mul",E,E,1,[[["bigint"]],["bigint"]]],[11,"mul",E,E,1,[[["bigint"]],["bigint"]]],[11,"mul",E,E,1,[[["u8"]],["bigint"]]],[11,"mul",E,E,1,[[["u8"]],["bigint"]]],[11,"mul",E,E,1,[[["u16"]],["bigint"]]],[11,"mul",E,E,1,[[["u16"]],["bigint"]]],[11,"mul",E,E,1,[[[R[4]]],["bigint"]]],[11,"mul",E,E,1,[[[R[4]]],["bigint"]]],[11,"mul",E,E,1,[[["i8"]],["bigint"]]],[11,"mul",E,E,1,[[["i8"]],["bigint"]]],[11,"mul",E,E,1,[[["i16"]],["bigint"]]],[11,"mul",E,E,1,[[["i16"]],["bigint"]]],[11,"mul",E,E,1,[[["isize"]],["bigint"]]],[11,"mul",E,E,1,[[["isize"]],["bigint"]]],[11,"mul",E,E,1,[[["u32"]],["bigint"]]],[11,"mul",E,E,1,[[["u64"]],["bigint"]]],[11,"mul",E,E,1,[[["u128"]],["bigint"]]],[11,"mul",E,E,1,[[["u32"]],["bigint"]]],[11,"mul",E,E,1,[[["u64"]],["bigint"]]],[11,"mul",E,E,1,[[["u128"]],["bigint"]]],[11,"mul",E,E,1,[[["i32"]],["bigint"]]],[11,"mul",E,E,1,[[["i64"]],["bigint"]]],[11,"mul",E,E,1,[[["i128"]],["bigint"]]],[11,"mul",E,E,1,[[["i32"]],["bigint"]]],[11,"mul",E,E,1,[[["i64"]],["bigint"]]],[11,"mul",E,E,1,[[["i128"]],["bigint"]]],[11,"mul",E,E,2,[[[R[465]]],[R[465]]]],[11,"mul",E,E,2,[[[R[465]]],[R[465]]]],[11,"mul",E,E,2,[[["u8"]],[R[465]]]],[11,"mul",E,E,2,[[["u8"]],[R[465]]]],[11,"mul",E,E,2,[[["u16"]],[R[465]]]],[11,"mul",E,E,2,[[["u16"]],[R[465]]]],[11,"mul",E,E,2,[[[R[4]]],[R[465]]]],[11,"mul",E,E,2,[[[R[4]]],[R[465]]]],[11,"mul",E,E,2,[[["u32"]],[R[465]]]],[11,"mul",E,E,2,[[["u64"]],[R[465]]]],[11,"mul",E,E,2,[[["u128"]],[R[465]]]],[11,"mul",E,E,2,[[["u32"]],[R[465]]]],[11,"mul",E,E,2,[[["u64"]],[R[465]]]],[11,"mul",E,E,2,[[["u128"]],[R[465]]]],[11,"rem",E,E,1,[[["bigint"]],["bigint"]]],[11,"rem",E,E,1,[[["bigint"]],["bigint"]]],[11,"rem",E,E,1,[[["u8"]],["bigint"]]],[11,"rem",E,E,1,[[["u8"]],["bigint"]]],[11,"rem",E,E,1,[[["u16"]],["bigint"]]],[11,"rem",E,E,1,[[["u16"]],["bigint"]]],[11,"rem",E,E,1,[[[R[4]]],["bigint"]]],[11,"rem",E,E,1,[[[R[4]]],["bigint"]]],[11,"rem",E,E,1,[[["i8"]],["bigint"]]],[11,"rem",E,E,1,[[["i8"]],["bigint"]]],[11,"rem",E,E,1,[[["i16"]],["bigint"]]],[11,"rem",E,E,1,[[["i16"]],["bigint"]]],[11,"rem",E,E,1,[[["isize"]],["bigint"]]],[11,"rem",E,E,1,[[["isize"]],["bigint"]]],[11,"rem",E,E,1,[[["u32"]],["bigint"]]],[11,"rem",E,E,1,[[["u64"]],["bigint"]]],[11,"rem",E,E,1,[[["u128"]],["bigint"]]],[11,"rem",E,E,1,[[["u32"]],["bigint"]]],[11,"rem",E,E,1,[[["u64"]],["bigint"]]],[11,"rem",E,E,1,[[["u128"]],["bigint"]]],[11,"rem",E,E,1,[[["i32"]],["bigint"]]],[11,"rem",E,E,1,[[["i64"]],["bigint"]]],[11,"rem",E,E,1,[[["i128"]],["bigint"]]],[11,"rem",E,E,1,[[["i32"]],["bigint"]]],[11,"rem",E,E,1,[[["i64"]],["bigint"]]],[11,"rem",E,E,1,[[["i128"]],["bigint"]]],[11,"rem",E,E,2,[[[R[465]]],[R[465]]]],[11,"rem",E,E,2,[[[R[465]]],[R[465]]]],[11,"rem",E,E,2,[[["u8"]],[R[465]]]],[11,"rem",E,E,2,[[["u8"]],[R[465]]]],[11,"rem",E,E,2,[[["u16"]],[R[465]]]],[11,"rem",E,E,2,[[["u16"]],[R[465]]]],[11,"rem",E,E,2,[[[R[4]]],[R[465]]]],[11,"rem",E,E,2,[[[R[4]]],[R[465]]]],[11,"rem",E,E,2,[[["u32"]],[R[465]]]],[11,"rem",E,E,2,[[["u64"]],[R[465]]]],[11,"rem",E,E,2,[[["u128"]],[R[465]]]],[11,"rem",E,E,2,[[["u32"]],[R[465]]]],[11,"rem",E,E,2,[[["u64"]],[R[465]]]],[11,"rem",E,E,2,[[["u128"]],[R[465]]]],[11,"neg",E,R[681],0,[[],["sign"]]],[11,"neg",E,E,1,[[],["bigint"]]],[11,"neg",E,E,2,[[],[R[465]]]],[11,R[241],E,E,1,[[["self"],["bigint"]]]],[11,R[241],E,E,1,[[["self"],["bigint"]]]],[11,R[241],E,E,1,[[["self"],["u8"]]]],[11,R[241],E,E,1,[[["self"],["u16"]]]],[11,R[241],E,E,1,[[["self"],[R[4]]]]],[11,R[241],E,E,1,[[["self"],["i8"]]]],[11,R[241],E,E,1,[[["self"],["i16"]]]],[11,R[241],E,E,1,[[["isize"],["self"]]]],[11,R[241],E,E,1,[[["u32"],["self"]]]],[11,R[241],E,E,1,[[["self"],["u64"]]]],[11,R[241],E,E,1,[[["self"],["u128"]]]],[11,R[241],E,E,1,[[["i32"],["self"]]]],[11,R[241],E,E,1,[[["self"],["i64"]]]],[11,R[241],E,E,1,[[["i128"],["self"]]]],[11,R[241],E,E,2,[[["self"],[R[465]]]]],[11,R[241],E,E,2,[[[R[465]],["self"]]]],[11,R[241],E,E,2,[[["self"],["u8"]]]],[11,R[241],E,E,2,[[["self"],["u16"]]]],[11,R[241],E,E,2,[[["self"],[R[4]]]]],[11,R[241],E,E,2,[[["u32"],["self"]]]],[11,R[241],E,E,2,[[["self"],["u64"]]]],[11,R[241],E,E,2,[[["self"],["u128"]]]],[11,R[242],E,E,1,[[["self"],["bigint"]]]],[11,R[242],E,E,1,[[["self"],["bigint"]]]],[11,R[242],E,E,1,[[["self"],["u8"]]]],[11,R[242],E,E,1,[[["self"],["u16"]]]],[11,R[242],E,E,1,[[["self"],[R[4]]]]],[11,R[242],E,E,1,[[["self"],["i8"]]]],[11,R[242],E,E,1,[[["self"],["i16"]]]],[11,R[242],E,E,1,[[["isize"],["self"]]]],[11,R[242],E,E,1,[[["u32"],["self"]]]],[11,R[242],E,E,1,[[["self"],["u64"]]]],[11,R[242],E,E,1,[[["self"],["u128"]]]],[11,R[242],E,E,1,[[["i32"],["self"]]]],[11,R[242],E,E,1,[[["self"],["i64"]]]],[11,R[242],E,E,1,[[["i128"],["self"]]]],[11,R[242],E,E,2,[[["self"],[R[465]]]]],[11,R[242],E,E,2,[[[R[465]],["self"]]]],[11,R[242],E,E,2,[[["self"],["u8"]]]],[11,R[242],E,E,2,[[["self"],["u16"]]]],[11,R[242],E,E,2,[[["self"],[R[4]]]]],[11,R[242],E,E,2,[[["u32"],["self"]]]],[11,R[242],E,E,2,[[["self"],["u64"]]]],[11,R[242],E,E,2,[[["self"],["u128"]]]],[11,R[243],E,E,1,[[["self"],["bigint"]]]],[11,R[243],E,E,1,[[["self"],["bigint"]]]],[11,R[243],E,E,1,[[["self"],["u8"]]]],[11,R[243],E,E,1,[[["self"],["u16"]]]],[11,R[243],E,E,1,[[["self"],[R[4]]]]],[11,R[243],E,E,1,[[["self"],["i8"]]]],[11,R[243],E,E,1,[[["self"],["i16"]]]],[11,R[243],E,E,1,[[["isize"],["self"]]]],[11,R[243],E,E,1,[[["u32"],["self"]]]],[11,R[243],E,E,1,[[["self"],["u64"]]]],[11,R[243],E,E,1,[[["self"],["u128"]]]],[11,R[243],E,E,1,[[["i32"],["self"]]]],[11,R[243],E,E,1,[[["self"],["i64"]]]],[11,R[243],E,E,1,[[["i128"],["self"]]]],[11,R[243],E,E,2,[[["self"],[R[465]]]]],[11,R[243],E,E,2,[[[R[465]],["self"]]]],[11,R[243],E,E,2,[[["self"],["u8"]]]],[11,R[243],E,E,2,[[["self"],["u16"]]]],[11,R[243],E,E,2,[[["self"],[R[4]]]]],[11,R[243],E,E,2,[[["u32"],["self"]]]],[11,R[243],E,E,2,[[["self"],["u64"]]]],[11,R[243],E,E,2,[[["self"],["u128"]]]],[11,R[244],E,E,1,[[["self"],["bigint"]]]],[11,R[244],E,E,1,[[["self"],["bigint"]]]],[11,R[244],E,E,1,[[["self"],["u8"]]]],[11,R[244],E,E,1,[[["self"],["u16"]]]],[11,R[244],E,E,1,[[["self"],[R[4]]]]],[11,R[244],E,E,1,[[["self"],["i8"]]]],[11,R[244],E,E,1,[[["self"],["i16"]]]],[11,R[244],E,E,1,[[["isize"],["self"]]]],[11,R[244],E,E,1,[[["u32"],["self"]]]],[11,R[244],E,E,1,[[["self"],["u64"]]]],[11,R[244],E,E,1,[[["self"],["u128"]]]],[11,R[244],E,E,1,[[["i32"],["self"]]]],[11,R[244],E,E,1,[[["self"],["i64"]]]],[11,R[244],E,E,1,[[["i128"],["self"]]]],[11,R[244],E,E,2,[[["self"],[R[465]]]]],[11,R[244],E,E,2,[[[R[465]],["self"]]]],[11,R[244],E,E,2,[[["self"],["u8"]]]],[11,R[244],E,E,2,[[["self"],["u16"]]]],[11,R[244],E,E,2,[[["self"],[R[4]]]]],[11,R[244],E,E,2,[[["u32"],["self"]]]],[11,R[244],E,E,2,[[["self"],["u64"]]]],[11,R[244],E,E,2,[[["self"],["u128"]]]],[11,R[245],E,E,1,[[["self"],["bigint"]]]],[11,R[245],E,E,1,[[["self"],["bigint"]]]],[11,R[245],E,E,1,[[["self"],["u8"]]]],[11,R[245],E,E,1,[[["self"],["u16"]]]],[11,R[245],E,E,1,[[["self"],[R[4]]]]],[11,R[245],E,E,1,[[["self"],["i8"]]]],[11,R[245],E,E,1,[[["self"],["i16"]]]],[11,R[245],E,E,1,[[["isize"],["self"]]]],[11,R[245],E,E,1,[[["u32"],["self"]]]],[11,R[245],E,E,1,[[["self"],["u64"]]]],[11,R[245],E,E,1,[[["self"],["u128"]]]],[11,R[245],E,E,1,[[["i32"],["self"]]]],[11,R[245],E,E,1,[[["self"],["i64"]]]],[11,R[245],E,E,1,[[["i128"],["self"]]]],[11,R[245],E,E,2,[[["self"],[R[465]]]]],[11,R[245],E,E,2,[[[R[465]],["self"]]]],[11,R[245],E,E,2,[[["self"],["u8"]]]],[11,R[245],E,E,2,[[["self"],["u16"]]]],[11,R[245],E,E,2,[[["self"],[R[4]]]]],[11,R[245],E,E,2,[[["u32"],["self"]]]],[11,R[245],E,E,2,[[["self"],["u64"]]]],[11,R[245],E,E,2,[[["self"],["u128"]]]],[11,"not",E,E,1,[[],["bigint"]]],[11,"bitand",E,E,1,[[["bigint"]],["bigint"]]],[11,"bitand",E,E,1,[[["bigint"]],["bigint"]]],[11,"bitand",E,E,2,[[[R[465]]],[R[465]]]],[11,"bitand",E,E,2,[[[R[465]]],[R[465]]]],[11,"bitor",E,E,1,[[["bigint"]],["bigint"]]],[11,"bitor",E,E,1,[[["bigint"]],["bigint"]]],[11,"bitor",E,E,2,[[[R[465]]],[R[465]]]],[11,"bitor",E,E,2,[[[R[465]]],[R[465]]]],[11,"bitxor",E,E,1,[[["bigint"]],["bigint"]]],[11,"bitxor",E,E,1,[[["bigint"]],["bigint"]]],[11,"bitxor",E,E,2,[[[R[465]]],[R[465]]]],[11,"bitxor",E,E,2,[[[R[465]]],[R[465]]]],[11,"shl",E,E,1,[[[R[4]]],["bigint"]]],[11,"shl",E,E,2,[[[R[4]]],[R[465]]]],[11,"shr",E,E,1,[[[R[4]]],["bigint"]]],[11,"shr",E,E,2,[[[R[4]]],[R[465]]]],[11,R[487],E,E,1,[[["self"],["bigint"]]]],[11,R[487],E,E,1,[[["self"],["bigint"]]]],[11,R[487],E,E,2,[[["self"],[R[465]]]]],[11,R[487],E,E,2,[[[R[465]],["self"]]]],[11,R[488],E,E,1,[[["self"],["bigint"]]]],[11,R[488],E,E,1,[[["self"],["bigint"]]]],[11,R[488],E,E,2,[[["self"],[R[465]]]]],[11,R[488],E,E,2,[[[R[465]],["self"]]]],[11,R[489],E,E,1,[[["self"],["bigint"]]]],[11,R[489],E,E,1,[[["self"],["bigint"]]]],[11,R[489],E,E,2,[[["self"],[R[465]]]]],[11,R[489],E,E,2,[[[R[465]],["self"]]]],[11,R[490],E,E,1,[[["self"],[R[4]]]]],[11,R[490],E,E,2,[[["self"],[R[4]]]]],[11,R[491],E,E,1,[[["self"],[R[4]]]]],[11,R[491],E,E,2,[[["self"],[R[4]]]]],[11,R[520],E,E,1,[[["i"]],["self"]]],[11,R[520],E,E,2,[[["i"]],["self"]]],[11,"sum",E,E,1,[[["i"]],["self"]]],[11,"sum",E,E,2,[[["i"]],["self"]]],[11,R[503],E,E,1,[[["str"]],[[R[486]],[R[1],["bigint",R[486]]],["bigint"]]]],[11,R[503],E,E,2,[[["str"]],[[R[486]],[R[465]],[R[1],[R[465],R[486]]]]]],[11,"fmt",E,E,1,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,2,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,1,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,2,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,1,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,2,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,1,[[[R[84]],["self"]],[R[1]]]],[11,"fmt",E,E,2,[[[R[84]],["self"]],[R[1]]]],[11,R[504],E,E,5,[[["self"]],["str"]]],[11,R[492],E,E,1,[[["u32"],["self"]],["self"]]],[11,"sqrt",E,E,1,[[["self"]],["self"]]],[11,"cbrt",E,E,1,[[["self"]],["self"]]],[11,R[492],E,E,2,[[["u32"],["self"]],["self"]]],[11,"sqrt",E,E,2,[[["self"]],["self"]]],[11,"cbrt",E,E,2,[[["self"]],["self"]]],[11,R[607],E,E,1,[[["self"],["bigint"]]]],[11,R[230],E,E,1,[[["self"],["bigint"]],["bigint"]]],[11,R[231],E,E,1,[[["self"],["bigint"]],["bigint"]]],[11,R[232],E,E,1,[[["self"],["bigint"]]]],[11,"gcd",E,R[493],1,[[["self"],["bigint"]],["bigint"]]],[11,"lcm",E,R[494],1,[[["self"],["bigint"]],["bigint"]]],[11,R[682],E,R[495],1,[[["self"],["bigint"]],["bool"]]],[11,R[496],E,R[497],1,[[["self"],["bigint"]],["bool"]]],[11,R[683],E,R[498],1,[[["self"]],["bool"]]],[11,"is_odd",E,R[499],1,[[["self"]],["bool"]]],[11,R[607],E,E,2,[[[R[465]],["self"]]]],[11,R[230],E,E,2,[[[R[465]],["self"]],[R[465]]]],[11,R[231],E,E,2,[[[R[465]],["self"]],[R[465]]]],[11,R[232],E,E,2,[[[R[465]],["self"]]]],[11,"gcd",E,R[493],2,[[["self"]],["self"]]],[11,"lcm",E,R[494],2,[[[R[465]],["self"]],[R[465]]]],[11,R[682],E,R[495],2,[[[R[465]],["self"]],["bool"]]],[11,R[496],E,R[497],2,[[[R[465]],["self"]],["bool"]]],[11,R[683],E,R[498],2,[[["self"]],["bool"]]],[11,"is_odd",E,R[499],2,[[["self"]],["bool"]]],[11,"to_i64",E,E,1,[[["self"]],[["option",["i64"]],["i64"]]]],[11,R[506],E,E,1,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_u64",E,E,1,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,E,1,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32",E,E,1,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64",E,E,1,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"to_i64",E,E,2,[[["self"]],[["option",["i64"]],["i64"]]]],[11,R[506],E,E,2,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_u64",E,E,2,[[["self"]],[["option",["u64"]],["u64"]]]],[11,R[505],E,E,2,[[["self"]],[["u128"],["option",["u128"]]]]],[11,"to_f32",E,E,2,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64",E,E,2,[[["self"]],[["f64"],["option",["f64"]]]]],[11,R[408],E,E,1,[[["i64"]],[["option",["bigint"]],["bigint"]]]],[11,R[250],E,E,1,[[["i128"]],[["option",["bigint"]],["bigint"]]]],[11,R[411],E,E,1,[[["u64"]],[["option",["bigint"]],["bigint"]]]],[11,R[252],E,E,1,[[["u128"]],[["option",["bigint"]],["bigint"]]]],[11,R[413],E,E,1,[[["f64"]],[["option",["bigint"]],["bigint"]]]],[11,R[408],E,E,2,[[["i64"]],[["option",[R[465]]],[R[465]]]]],[11,R[250],E,E,2,[[["i128"]],[["option",[R[465]]],[R[465]]]]],[11,R[411],E,E,2,[[["u64"]],[["option",[R[465]]],[R[465]]]]],[11,R[252],E,E,2,[[["u128"]],[["option",[R[465]]],[R[465]]]]],[11,R[413],E,E,2,[[["f64"]],[["option",[R[465]]],[R[465]]]]],[11,R[254],E,R[500],1,[[["u32"],["str"]],[[R[486]],[R[1],["bigint",R[486]]],["bigint"]]]],[11,R[254],E,R[462],2,[[["u32"],["str"]],[[R[486]],[R[465]],[R[1],[R[465],R[486]]]]]],[11,"zero",E,E,1,[[],["bigint"]]],[11,R[507],E,E,1,[[["self"]],["bool"]]],[11,"zero",E,E,2,[[],[R[465]]]],[11,R[507],E,E,2,[[["self"]],["bool"]]],[11,"one",E,E,1,[[],["bigint"]]],[11,"is_one",E,E,1,[[["self"]],["bool"]]],[11,"one",E,E,2,[[],[R[465]]]],[11,"is_one",E,E,2,[[["self"]],["bool"]]],[11,R[283],E,E,1,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,R[283],E,E,2,[[[R[465]],["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[286],E,E,1,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,R[286],E,E,2,[[[R[465]],["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[277],E,E,1,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,R[277],E,E,2,[[[R[465]],["self"]],[["option",[R[465]]],[R[465]]]]],[11,R[280],E,E,1,[[["self"],["bigint"]],[["option",["bigint"]],["bigint"]]]],[11,R[280],E,E,2,[[[R[465]],["self"]],[["option",[R[465]]],[R[465]]]]],[11,"abs",E,E,1,[[["self"]],["bigint"]]],[11,R[314],E,E,1,[[["self"],["bigint"]],["bigint"]]],[11,"signum",E,E,1,[[["self"]],["bigint"]]],[11,R[266],E,E,1,[[["self"]],["bool"]]],[11,R[268],E,E,1,[[["self"]],["bool"]]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[8,R[501]],[8,R[678]],[3,R[502]]]};
searchIndex[R[508]]={"doc":"This crate exports a macro `enum_from_primitive!` that…","i":[[4,"Option",R[508],"The `Option` type. See the module level documentation for…",N,N],[13,"None",E,"No value",0,N],[13,"Some",E,"Some value `T`",0,N],[8,R[206],E,R[342],N,N],[11,R[249],E,R[343],1,[[["isize"]],["option"]]],[11,R[601],E,R[344],1,[[["i8"]],["option"]]],[11,R[406],E,R[345],1,[[["i16"]],["option"]]],[11,R[407],E,R[346],1,[[["i32"]],["option"]]],[10,R[408],E,R[347],1,[[["i64"]],["option"]]],[11,R[250],E,R[348],1,[[["i128"]],["option"]]],[11,R[251],E,R[349],1,[[[R[4]]],["option"]]],[11,R[602],E,R[350],1,[[["u8"]],["option"]]],[11,R[409],E,R[351],1,[[["u16"]],["option"]]],[11,R[410],E,R[352],1,[[["u32"]],["option"]]],[10,R[411],E,R[353],1,[[["u64"]],["option"]]],[11,R[252],E,R[354],1,[[["u128"]],["option"]]],[11,R[412],E,R[355],1,[[["f32"]],["option"]]],[11,R[413],E,R[356],1,[[["f64"]],["option"]]],[14,"enum_from_primitive_impl_ty",E,R[509],N,N],[14,"enum_from_primitive_impl",E,R[509],N,N],[14,"enum_from_primitive",E,"Wrap this macro around an `enum` declaration to get an…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[446],E,E,0,[[],["i"]]],[11,"into",E,E,0,[[],[U]]],[11,R[65],E,E,0,[[["self"]],[T]]],[11,R[66],E,E,0,[[[T],["self"]]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,"hash",E,E,0,[[["self"],["__ht"]]]],[11,R[446],E,"Returns a consuming iterator over the possibly contained…",0,[[],["intoiter"]]],[11,"fmt",E,E,0,[[[R[84]],["self"]],[["error"],[R[1],["error"]]]]],[11,"from",E,E,0,[[["option"]],[["option"],[T]]]],[11,"from",E,E,0,[[["option"]],[[T],["option"]]]],[11,"from",E,E,0,[[[T]],["option"]]],[11,R[514],E,"Returns [`None`][Option::None].",0,[[],["option"]]],[11,"from_iter",E,"Takes each element in the [`Iterator`]: if it is…",0,[[["i"]],["option"]]],[11,"cmp",E,E,0,[[["self"],["option"]],[R[82]]]],[11,"eq",E,E,0,[[["self"],["option"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["option"]],["bool"]]],[11,"into_result",E,E,0,[[],[[R[1],[R[510]]],[R[510]]]]],[11,"from_ok",E,E,0,[[[T]],["option"]]],[11,"from_error",E,E,0,[[[R[510]]],["option"]]],[11,"clone",E,E,0,[[["self"]],["option"]]],[11,R[83],E,E,0,[[["self"],["option"]],[[R[82]],["option",[R[82]]]]]],[11,"lt",E,E,0,[[["self"],["option"]],["bool"]]],[11,"le",E,E,0,[[["self"],["option"]],["bool"]]],[11,"gt",E,E,0,[[["self"],["option"]],["bool"]]],[11,"ge",E,E,0,[[["self"],["option"]],["bool"]]],[11,"is_some",E,"Returns `true` if the option is a [`Some`] value.",0,[[["self"]],["bool"]]],[11,"is_none",E,"Returns `true` if the option is a [`None`] value.",0,[[["self"]],["bool"]]],[11,"as_ref",E,"Converts from `&Option<T>` to `Option<&T>`.",0,[[["self"]],[[T],["option"]]]],[11,"as_mut",E,"Converts from `&mut Option<T>` to `Option<&mut T>`.",0,[[["self"]],[["option"],[T]]]],[11,"as_pin_ref",E,"Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`",0,[[["option"],["pin",["option"]]],[["pin"],["option",["pin"]]]]],[11,"as_pin_mut",E,"Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`",0,[[["pin",["option"]],["option"]],[["pin"],["option",["pin"]]]]],[11,"expect",E,"Unwraps an option, yielding the content of a [`Some`].",0,[[["str"]],[T]]],[11,"unwrap",E,"Moves the value `v` out of the `Option<T>` if it is…",0,[[],[T]]],[11,"unwrap_or",E,"Returns the contained value or a default.",0,[[[T]],[T]]],[11,"unwrap_or_else",E,"Returns the contained value or computes it from a closure.",0,[[["f"]],[T]]],[11,"map",E,"Maps an `Option<T>` to `Option<U>` by applying a function…",0,[[["f"]],["option"]]],[11,"map_or",E,R[511],0,[[[U],["f"]],[U]]],[11,"map_or_else",E,R[511],0,[[["f"],["d"]],[U]]],[11,"ok_or",E,R[512],0,[[["e"]],[R[1]]]],[11,"ok_or_else",E,R[512],0,[[["f"]],[R[1]]]],[11,"iter",E,"Returns an iterator over the possibly contained value.",0,[[["self"]],["iter"]]],[11,"iter_mut",E,"Returns a mutable iterator over the possibly contained…",0,[[["self"]],["itermut"]]],[11,"and",E,R[513],0,[[["option"]],["option"]]],[11,"and_then",E,R[513],0,[[["f"]],["option"]]],[11,"filter",E,"Returns `None` if the option is `None`, otherwise calls…",0,[[["p"]],["option"]]],[11,"or",E,"Returns the option if it contains a value, otherwise…",0,[[["option"]],["option"]]],[11,"or_else",E,"Returns the option if it contains a value, otherwise calls…",0,[[["f"]],["option"]]],[11,"xor",E,"Returns [`Some`] if exactly one of `self`, `optb` is…",0,[[["option"]],["option"]]],[11,"get_or_insert",E,"Inserts `v` into the option if it is [`None`], then…",0,[[["self"],[T]],[T]]],[11,"get_or_insert_with",E,"Inserts a value computed from `f` into the option if it is…",0,[[["self"],["f"]],[T]]],[11,"take",E,"Takes the value out of the option, leaving a [`None`] in…",0,[[["self"]],["option"]]],[11,"replace",E,"Replaces the actual value in the option by the value given…",0,[[["self"],[T]],["option"]]],[11,"copied",E,"Maps an `Option<&T>` to an `Option<T>` by copying the…",0,[[],["option"]]],[11,"copied",E,"Maps an `Option<&mut T>` to an `Option<T>` by copying the…",0,[[],["option"]]],[11,"cloned",E,"Maps an `Option<&T>` to an `Option<T>` by cloning the…",0,[[],["option"]]],[11,"cloned",E,"Maps an `Option<&mut T>` to an `Option<T>` by cloning the…",0,[[],["option"]]],[11,"unwrap_or_default",E,"Returns the contained value or a default",0,[[],[T]]],[11,"deref",E,"Converts from `&Option<T>` to `Option<&T::Target>`.",0,[[["self"]],["option"]]],[11,"transpose",E,"Transposes an `Option` of a `Result` into a `Result` of an…",0,[[],[["option"],[R[1],["option"]]]]]],"p":[[4,"Option"],[8,R[206]]]};
searchIndex[R[515]]={"doc":"Rational numbers","i":[[3,"Ratio",R[515],R[684],N,N],[3,R[519],E,E,N,N],[6,R[685],E,R[557],N,N],[6,R[686],E,R[687],N,N],[6,R[688],E,R[689],N,N],[6,R[558],E,R[559],N,N],[11,"new",E,R[690],0,[[[T]],["ratio"]]],[11,R[691],E,R[692],0,[[[T]],["ratio"]]],[11,"new_raw",E,R[693],0,[[[T]],["ratio"]]],[11,R[694],E,R[695],0,[[["self"]],[T]]],[11,"numer",E,R[696],0,[[["self"]],[T]]],[11,"denom",E,R[697],0,[[["self"]],[T]]],[11,R[698],E,R[699],0,[[["self"]],["bool"]]],[11,"reduced",E,R[700],0,[[["self"]],["ratio"]]],[11,"recip",E,R[701],0,[[["self"]],["ratio"]]],[11,"floor",E,R[702],0,[[["self"]],["ratio"]]],[11,"ceil",E,R[703],0,[[["self"]],["ratio"]]],[11,"round",E,R[704],0,[[["self"]],["ratio"]]],[11,"trunc",E,R[705],0,[[["self"]],["ratio"]]],[11,"fract",E,R[706],0,[[["self"]],["ratio"]]],[11,"pow",E,R[707],0,[[["i32"],["self"]],["ratio"]]],[11,R[708],E,R[709],0,[[[R[517]]],[[R[516]],["option",[R[516]]]]]],[11,R[710],E,E,0,[[[R[517]],["numcast"]],[["ratio"],["option",["ratio"]]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[67],E,E,0,[[[U]],[R[1]]]],[11,R[69],E,E,0,[[],[R[1]]]],[11,"into",E,E,0,[[],[U]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[68],E,E,0,[[["self"]],[T]]],[11,R[236],E,E,0,[[["self"]],["typeid"]]],[11,R[238],E,E,0,[[["self"]],["string"]]],[11,R[65],E,E,0,[[["self"]],[T]]],[11,R[66],E,E,0,[[[T],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[67],E,E,1,[[[U]],[R[1]]]],[11,R[69],E,E,1,[[],[R[1]]]],[11,"into",E,E,1,[[],[U]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[68],E,E,1,[[["self"]],[T]]],[11,R[236],E,E,1,[[["self"]],["typeid"]]],[11,R[238],E,E,1,[[["self"]],["string"]]],[11,R[65],E,E,1,[[["self"]],[T]]],[11,R[66],E,E,1,[[[T],["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,R[711],0,[[["self"],[R[84]]],[R[1]]]],[11,"fmt",E,E,1,[[["self"],[R[84]]],[R[1]]]],[11,"div",E,E,0,[[["ratio"]],["ratio"]]],[11,"div",E,E,0,[[[T]],["ratio"]]],[11,"div",E,E,0,[[["ratio"]],["ratio"]]],[11,"div",E,E,0,[[[T]],["ratio"]]],[11,"eq",E,E,0,[[["self"]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[518]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[518]]],["bool"]]],[11,"cmp",E,E,0,[[["self"]],[R[82]]]],[11,R[83],E,E,0,[[["self"]],[[R[82]],["option",[R[82]]]]]],[11,"from",E,E,0,[[[T]],["ratio"]]],[11,"from",E,E,0,[[],["ratio"]]],[11,"hash",E,E,0,[[["h"],["self"]]]],[11,"add",E,E,0,[[["ratio"]],["ratio"]]],[11,"add",E,E,0,[[[T]],["ratio"]]],[11,"add",E,E,0,[[["ratio"]],["ratio"]]],[11,"add",E,E,0,[[[T]],["ratio"]]],[11,"sub",E,E,0,[[["ratio"]],["ratio"]]],[11,"sub",E,E,0,[[[T]],["ratio"]]],[11,"sub",E,E,0,[[["ratio"]],["ratio"]]],[11,"sub",E,E,0,[[[T]],["ratio"]]],[11,"mul",E,E,0,[[["ratio"]],["ratio"]]],[11,"mul",E,E,0,[[[T]],["ratio"]]],[11,"mul",E,E,0,[[["ratio"]],["ratio"]]],[11,"mul",E,E,0,[[[T]],["ratio"]]],[11,"rem",E,E,0,[[["ratio"]],["ratio"]]],[11,"rem",E,E,0,[[[T]],["ratio"]]],[11,"rem",E,E,0,[[["ratio"]],["ratio"]]],[11,"rem",E,E,0,[[[T]],["ratio"]]],[11,"neg",E,E,0,[[],["ratio"]]],[11,R[241],E,E,0,[[["ratio"],["self"]]]],[11,R[241],E,E,0,[[["self"],[T]]]],[11,R[241],E,E,0,[[["ratio"],["self"]]]],[11,R[241],E,E,0,[[["self"],[T]]]],[11,R[242],E,E,0,[[["ratio"],["self"]]]],[11,R[242],E,E,0,[[["self"],[T]]]],[11,R[242],E,E,0,[[["ratio"],["self"]]]],[11,R[242],E,E,0,[[["self"],[T]]]],[11,R[243],E,E,0,[[["ratio"],["self"]]]],[11,R[243],E,E,0,[[["self"],[T]]]],[11,R[243],E,E,0,[[["ratio"],["self"]]]],[11,R[243],E,E,0,[[["self"],[T]]]],[11,R[244],E,E,0,[[["ratio"],["self"]]]],[11,R[244],E,E,0,[[["self"],[T]]]],[11,R[244],E,E,0,[[["ratio"],["self"]]]],[11,R[244],E,E,0,[[["self"],[T]]]],[11,R[245],E,E,0,[[["ratio"],["self"]]]],[11,R[245],E,E,0,[[["self"],[T]]]],[11,R[245],E,E,0,[[["ratio"],["self"]]]],[11,R[245],E,E,0,[[["self"],[T]]]],[11,R[520],E,E,0,[[["i"]],["self"]]],[11,R[520],E,E,0,[[["i"]],["self"]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,R[503],E,R[712],0,[[["str"]],[["ratio"],[R[518]],[R[1],["ratio",R[518]]]]]],[11,"clone",E,E,0,[[["self"]],["ratio"]]],[11,"clone",E,E,1,[[["self"]],[R[518]]]],[11,"into",E,E,0,[[]]],[11,R[286],E,E,0,[[["ratio"],["self"]],[["ratio"],["option",["ratio"]]]]],[11,"one",E,E,0,[[],["ratio"]]],[11,"is_one",E,E,0,[[["self"]],["bool"]]],[11,R[600],E,E,0,[[["self"]]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[408],E,E,0,[[["i64"]],["option"]]],[11,R[250],E,E,0,[[["i128"]],["option"]]],[11,R[411],E,E,0,[[["u64"]],["option"]]],[11,R[252],E,E,0,[[["u128"]],["option"]]],[11,R[412],E,E,0,[[["f32"]],["option"]]],[11,R[413],E,E,0,[[["f64"]],["option"]]],[11,R[280],E,E,0,[[["ratio"],["self"]],[["ratio"],["option",["ratio"]]]]],[11,"pow",E,E,0,[[["i8"]],["ratio"]]],[11,"pow",E,E,0,[[["i8"]],["ratio"]]],[11,"pow",E,E,0,[[["i16"]],["ratio"]]],[11,"pow",E,E,0,[[["i16"]],["ratio"]]],[11,"pow",E,E,0,[[["i32"]],["ratio"]]],[11,"pow",E,E,0,[[["i32"]],["ratio"]]],[11,"pow",E,E,0,[[["i64"]],["ratio"]]],[11,"pow",E,E,0,[[["i64"]],["ratio"]]],[11,"pow",E,E,0,[[["isize"]],["ratio"]]],[11,"pow",E,E,0,[[["isize"]],["ratio"]]],[11,"pow",E,E,0,[[["u8"]],["ratio"]]],[11,"pow",E,E,0,[[["u8"]],["ratio"]]],[11,"pow",E,E,0,[[["u16"]],["ratio"]]],[11,"pow",E,E,0,[[["u16"]],["ratio"]]],[11,"pow",E,E,0,[[["u32"]],["ratio"]]],[11,"pow",E,E,0,[[["u32"]],["ratio"]]],[11,"pow",E,E,0,[[["u64"]],["ratio"]]],[11,"pow",E,E,0,[[["u64"]],["ratio"]]],[11,"pow",E,E,0,[[[R[4]]],["ratio"]]],[11,"pow",E,E,0,[[[R[4]]],["ratio"]]],[11,R[254],E,R[713],0,[[["u32"],["str"]],[["ratio"],[R[518]],[R[1],["ratio",R[518]]]]]],[11,"zero",E,E,0,[[],["ratio"]]],[11,R[507],E,E,0,[[["self"]],["bool"]]],[11,R[420],E,E,0,[[["self"]]]],[11,R[283],E,E,0,[[["ratio"],["self"]],[["ratio"],["option",["ratio"]]]]],[11,R[277],E,E,0,[[["ratio"],["self"]],[["ratio"],["option",["ratio"]]]]],[11,"inv",E,E,0,[[],["ratio"]]],[11,"abs",E,E,0,[[["self"]],["ratio"]]],[11,R[314],E,E,0,[[["ratio"],["self"]],["ratio"]]],[11,"signum",E,E,0,[[["self"]],["ratio"]]],[11,R[266],E,E,0,[[["self"]],["bool"]]],[11,R[268],E,E,0,[[["self"]],["bool"]]],[11,R[504],E,E,1,[[["self"]],["str"]]]],"p":[[3,"Ratio"],[3,R[519]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);